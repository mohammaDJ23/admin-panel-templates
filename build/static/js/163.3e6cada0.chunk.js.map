{"version":3,"sources":["modules/thirdParty/recharts/Treemap/Components/data.js","modules/thirdParty/recharts/Treemap/Components/SimpleTreemap.js","modules/thirdParty/recharts/Treemap/Components/CustomContentTreemap.js","modules/thirdParty/recharts/Treemap/index.js","webpack:///./src/modules/thirdParty/recharts/Treemap/Components/SimpleTreemap.js?92a2","webpack:///./src/modules/thirdParty/recharts/Treemap/Components/CustomContentTreemap.js?d8bc"],"names":["data","name","children","size","SimpleTreemap","width","height","dataKey","ratio","stroke","fill","COLORS","CustomizedContent","this","props","root","depth","x","y","index","colors","style","Math","floor","length","strokeWidth","strokeOpacity","textAnchor","fontSize","fillOpacity","Component","CustomContentTreemap","content","Treemap","match","ComponentHeader","title","refUrl","GridContainer","Grid","item","xs","lg","ComponentCard","component","source"],"mappings":"wIAqIeA,EArIF,CACX,CACEC,KAAM,OACNC,SAAU,CACR,CAACD,KAAM,OAAQE,KAAM,MACrB,CAACF,KAAM,OAAQE,KAAM,OACrB,CAACF,KAAM,eAAgBE,KAAM,KAC7B,CAACF,KAAM,YAAaE,KAAM,KAC1B,CAACF,KAAM,gBAAiBE,KAAM,QAGlC,CACEF,KAAM,WACNC,SAAU,CACR,CAACD,KAAM,gBAAiBE,KAAM,MAC9B,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,UAAWE,KAAM,MACxB,CAACF,KAAM,cAAeE,KAAM,MAC5B,CAACF,KAAM,cAAeE,KAAM,MAC5B,CAACF,KAAM,gBAAiBE,KAAM,MAC9B,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,WAAYE,KAAM,KACzB,CAACF,KAAM,iBAAkBE,KAAM,MAC/B,CAACF,KAAM,mBAAoBE,KAAM,MACjC,CAACF,KAAM,iBAAkBE,KAAM,QAGnC,CACEF,KAAM,OACNC,SAAU,CACR,CAACD,KAAM,OAAQE,KAAM,OACrB,CAACF,KAAM,WAAYE,KAAM,OACzB,CAACF,KAAM,aAAcE,KAAM,OAC3B,CAACF,KAAM,aAAcE,KAAM,MAC3B,CAACF,KAAM,aAAcE,KAAM,OAC3B,CACEF,KAAM,SACNC,SAAU,CACR,CAACD,KAAM,YAAaE,KAAM,KAC1B,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,YAAaE,KAAM,KAC1B,CAACF,KAAM,gBAAiBE,KAAM,QAGlC,CAACF,KAAM,eAAgBE,KAAM,OAC7B,CAACF,KAAM,OAAQE,KAAM,MACrB,CAACF,KAAM,cAAeE,KAAM,QAGhC,CACEF,KAAM,SACNC,SAAU,CACR,CAACD,KAAM,YAAaE,KAAM,MAC1B,CAACF,KAAM,iBAAkBE,KAAM,MAC/B,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,qBAAsBE,KAAM,QAGvC,CACEF,KAAM,SACNC,SAAU,CACR,CAACD,KAAM,SAAUE,KAAM,OACvB,CAACF,KAAM,aAAcE,KAAM,MAC3B,CAACF,KAAM,cAAeE,KAAM,SAGhC,CACEF,KAAM,WACNC,SAAU,CACR,CACED,KAAM,aACNC,SAAU,CACR,CAACD,KAAM,oBAAqBE,KAAM,MAClC,CAACF,KAAM,aAAcE,KAAM,MAC3B,CAACF,KAAM,oBAAqBE,KAAM,QAGtC,CACEF,KAAM,UACNC,SAAU,CACR,CAACD,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,UAAWE,KAAM,MACxB,CAACF,KAAM,kBAAmBE,KAAM,MAChC,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,cAAeE,KAAM,QAGhC,CACEF,KAAM,SACNC,SAAU,CACR,CAACD,KAAM,oBAAqBE,KAAM,MAClC,CAACF,KAAM,sBAAuBE,KAAM,MACpC,CAACF,KAAM,mBAAoBE,KAAM,QAGrC,CAACF,KAAM,YAAaE,KAAM,MAC1B,CACEF,KAAM,QACNC,SAAU,CACR,CAACD,KAAM,UAAWE,KAAM,MACxB,CAACF,KAAM,gBAAiBE,KAAM,MAC9B,CAACF,KAAM,qBAAsBE,KAAM,QAGvC,CACEF,KAAM,SACNC,SAAU,CACR,CAACD,KAAM,aAAcE,KAAM,MAC3B,CAACF,KAAM,oBAAqBE,KAAM,MAClC,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,sBAAuBE,KAAM,OACpC,CAACF,KAAM,mBAAoBE,KAAM,MACjC,CAACF,KAAM,sBAAuBE,KAAM,MACpC,CAACF,KAAM,mBAAoBE,KAAM,MACjC,CAACF,KAAM,qBAAsBE,KAAM,MACnC,CAACF,KAAM,SAAUE,KAAM,MACvB,CAACF,KAAM,qBAAsBE,KAAM,OACnC,CAACF,KAAM,YAAaE,KAAM,MAC1B,CAACF,KAAM,mBAAoBE,KAAM,OACjC,CAACF,KAAM,eAAgBE,KAAM,KAC7B,CAACF,KAAM,oBAAqBE,KAAM,MAClC,CAACF,KAAM,gBAAiBE,KAAM,QAGlC,CAACF,KAAM,WAAYE,KAAM,MACzB,CAACF,KAAM,eAAgBE,KAAM,MAC7B,CAACF,KAAM,mBAAoBE,KAAM,MACjC,CAACF,KAAM,iBAAkBE,KAAM,MAC/B,CAACF,KAAM,eAAgBE,KAAM,SChHpBC,EAZO,kBACpB,kBAAC,IAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CACEN,KAAMA,EACNO,QAAQ,OACRC,MAAO,EAAI,EACXC,OAAO,OACPC,KAAK,c,oCCPLC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAGIC,E,uKACM,IAAD,EACyDC,KAAKC,MAA9DC,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,EAAGC,EADhB,EACgBA,EAAGb,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,OAAQa,EADlC,EACkCA,MAAOC,EADzC,EACyCA,OAAQnB,EADjD,EACiDA,KAExD,OACE,2BACE,0BACEgB,EAAGA,EACHC,EAAGA,EACHb,MAAOA,EACPC,OAAQA,EACRe,MAAO,CACLX,KACEM,EAAQ,EACJI,EAAOE,KAAKC,MAAOJ,EAAQJ,EAAKb,SAASsB,OAAU,IACnD,OACNf,OAAQ,OACRgB,YAAa,GAAKT,EAAQ,OAC1BU,cAAe,GAAKV,EAAQ,UAGrB,IAAVA,EACC,0BACEC,EAAGA,EAAIZ,EAAQ,EACfa,EAAGA,EAAIZ,EAAS,EAAI,EACpBqB,WAAW,SACXjB,KAAK,OACLkB,SAAU,IACT3B,GAED,KACO,IAAVe,EACC,0BACEC,EAAGA,EAAI,EACPC,EAAGA,EAAI,GACPR,KAAK,OACLkB,SAAU,GACVC,YAAa,IACZV,EAAQ,GAET,U,GAxCoBW,aA2DjBC,EAbc,kBAC3B,kBAAC,IAAD,CAAqB1B,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CACEN,KAAMA,EACNO,QAAQ,OACRC,MAAO,EAAI,EACXC,OAAO,OACPC,KAAK,UACLsB,QAAS,kBAAC,EAAD,CAAmBZ,OAAQT,Q,oCC1B3BsB,UA5BC,SAAC,GAAY,EAAXC,MAChB,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNC,OAAO,2CAGT,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEP,MAAM,kBACNQ,UAAWxC,EACXyC,OC1BG,0aD6BP,kBAACN,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEP,MAAM,yBACNQ,UAAWb,EACXc,OEjCG","file":"static/js/163.3e6cada0.chunk.js","sourcesContent":["const data = [\r\n  {\r\n    name: 'axis',\r\n    children: [\r\n      {name: 'Axes', size: 1302},\r\n      {name: 'Axis', size: 24593},\r\n      {name: 'AxisGridLine', size: 652},\r\n      {name: 'AxisLabel', size: 636},\r\n      {name: 'CartesianAxes', size: 6703},\r\n    ],\r\n  },\r\n  {\r\n    name: 'controls',\r\n    children: [\r\n      {name: 'AnchorControl', size: 2138},\r\n      {name: 'ClickControl', size: 3824},\r\n      {name: 'Control', size: 1353},\r\n      {name: 'ControlList', size: 4665},\r\n      {name: 'DragControl', size: 2649},\r\n      {name: 'ExpandControl', size: 2832},\r\n      {name: 'HoverControl', size: 4896},\r\n      {name: 'IControl', size: 763},\r\n      {name: 'PanZoomControl', size: 5222},\r\n      {name: 'SelectionControl', size: 7862},\r\n      {name: 'TooltipControl', size: 8435},\r\n    ],\r\n  },\r\n  {\r\n    name: 'data',\r\n    children: [\r\n      {name: 'Data', size: 20544},\r\n      {name: 'DataList', size: 19788},\r\n      {name: 'DataSprite', size: 10349},\r\n      {name: 'EdgeSprite', size: 3301},\r\n      {name: 'NodeSprite', size: 19382},\r\n      {\r\n        name: 'render',\r\n        children: [\r\n          {name: 'ArrowType', size: 698},\r\n          {name: 'EdgeRenderer', size: 5569},\r\n          {name: 'IRenderer', size: 353},\r\n          {name: 'ShapeRenderer', size: 2247},\r\n        ],\r\n      },\r\n      {name: 'ScaleBinding', size: 11275},\r\n      {name: 'Tree', size: 7147},\r\n      {name: 'TreeBuilder', size: 9930},\r\n    ],\r\n  },\r\n  {\r\n    name: 'events',\r\n    children: [\r\n      {name: 'DataEvent', size: 7313},\r\n      {name: 'SelectionEvent', size: 6880},\r\n      {name: 'TooltipEvent', size: 3701},\r\n      {name: 'VisualizationEvent', size: 2117},\r\n    ],\r\n  },\r\n  {\r\n    name: 'legend',\r\n    children: [\r\n      {name: 'Legend', size: 20859},\r\n      {name: 'LegendItem', size: 4614},\r\n      {name: 'LegendRange', size: 10530},\r\n    ],\r\n  },\r\n  {\r\n    name: 'operator',\r\n    children: [\r\n      {\r\n        name: 'distortion',\r\n        children: [\r\n          {name: 'BifocalDistortion', size: 4461},\r\n          {name: 'Distortion', size: 6314},\r\n          {name: 'FisheyeDistortion', size: 3444},\r\n        ],\r\n      },\r\n      {\r\n        name: 'encoder',\r\n        children: [\r\n          {name: 'ColorEncoder', size: 3179},\r\n          {name: 'Encoder', size: 4060},\r\n          {name: 'PropertyEncoder', size: 4138},\r\n          {name: 'ShapeEncoder', size: 1690},\r\n          {name: 'SizeEncoder', size: 1830},\r\n        ],\r\n      },\r\n      {\r\n        name: 'filter',\r\n        children: [\r\n          {name: 'FisheyeTreeFilter', size: 5219},\r\n          {name: 'GraphDistanceFilter', size: 3165},\r\n          {name: 'VisibilityFilter', size: 3509},\r\n        ],\r\n      },\r\n      {name: 'IOperator', size: 1286},\r\n      {\r\n        name: 'label',\r\n        children: [\r\n          {name: 'Labeler', size: 9956},\r\n          {name: 'RadialLabeler', size: 3899},\r\n          {name: 'StackedAreaLabeler', size: 3202},\r\n        ],\r\n      },\r\n      {\r\n        name: 'layout',\r\n        children: [\r\n          {name: 'AxisLayout', size: 6725},\r\n          {name: 'BundledEdgeRouter', size: 3727},\r\n          {name: 'CircleLayout', size: 9317},\r\n          {name: 'CirclePackingLayout', size: 12003},\r\n          {name: 'DendrogramLayout', size: 4853},\r\n          {name: 'ForceDirectedLayout', size: 8411},\r\n          {name: 'IcicleTreeLayout', size: 4864},\r\n          {name: 'IndentedTreeLayout', size: 3174},\r\n          {name: 'Layout', size: 7881},\r\n          {name: 'NodeLinkTreeLayout', size: 12870},\r\n          {name: 'PieLayout', size: 2728},\r\n          {name: 'RadialTreeLayout', size: 12348},\r\n          {name: 'RandomLayout', size: 870},\r\n          {name: 'StackedAreaLayout', size: 9121},\r\n          {name: 'TreeMapLayout', size: 9191},\r\n        ],\r\n      },\r\n      {name: 'Operator', size: 2490},\r\n      {name: 'OperatorList', size: 5248},\r\n      {name: 'OperatorSequence', size: 4190},\r\n      {name: 'OperatorSwitch', size: 2581},\r\n      {name: 'SortOperator', size: 2023},\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import React from 'react';\r\nimport {ResponsiveContainer, Treemap} from 'recharts';\r\nimport data from './data';\r\n\r\nconst SimpleTreemap = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <Treemap\r\n      data={data}\r\n      dataKey='size'\r\n      ratio={4 / 3}\r\n      stroke='#fff'\r\n      fill='#4299E1'\r\n    />\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default SimpleTreemap;\r\n","import React, {Component} from 'react';\r\nimport {ResponsiveContainer, Treemap} from 'recharts';\r\nimport data from './data';\r\n\r\nconst COLORS = [\r\n  '#8889DD',\r\n  '#9597E4',\r\n  '#8DC77B',\r\n  '#A5D297',\r\n  '#E2CF45',\r\n  '#F8C12D',\r\n];\r\n\r\nclass CustomizedContent extends Component {\r\n  render() {\r\n    const {root, depth, x, y, width, height, index, colors, name} = this.props;\r\n\r\n    return (\r\n      <g>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          style={{\r\n            fill:\r\n              depth < 2\r\n                ? colors[Math.floor((index / root.children.length) * 6)]\r\n                : 'none',\r\n            stroke: '#fff',\r\n            strokeWidth: 2 / (depth + 1e-10),\r\n            strokeOpacity: 1 / (depth + 1e-10),\r\n          }}\r\n        />\r\n        {depth === 1 ? (\r\n          <text\r\n            x={x + width / 2}\r\n            y={y + height / 2 + 7}\r\n            textAnchor='middle'\r\n            fill='#fff'\r\n            fontSize={14}>\r\n            {name}\r\n          </text>\r\n        ) : null}\r\n        {depth === 1 ? (\r\n          <text\r\n            x={x + 4}\r\n            y={y + 18}\r\n            fill='#fff'\r\n            fontSize={16}\r\n            fillOpacity={0.9}>\r\n            {index + 1}\r\n          </text>\r\n        ) : null}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nconst CustomContentTreemap = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <Treemap\r\n      data={data}\r\n      dataKey='size'\r\n      ratio={4 / 3}\r\n      stroke='#fff'\r\n      fill='#4299E1'\r\n      content={<CustomizedContent colors={COLORS} />}\r\n    />\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default CustomContentTreemap;\r\n","import React from 'react';\r\nimport SimpleTreemap from './Components/SimpleTreemap';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleTreemapSource from '!raw-loader!./Components/SimpleTreemap';\r\nimport CustomContentTreemap from './Components/CustomContentTreemap';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport CustomContentTreemapSource from '!raw-loader!./Components/CustomContentTreemap';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\n\r\nconst Treemap = ({match}) => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Treemap'\r\n        refUrl='http://recharts.org/en-US/api/Treemap/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Simple Tree map'\r\n            component={SimpleTreemap}\r\n            source={SimpleTreemapSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Custom Content Treemap'\r\n            component={CustomContentTreemap}\r\n            source={CustomContentTreemapSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Treemap;\r\n","export default \"import React from 'react';\\r\\nimport {ResponsiveContainer, Treemap} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst SimpleTreemap = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <Treemap\\r\\n      data={data}\\r\\n      dataKey='size'\\r\\n      ratio={4 / 3}\\r\\n      stroke='#fff'\\r\\n      fill='#4299E1'\\r\\n    />\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default SimpleTreemap;\\r\\n\";","export default \"import React, {Component} from 'react';\\r\\nimport {ResponsiveContainer, Treemap} from 'recharts';\\r\\nimport data from './data';\\r\\n\\r\\nconst COLORS = [\\r\\n  '#8889DD',\\r\\n  '#9597E4',\\r\\n  '#8DC77B',\\r\\n  '#A5D297',\\r\\n  '#E2CF45',\\r\\n  '#F8C12D',\\r\\n];\\r\\n\\r\\nclass CustomizedContent extends Component {\\r\\n  render() {\\r\\n    const {root, depth, x, y, width, height, index, colors, name} = this.props;\\r\\n\\r\\n    return (\\r\\n      <g>\\r\\n        <rect\\r\\n          x={x}\\r\\n          y={y}\\r\\n          width={width}\\r\\n          height={height}\\r\\n          style={{\\r\\n            fill:\\r\\n              depth < 2\\r\\n                ? colors[Math.floor((index / root.children.length) * 6)]\\r\\n                : 'none',\\r\\n            stroke: '#fff',\\r\\n            strokeWidth: 2 / (depth + 1e-10),\\r\\n            strokeOpacity: 1 / (depth + 1e-10),\\r\\n          }}\\r\\n        />\\r\\n        {depth === 1 ? (\\r\\n          <text\\r\\n            x={x + width / 2}\\r\\n            y={y + height / 2 + 7}\\r\\n            textAnchor='middle'\\r\\n            fill='#fff'\\r\\n            fontSize={14}>\\r\\n            {name}\\r\\n          </text>\\r\\n        ) : null}\\r\\n        {depth === 1 ? (\\r\\n          <text\\r\\n            x={x + 4}\\r\\n            y={y + 18}\\r\\n            fill='#fff'\\r\\n            fontSize={16}\\r\\n            fillOpacity={0.9}>\\r\\n            {index + 1}\\r\\n          </text>\\r\\n        ) : null}\\r\\n      </g>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nconst CustomContentTreemap = () => (\\r\\n  <ResponsiveContainer width='100%' height={200}>\\r\\n    <Treemap\\r\\n      data={data}\\r\\n      dataKey='size'\\r\\n      ratio={4 / 3}\\r\\n      stroke='#fff'\\r\\n      fill='#4299E1'\\r\\n      content={<CustomizedContent colors={COLORS} />}\\r\\n    />\\r\\n  </ResponsiveContainer>\\r\\n);\\r\\n\\r\\nexport default CustomContentTreemap;\\r\\n\";"],"sourceRoot":""}