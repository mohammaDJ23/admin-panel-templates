{"version":3,"sources":["modules/thirdParty/reactNotification/helpers/randomize.js","modules/thirdParty/reactNotification/helpers/notification.js","modules/thirdParty/reactNotification/AnimationEntrance/index.js","modules/thirdParty/reactNotification/AnimationExit/index.js","modules/thirdParty/reactNotification/Insert/index.js","modules/thirdParty/reactNotification/Container/index.js","modules/thirdParty/reactNotification/CustomContent/index.js","modules/thirdParty/reactNotification/Type/index.js","modules/thirdParty/reactNotification/index.js","webpack:///./src/modules/thirdParty/reactNotification/AnimationEntrance/index.js?707b","webpack:///./src/modules/thirdParty/reactNotification/AnimationExit/index.js?ac27","webpack:///./src/modules/thirdParty/reactNotification/Container/index.js?c48c","webpack:///./src/modules/thirdParty/reactNotification/CustomContent/index.js?3c36","webpack:///./src/modules/thirdParty/reactNotification/Insert/index.js?0058","webpack:///./src/modules/thirdParty/reactNotification/Type/index.js?9c14"],"names":["containers","types","successMessages","errorMessages","warningMessages","defaultMessages","infoMessages","customMessages","getContainer","Math","floor","random","length","getType","index","getTitle","type","getMessage","notifications","title","message","container","insert","animationIn","animationOut","slidingEnter","duration","timingFunction","delay","slidingExit","touchRevert","touchSlidingExit","swipe","fade","dismiss","onScreen","pauseOnHover","waitForAnimation","showIcon","click","touch","AnimationEntrance","add","htmlClasses","store","addNotification","Object","assign","notification","Box","display","flexWrap","mr","my","Button","color","variant","onClick","AnimationExit","InsertExample","props","classes","makeStyles","theme","btnRoot","marginBottom","marginTop","marginLeft","marginRight","useStyles","className","ContainerExample","React","Component","CustomContentExample","addCustomIcon","iconClassName","width","content","Typography","flexDirection","src","alt","component","px","py","this","TypeExample","ReactNotificationEx","ComponentHeader","description","refUrl","name","isMobile","GridContainer","Grid","item","xs","ComponentCard","source","Container","CustomContent","Insert","Type"],"mappings":"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","file":"static/js/151.538f4aa0.chunk.js","sourcesContent":["const containers = [\r\n  'top-left',\r\n  'top-right',\r\n  'top-center',\r\n  'bottom-left',\r\n  'bottom-right',\r\n  'bottom-center',\r\n];\r\n\r\nconst types = ['success', 'danger', 'warning', 'default', 'info', 'awesome'];\r\n\r\nconst successMessages = [\r\n  'All your db has been successfully updated',\r\n  'Your meeting has been successfully attended',\r\n  'Document has been successfully updated',\r\n];\r\n\r\nconst errorMessages = [\r\n  'You have no access rights',\r\n  'An error occurred while saving',\r\n  'Document has been permanently removed',\r\n];\r\n\r\nconst warningMessages = [\r\n  'Your connection is not private',\r\n  \"Your local datetime is not in sync with server's date\",\r\n  \"You've already done this action\",\r\n];\r\n\r\nconst defaultMessages = [\r\n  'All your messages have been logged',\r\n  'A new issue has been reported by Office Desk',\r\n];\r\n\r\nconst infoMessages = [\r\n  'A new appointment has been created in your agenda',\r\n  'You have an appointment at 4PM today',\r\n];\r\n\r\nconst customMessages = [\r\n  'Custom types can be used as well. Pretty cool, huh!?',\r\n  'Types are easily configurable. Nice, huh?!',\r\n];\r\n\r\nexport const getContainer = () => {\r\n  return containers[Math.floor(Math.random() * containers.length)];\r\n};\r\n\r\nexport const getType = () => {\r\n  const index = Math.floor(Math.random() * types.length);\r\n  return types[index];\r\n};\r\n\r\nexport const getTitle = (type) => {\r\n  switch (type) {\r\n    case 'success':\r\n      return 'Success';\r\n    case 'danger':\r\n      return 'Error';\r\n    case 'warning':\r\n      return 'Warning';\r\n    case 'info':\r\n      return undefined;\r\n    case 'default':\r\n    case 'awesome':\r\n      return undefined;\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\n\r\nexport const getMessage = (type) => {\r\n  switch (type) {\r\n    case 'success':\r\n      return successMessages[\r\n        Math.floor(Math.random() * successMessages.length)\r\n      ];\r\n    case 'danger':\r\n      return errorMessages[Math.floor(Math.random() * errorMessages.length)];\r\n    case 'warning':\r\n      return warningMessages[\r\n        Math.floor(Math.random() * warningMessages.length)\r\n      ];\r\n    case 'info':\r\n      return infoMessages[Math.floor(Math.random() * infoMessages.length)];\r\n    case 'default':\r\n      return defaultMessages[\r\n        Math.floor(Math.random() * defaultMessages.length)\r\n      ];\r\n    case 'awesome':\r\n      return customMessages[Math.floor(Math.random() * customMessages.length)];\r\n    default:\r\n      return defaultMessages[\r\n        Math.floor(Math.random() * defaultMessages.length)\r\n      ];\r\n  }\r\n};\r\n","const notifications = {\r\n  title: 'Awesomeness',\r\n  message: 'Awesome Notifications!',\r\n  type: 'success',\r\n  container: 'top-right',\r\n  insert: 'top',\r\n\r\n  animationIn: ['animated', 'fadeIn'],\r\n  animationOut: ['animated', 'faster', 'fadeOut'],\r\n\r\n  slidingEnter: {\r\n    duration: 300,\r\n    timingFunction: 'linear',\r\n    delay: 0,\r\n  },\r\n\r\n  slidingExit: {\r\n    duration: 300,\r\n    timingFunction: 'linear',\r\n    delay: 0,\r\n  },\r\n\r\n  touchRevert: {\r\n    duration: 600,\r\n    timingFunction: 'linear',\r\n    delay: 0,\r\n  },\r\n\r\n  touchSlidingExit: {\r\n    swipe: {\r\n      duration: 600,\r\n      timingFunction: 'linear',\r\n      delay: 0,\r\n    },\r\n    fade: {\r\n      duration: 300,\r\n      timingFunction: 'linear',\r\n      delay: 0,\r\n    },\r\n  },\r\n\r\n  dismiss: {\r\n    duration: 5000,\r\n    onScreen: false,\r\n    pauseOnHover: true,\r\n    waitForAnimation: false,\r\n    showIcon: true,\r\n    click: true,\r\n    touch: true,\r\n  },\r\n};\r\nexport default notifications;\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\nimport {getContainer, getMessage, getType} from '../helpers/randomize';\r\nimport notification from '../helpers/notification';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst AnimationEntrance = () => {\r\n  const add = (htmlClasses) => {\r\n    const type = getType();\r\n    return store.addNotification(\r\n      Object.assign({}, notification, {\r\n        animationIn: htmlClasses,\r\n        container: getContainer(),\r\n        message: getMessage(type),\r\n        type,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box display='flex' flexWrap='wrap'>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated bounceIn'])}>\r\n          Bounce In\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated fadeIn'])}>\r\n          Fade In\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated flipInX'])}>\r\n          Flip In X\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated flipInY'])}>\r\n          Flip In Y\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated zoomIn'])}>\r\n          Zoom In\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated flash'])}>\r\n          Flash\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated jackInTheBox'])}>\r\n          Jack In The Box\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default AnimationEntrance;\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport {getContainer, getMessage, getType} from '../helpers/randomize';\r\nimport notification from '../helpers/notification';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst AnimationExit = () => {\r\n  const add = (htmlClasses) => {\r\n    const type = getType();\r\n    return store.addNotification(\r\n      Object.assign({}, notification, {\r\n        slidingExit: {delay: 300},\r\n        animationOut: htmlClasses,\r\n        container: getContainer(),\r\n        message: getMessage(type),\r\n        type,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box display='flex' flexWrap='wrap'>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated bounceOut'])}>\r\n          Bounce Out\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated fadeOut'])}>\r\n          Fade Out\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated flipOutX'])}>\r\n          Flip Out X\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated flipOutY'])}>\r\n          Flip Out Y\r\n        </Button>\r\n      </Box>\r\n      <Box mr={2} my={1}>\r\n        <Button\r\n          color='primary'\r\n          variant='contained'\r\n          onClick={() => add(['animated zoomOut'])}>\r\n          Zoom Out\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default AnimationExit;\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport notification from '../helpers/notification';\r\nimport {getMessage, getTitle, getType} from '../helpers/randomize';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst InsertExample = (props) => {\r\n  const add = (insert) => {\r\n    const type = getType();\r\n    return store.addNotification(\r\n      Object.assign({}, notification, {\r\n        type,\r\n        insert,\r\n        message: getMessage(type),\r\n        title: getTitle(type),\r\n      }),\r\n    );\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    btnRoot: {\r\n      marginBottom: 4,\r\n      marginTop: 4,\r\n      marginLeft: 8,\r\n      marginRight: 8,\r\n    },\r\n  }));\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <Box>\r\n      <Button\r\n        className={classes.btnRoot}\r\n        color='primary'\r\n        variant='contained'\r\n        onClick={() => add('top')}>\r\n        Top\r\n      </Button>\r\n      <Button\r\n        className={classes.btnRoot}\r\n        color='primary'\r\n        variant='contained'\r\n        onClick={() => add('bottom')}>\r\n        Bottom\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\nexport default InsertExample;\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport notification from '../helpers/notification';\r\nimport {getMessage, getTitle, getType} from '../helpers/randomize';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default class ContainerExample extends React.Component {\r\n  add = (container) => {\r\n    const type = getType();\r\n\r\n    return store.addNotification(\r\n      Object.assign({}, notification, {\r\n        title: getTitle(type),\r\n        message: getMessage(type),\r\n        container,\r\n        type,\r\n      }),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display='flex' flexWrap='wrap'>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('top-left')}>\r\n            Top Left\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('top-right')}>\r\n            Top Right\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('top-center')}>\r\n            Top Center\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('bottom-left')}>\r\n            Bottom Left\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('bottom-right')}>\r\n            Bottom Right\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('bottom-center')}>\r\n            Bottom Center\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport notification from '../helpers/notification';\r\nimport {getContainer} from '../helpers/randomize';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default class CustomContentExample extends React.Component {\r\n  addCustomIcon = (type, iconClassName) => {\r\n    let message;\r\n    if (type === 'success') {\r\n      message = 'Your agenda has been successfully synced';\r\n    } else if (type === 'warning') {\r\n      message = 'Warning! All your db will be lost if you proceed';\r\n    } else if (type === 'danger') {\r\n      message = 'Error! You have no update rights';\r\n    }\r\n\r\n    store.addNotification(\r\n      Object.assign({}, notification, {\r\n        width: 275,\r\n        container: getContainer(),\r\n        content: (\r\n          <Box className={`notification-custom-${type}`}>\r\n            <Box className='notification-custom-icon'>\r\n              <i className={iconClassName} />\r\n            </Box>\r\n            <Box className='notification-custom-content'>\r\n              <Typography className='notification-message'>\r\n                {message}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        ),\r\n      }),\r\n    );\r\n  };\r\n\r\n  add = () => {\r\n    store.addNotification(\r\n      Object.assign({}, notification, {\r\n        width: 325,\r\n        container: getContainer(),\r\n        content: (\r\n          <Box\r\n            display='flex'\r\n            flexDirection='row'\r\n            className='custom-image-content'>\r\n            <img src='/assets/images/logo.png' alt='' />\r\n            <Box component='span' px={8} py={2}>\r\n              Crema Admin\r\n            </Box>\r\n          </Box>\r\n        ),\r\n      }),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display='flex' flexWrap='wrap'>\r\n        <Box mr={2} my={1}>\r\n          <Button color='primary' variant='contained' onClick={this.add}>\r\n            Custom Image Content\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={() =>\r\n              this.addCustomIcon('success', 'fas fa-check-circle')\r\n            }>\r\n            Success with Icon\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={() =>\r\n              this.addCustomIcon('danger', 'fas fa-exclamation-circle')\r\n            }>\r\n            Danger with Icon\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() =>\r\n              this.addCustomIcon('warning', 'fas fa-exclamation-triangle')\r\n            }>\r\n            Warning with Icon\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {store} from 'react-notifications-component';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport notification from '../helpers/notification';\r\nimport {getContainer, getMessage, getTitle} from '../helpers/randomize';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default class TypeExample extends React.Component {\r\n  add = (type) => {\r\n    return store.addNotification(\r\n      Object.assign({}, notification, {\r\n        type,\r\n        title: getTitle(type),\r\n        message: getMessage(type),\r\n        container: getContainer(),\r\n      }),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box display='flex' flexWrap='wrap'>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('success')}>\r\n            Success\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('default')}>\r\n            Default\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('warning')}>\r\n            Warning\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('info')}>\r\n            Info\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('danger')}>\r\n            Danger\r\n          </Button>\r\n        </Box>\r\n        <Box mr={2} my={1}>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            onClick={() => this.add('awesome')}>\r\n            Custom\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\nimport AnimationEntrance from './AnimationEntrance';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport AnimationEntranceSource from '!raw-loader!./AnimationEntrance';\r\nimport AnimationExit from './AnimationExit';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport AnimationExitSource from '!raw-loader!./AnimationExit';\r\nimport Insert from './Insert';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport InsertSource from '!raw-loader!./Insert';\r\nimport Container from './Container';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport ContainerSource from '!raw-loader!./Container';\r\nimport CustomContent from './CustomContent';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport CustomContentSource from '!raw-loader!./CustomContent';\r\nimport Type from './Type';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport TypeSource from '!raw-loader!./Type';\r\nimport ReactNotification from 'react-notifications-component';\r\n\r\nconst ReactNotificationEx = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='React Notifications'\r\n        description='Delightful and highly customisable React Component to notify your users.'\r\n        refUrl='https://teodosii.github.io/react-notifications-component//'\r\n      />\r\n\r\n      <ReactNotification\r\n        types={[\r\n          {\r\n            htmlClasses: ['notification-awesome'],\r\n            name: 'awesome',\r\n          },\r\n        ]}\r\n        isMobile={true}\r\n      />\r\n      <GridContainer>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Animation Entrance'\r\n            description='Entrance animation can be customised by specifying CSS classes'\r\n            component={AnimationEntrance}\r\n            source={AnimationEntranceSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Animation Exit'\r\n            description='Exit animation can be customised by specifying CSS classes'\r\n            component={AnimationExit}\r\n            source={AnimationExitSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Container'\r\n            description='Container can be set from predefined values top-left, top-right, top-center, bottom-left, bottom-right, bottom-center'\r\n            component={Container}\r\n            source={ContainerSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Custom Content'\r\n            description=\"With react-notifications-component notification's content can be customised to suit your needs.\"\r\n            component={CustomContent}\r\n            source={CustomContentSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Insert'\r\n            description='Insertion in react-notifications can be done either at the top or at the bottom of the container'\r\n            component={Insert}\r\n            source={InsertSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Type'\r\n            description='Type can be set from predefined values success, default, warning, info, danger or custom to suit your needs'\r\n            component={Type}\r\n            source={TypeSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactNotificationEx;\r\n","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport {getContainer, getMessage, getType} from '../helpers/randomize';\\r\\nimport notification from '../helpers/notification';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\nconst AnimationEntrance = () => {\\r\\n  const add = (htmlClasses) => {\\r\\n    const type = getType();\\r\\n    return store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        animationIn: htmlClasses,\\r\\n        container: getContainer(),\\r\\n        message: getMessage(type),\\r\\n        type,\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Box display='flex' flexWrap='wrap'>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated bounceIn'])}>\\r\\n          Bounce In\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated fadeIn'])}>\\r\\n          Fade In\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated flipInX'])}>\\r\\n          Flip In X\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated flipInY'])}>\\r\\n          Flip In Y\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated zoomIn'])}>\\r\\n          Zoom In\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated flash'])}>\\r\\n          Flash\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated jackInTheBox'])}>\\r\\n          Jack In The Box\\r\\n        </Button>\\r\\n      </Box>\\r\\n    </Box>\\r\\n  );\\r\\n};\\r\\nexport default AnimationEntrance;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\n\\r\\nimport {getContainer, getMessage, getType} from '../helpers/randomize';\\r\\nimport notification from '../helpers/notification';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\nconst AnimationExit = () => {\\r\\n  const add = (htmlClasses) => {\\r\\n    const type = getType();\\r\\n    return store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        slidingExit: {delay: 300},\\r\\n        animationOut: htmlClasses,\\r\\n        container: getContainer(),\\r\\n        message: getMessage(type),\\r\\n        type,\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Box display='flex' flexWrap='wrap'>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated bounceOut'])}>\\r\\n          Bounce Out\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated fadeOut'])}>\\r\\n          Fade Out\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated flipOutX'])}>\\r\\n          Flip Out X\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated flipOutY'])}>\\r\\n          Flip Out Y\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <Box mr={2} my={1}>\\r\\n        <Button\\r\\n          color='primary'\\r\\n          variant='contained'\\r\\n          onClick={() => add(['animated zoomOut'])}>\\r\\n          Zoom Out\\r\\n        </Button>\\r\\n      </Box>\\r\\n    </Box>\\r\\n  );\\r\\n};\\r\\nexport default AnimationExit;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\n\\r\\nimport notification from '../helpers/notification';\\r\\nimport {getMessage, getTitle, getType} from '../helpers/randomize';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\nexport default class ContainerExample extends React.Component {\\r\\n  add = (container) => {\\r\\n    const type = getType();\\r\\n\\r\\n    return store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        title: getTitle(type),\\r\\n        message: getMessage(type),\\r\\n        container,\\r\\n        type,\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <Box display='flex' flexWrap='wrap'>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('top-left')}>\\r\\n            Top Left\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('top-right')}>\\r\\n            Top Right\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('top-center')}>\\r\\n            Top Center\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('bottom-left')}>\\r\\n            Bottom Left\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('bottom-right')}>\\r\\n            Bottom Right\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('bottom-center')}>\\r\\n            Bottom Center\\r\\n          </Button>\\r\\n        </Box>\\r\\n      </Box>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\n\\r\\nimport notification from '../helpers/notification';\\r\\nimport {getContainer} from '../helpers/randomize';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\n\\r\\nexport default class CustomContentExample extends React.Component {\\r\\n  addCustomIcon = (type, iconClassName) => {\\r\\n    let message;\\r\\n    if (type === 'success') {\\r\\n      message = 'Your agenda has been successfully synced';\\r\\n    } else if (type === 'warning') {\\r\\n      message = 'Warning! All your db will be lost if you proceed';\\r\\n    } else if (type === 'danger') {\\r\\n      message = 'Error! You have no update rights';\\r\\n    }\\r\\n\\r\\n    store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        width: 275,\\r\\n        container: getContainer(),\\r\\n        content: (\\r\\n          <Box className={`notification-custom-${type}`}>\\r\\n            <Box className='notification-custom-icon'>\\r\\n              <i className={iconClassName} />\\r\\n            </Box>\\r\\n            <Box className='notification-custom-content'>\\r\\n              <Typography className='notification-message'>\\r\\n                {message}\\r\\n              </Typography>\\r\\n            </Box>\\r\\n          </Box>\\r\\n        ),\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  add = () => {\\r\\n    store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        width: 325,\\r\\n        container: getContainer(),\\r\\n        content: (\\r\\n          <Box\\r\\n            display='flex'\\r\\n            flexDirection='row'\\r\\n            className='custom-image-content'>\\r\\n            <img src='/assets/images/logo.png' alt='' />\\r\\n            <Box component='span' px={8} py={2}>\\r\\n              Crema Admin\\r\\n            </Box>\\r\\n          </Box>\\r\\n        ),\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <Box display='flex' flexWrap='wrap'>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button color='primary' variant='contained' onClick={this.add}>\\r\\n            Custom Image Content\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            variant='contained'\\r\\n            color='primary'\\r\\n            onClick={() =>\\r\\n              this.addCustomIcon('success', 'fas fa-check-circle')\\r\\n            }>\\r\\n            Success with Icon\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            variant='contained'\\r\\n            color='primary'\\r\\n            onClick={() =>\\r\\n              this.addCustomIcon('danger', 'fas fa-exclamation-circle')\\r\\n            }>\\r\\n            Danger with Icon\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() =>\\r\\n              this.addCustomIcon('warning', 'fas fa-exclamation-triangle')\\r\\n            }>\\r\\n            Warning with Icon\\r\\n          </Button>\\r\\n        </Box>\\r\\n      </Box>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\";","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\n\\r\\nimport notification from '../helpers/notification';\\r\\nimport {getMessage, getTitle, getType} from '../helpers/randomize';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\n\\r\\nconst InsertExample = (props) => {\\r\\n  const add = (insert) => {\\r\\n    const type = getType();\\r\\n    return store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        type,\\r\\n        insert,\\r\\n        message: getMessage(type),\\r\\n        title: getTitle(type),\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  const useStyles = makeStyles((theme) => ({\\r\\n    btnRoot: {\\r\\n      marginBottom: 4,\\r\\n      marginTop: 4,\\r\\n      marginLeft: 8,\\r\\n      marginRight: 8,\\r\\n    },\\r\\n  }));\\r\\n  const classes = useStyles(props);\\r\\n\\r\\n  return (\\r\\n    <Box>\\r\\n      <Button\\r\\n        className={classes.btnRoot}\\r\\n        color='primary'\\r\\n        variant='contained'\\r\\n        onClick={() => add('top')}>\\r\\n        Top\\r\\n      </Button>\\r\\n      <Button\\r\\n        className={classes.btnRoot}\\r\\n        color='primary'\\r\\n        variant='contained'\\r\\n        onClick={() => add('bottom')}>\\r\\n        Bottom\\r\\n      </Button>\\r\\n    </Box>\\r\\n  );\\r\\n};\\r\\nexport default InsertExample;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {store} from 'react-notifications-component';\\r\\nimport Button from '@material-ui/core/Button';\\r\\n\\r\\nimport notification from '../helpers/notification';\\r\\nimport {getContainer, getMessage, getTitle} from '../helpers/randomize';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\nexport default class TypeExample extends React.Component {\\r\\n  add = (type) => {\\r\\n    return store.addNotification(\\r\\n      Object.assign({}, notification, {\\r\\n        type,\\r\\n        title: getTitle(type),\\r\\n        message: getMessage(type),\\r\\n        container: getContainer(),\\r\\n      }),\\r\\n    );\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <Box display='flex' flexWrap='wrap'>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('success')}>\\r\\n            Success\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('default')}>\\r\\n            Default\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('warning')}>\\r\\n            Warning\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('info')}>\\r\\n            Info\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('danger')}>\\r\\n            Danger\\r\\n          </Button>\\r\\n        </Box>\\r\\n        <Box mr={2} my={1}>\\r\\n          <Button\\r\\n            color='primary'\\r\\n            variant='contained'\\r\\n            onClick={() => this.add('awesome')}>\\r\\n            Custom\\r\\n          </Button>\\r\\n        </Box>\\r\\n      </Box>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\";"],"sourceRoot":""}