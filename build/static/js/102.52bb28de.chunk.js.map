{"version":3,"sources":["../node_modules/raf/index.js","../../src/performance-now.coffee","modules/thirdParty/googleMap/GeoLocation/Components/GeoLocation.js","modules/thirdParty/googleMap/GeoLocation/index.js","webpack:///./src/modules/thirdParty/googleMap/GeoLocation/Components/GeoLocation.js?0e5e"],"names":["now","require","root","window","global","vendors","suffix","raf","caf","i","length","last","id","queue","callback","_now","next","Math","max","setTimeout","cp","slice","cancelled","e","round","push","handle","module","exports","fn","call","cancel","apply","arguments","polyfill","object","requestAnimationFrame","cancelAnimationFrame","geolocation","canUseDOM","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","withGoogleMap","props","defaultZoom","center","position","content","radius","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","tick","setState","lat","coords","latitude","lng","longitude","reason","this","containerElement","className","mapElement","Component","GeoLocationEx","ComponentHeader","title","refUrl","GridContainer","Grid","item","xs","ComponentCard","component","GeoLocation","source"],"mappings":"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","file":"static/js/102.52bb28de.chunk.js","sourcesContent":["var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function(object) {\n  if (!object) {\n    object = root;\n  }\n  object.requestAnimationFrame = raf\n  object.cancelAnimationFrame = caf\n}\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","import React, {Component} from 'react';\r\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from 'react-google-maps';\r\nimport canUseDOM from 'can-use-dom';\r\nimport raf from 'raf';\r\n\r\nconst geolocation =\r\n  canUseDOM && navigator.geolocation\r\n    ? navigator.geolocation\r\n    : {\r\n        getCurrentPosition(success, failure) {\r\n          failure(`Your browser doesn't support geolocation.`);\r\n        },\r\n      };\r\n\r\nconst GeolocationExampleGoogleMap = withGoogleMap((props) => (\r\n  <GoogleMap defaultZoom={10} center={props.center}>\r\n    {props.center && (\r\n      <InfoWindow position={props.center}>\r\n        <div>{props.content}</div>\r\n      </InfoWindow>\r\n    )}\r\n    {props.center && (\r\n      <Circle\r\n        center={props.center}\r\n        radius={props.radius}\r\n        options={{\r\n          fillColor: 'red',\r\n          fillOpacity: 0.2,\r\n          strokeColor: 'red',\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n        }}\r\n      />\r\n    )}\r\n  </GoogleMap>\r\n));\r\n\r\n/*\r\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\r\n *\r\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\r\n */\r\nexport default class GeolocationExample extends Component {\r\n  state = {\r\n    center: null,\r\n    content: null,\r\n    radius: 6000,\r\n  };\r\n\r\n  isUnmounted = false;\r\n\r\n  componentDidMount() {\r\n    const tick = () => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\r\n\r\n      if (this.state.radius > 200) {\r\n        raf(tick);\r\n      }\r\n    };\r\n    geolocation.getCurrentPosition(\r\n      (position) => {\r\n        if (this.isUnmounted) {\r\n          return;\r\n        }\r\n        this.setState({\r\n          center: {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          },\r\n          content: `Location found using HTML5.`,\r\n        });\r\n\r\n        raf(tick);\r\n      },\r\n      (reason) => {\r\n        if (this.isUnmounted) {\r\n          return;\r\n        }\r\n        this.setState({\r\n          center: {\r\n            lat: 60,\r\n            lng: 105,\r\n          },\r\n          content: `Error: The Geolocation service failed (${reason}).`,\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isUnmounted = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GeolocationExampleGoogleMap\r\n        containerElement={\r\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n        }\r\n        mapElement={<div className='cr-embed-responsive-item' />}\r\n        center={this.state.center}\r\n        content={this.state.content}\r\n        radius={this.state.radius}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\n\r\nimport GeoLocation from './Components/GeoLocation';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleMapSource from '!raw-loader!./Components/GeoLocation';\r\n\r\nconst GeoLocationEx = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Google Map'\r\n        refUrl='http://google-map-react.github.io/google-map-react/map/balderdash/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Simple Map'\r\n            component={GeoLocation}\r\n            source={SimpleMapSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GeoLocationEx;\r\n","export default \"import React, {Component} from 'react';\\r\\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from 'react-google-maps';\\r\\nimport canUseDOM from 'can-use-dom';\\r\\nimport raf from 'raf';\\r\\n\\r\\nconst geolocation =\\r\\n  canUseDOM && navigator.geolocation\\r\\n    ? navigator.geolocation\\r\\n    : {\\r\\n        getCurrentPosition(success, failure) {\\r\\n          failure(`Your browser doesn't support geolocation.`);\\r\\n        },\\r\\n      };\\r\\n\\r\\nconst GeolocationExampleGoogleMap = withGoogleMap((props) => (\\r\\n  <GoogleMap defaultZoom={10} center={props.center}>\\r\\n    {props.center && (\\r\\n      <InfoWindow position={props.center}>\\r\\n        <div>{props.content}</div>\\r\\n      </InfoWindow>\\r\\n    )}\\r\\n    {props.center && (\\r\\n      <Circle\\r\\n        center={props.center}\\r\\n        radius={props.radius}\\r\\n        options={{\\r\\n          fillColor: 'red',\\r\\n          fillOpacity: 0.2,\\r\\n          strokeColor: 'red',\\r\\n          strokeOpacity: 1,\\r\\n          strokeWeight: 1,\\r\\n        }}\\r\\n      />\\r\\n    )}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\\r\\n *\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nexport default class GeolocationExample extends Component {\\r\\n  state = {\\r\\n    center: null,\\r\\n    content: null,\\r\\n    radius: 6000,\\r\\n  };\\r\\n\\r\\n  isUnmounted = false;\\r\\n\\r\\n  componentDidMount() {\\r\\n    const tick = () => {\\r\\n      if (this.isUnmounted) {\\r\\n        return;\\r\\n      }\\r\\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\\r\\n\\r\\n      if (this.state.radius > 200) {\\r\\n        raf(tick);\\r\\n      }\\r\\n    };\\r\\n    geolocation.getCurrentPosition(\\r\\n      (position) => {\\r\\n        if (this.isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n        this.setState({\\r\\n          center: {\\r\\n            lat: position.coords.latitude,\\r\\n            lng: position.coords.longitude,\\r\\n          },\\r\\n          content: `Location found using HTML5.`,\\r\\n        });\\r\\n\\r\\n        raf(tick);\\r\\n      },\\r\\n      (reason) => {\\r\\n        if (this.isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n        this.setState({\\r\\n          center: {\\r\\n            lat: 60,\\r\\n            lng: 105,\\r\\n          },\\r\\n          content: `Error: The Geolocation service failed (${reason}).`,\\r\\n        });\\r\\n      },\\r\\n    );\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    this.isUnmounted = true;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <GeolocationExampleGoogleMap\\r\\n        containerElement={\\r\\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\\r\\n        }\\r\\n        mapElement={<div className='cr-embed-responsive-item' />}\\r\\n        center={this.state.center}\\r\\n        content={this.state.content}\\r\\n        radius={this.state.radius}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\";"],"sourceRoot":""}