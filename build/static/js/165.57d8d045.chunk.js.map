{"version":3,"sources":["modules/userPages/StyledUserPages/ResetPassword.js"],"names":["useStyles","makeStyles","theme","styledImg","display","breakpoints","up","paddingRight","textField","width","card","maxWidth","textAlign","overflow","padding","boxShadow","paddingLeft","grid","alignSelf","form","button","height","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","oldPassword","required","id","newPassword","confirmPassword","ResetPassword","classes","animation","delay","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","pr","lg","src","alt","title","mb","fontWeight","Fonts","BOLD","fontSize","validateOnChange","initialValues","onSubmit","data","setErrors","resetForm","isSubmitting","clone","noValidate","autoComplete","name","label","variant","type","color","disabled"],"mappings":"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","file":"static/js/165.57d8d045.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  styledImg: {\r\n    display: 'inline-block',\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingRight: 40,\r\n    },\r\n  },\r\n  textField: {\r\n    width: '100%',\r\n  },\r\n  card: {\r\n    maxWidth: 1024,\r\n    width: '100%',\r\n    textAlign: 'center',\r\n    overflow: 'hidden',\r\n    padding: 32,\r\n    boxShadow:\r\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n    [theme.breakpoints.up('md')]: {\r\n      padding: 48,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingRight: 48,\r\n      paddingLeft: 32,\r\n    },\r\n    [theme.breakpoints.up('xl')]: {\r\n      paddingRight: 80,\r\n      paddingLeft: 80,\r\n    },\r\n  },\r\n  grid: {\r\n    textAlign: 'center',\r\n    [theme.breakpoints.up('lg')]: {\r\n      alignSelf: 'center',\r\n    },\r\n  },\r\n  form: {\r\n    textAlign: 'left',\r\n  },\r\n  button: {\r\n    width: '100%',\r\n    height: 44,\r\n  },\r\n}));\r\n\r\nconst MyTextField = (props) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  oldPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterOldPassword' />),\r\n  newPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterNewPassword' />),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.reTypePassword' />),\r\n});\r\n\r\nconst ResetPassword = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n      <Box\r\n        pb={6}\r\n        py={{xl: 8}}\r\n        display='flex'\r\n        flex={1}\r\n        flexDirection='column'\r\n        alignItems='center'\r\n        justifyContent='center'>\r\n        <Card className={classes.card}>\r\n          <Grid container spacing={5}>\r\n            <Grid item xs={12} md={6} className={classes.grid}>\r\n              <Box pr={{lg: 10}} display='inline-block'>\r\n                <img\r\n                  className={classes.styledImg}\r\n                  src={'/assets/images/userPageImages/ResetPassword.png'}\r\n                  alt='crema'\r\n                  title='crema'\r\n                />\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Box mb={{xs: 6, xl: 8}} fontWeight={Fonts.BOLD} fontSize={20}>\r\n                <IntlMessages id='common.resetPassword' />\r\n              </Box>\r\n              <Formik\r\n                validateOnChange={true}\r\n                initialValues={{\r\n                  oldPassword: '',\r\n                  newPassword: '',\r\n                  confirmPassword: '',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(data, {setErrors, resetForm}) => {\r\n                  if (data.newPassword !== data.confirmPassword) {\r\n                    setErrors({\r\n                      confirmPassword: (\r\n                        <IntlMessages id='validation.passwordMisMatch' />\r\n                      ),\r\n                    });\r\n                  } else {\r\n                    resetForm();\r\n                  }\r\n                }}>\r\n                {({isSubmitting}) => (\r\n                  <Box textAlign='left' clone>\r\n                    <Form noValidate autoComplete='off'>\r\n                      <Box mb={{xs: 5, lg: 8}}>\r\n                        <MyTextField\r\n                          name='oldPassword'\r\n                          label={<IntlMessages id='common.oldPassword' />}\r\n                          className={classes.textField}\r\n                          variant='outlined'\r\n                          type='password'\r\n                        />\r\n                      </Box>\r\n\r\n                      <Box mb={{xs: 5, lg: 8}}>\r\n                        <MyTextField\r\n                          name='newPassword'\r\n                          label={<IntlMessages id='common.newPassword' />}\r\n                          className={classes.textField}\r\n                          variant='outlined'\r\n                          type='password'\r\n                        />\r\n                      </Box>\r\n\r\n                      <Box mb={{xs: 5, lg: 8}}>\r\n                        <MyTextField\r\n                          name='confirmPassword'\r\n                          label={<IntlMessages id='common.retypePassword' />}\r\n                          className={classes.textField}\r\n                          variant='outlined'\r\n                          type='password'\r\n                        />\r\n                      </Box>\r\n\r\n                      <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        disabled={isSubmitting}\r\n                        className={classes.button}\r\n                        type='submit'>\r\n                        {<IntlMessages id='common.resetMyPassword' />}\r\n                      </Button>\r\n                    </Form>\r\n                  </Box>\r\n                )}\r\n              </Formik>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Box>\r\n    </AppAnimate>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}