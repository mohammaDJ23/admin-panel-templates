{"version":3,"sources":["modules/userPages/StyledUserPages/UnlockScreen.js"],"names":["useStyles","makeStyles","theme","styledImg","display","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","paddingLeft","paddingRight","form","textField","button","height","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","password","required","id","UnlockScreen","classes","animation","delay","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","src","alt","title","mb","fontWeight","Fonts","BOLD","fontSize","component","validateOnChange","initialValues","onSubmit","data","resetForm","isSubmitting","lg","name","label","variant","type","color","disabled"],"mappings":"sPAaMA,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,UAAW,CACTC,QAAS,gBAEXC,MAAI,GACFC,SAAU,KACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAbd,cAeDb,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAjBd,GAoBJC,KAAM,CACJR,UAAW,QAEbS,UAAW,CACTV,MAAO,QAETW,OAAQ,CACNX,MAAO,OACPY,OAAQ,QAINC,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,SAAUD,MAEPE,SAAS,kBAAC,IAAD,CAAcC,GAAG,mCA8EhBC,UA3EM,WACnB,IAAMC,EAAUnC,IAEhB,OACE,kBAAC,IAAD,CAAYoC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTpC,QAAQ,OACRqC,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAWV,EAAQ9B,MACvB,kBAAC,IAAD,CAAMyC,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,yBACEL,UAAWV,EAAQhC,UACnBgD,IAAK,2CACLC,IAAI,QACJC,MAAM,WAIV,kBAAC,IAAD,CAAML,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKI,GAAI,CAACL,GAAI,EAAGT,GAAI,GAAIe,WAAYC,IAAMC,KAAMC,SAAU,IACzD,kBAAC,IAAD,CAAczB,GAAG,yBAEnB,kBAAC,IAAD,CAAKqB,GAAI,CAACL,GAAI,EAAGT,GAAI,GAAIkB,SAAU,IACjC,kBAAC,IAAD,CAAYC,UAAU,QACpB,kBAAC,IAAD,CAAc1B,GAAG,gCAEnB,kBAAC,IAAD,CAAY0B,UAAU,QACpB,kBAAC,IAAD,CAAc1B,GAAG,iCAGrB,kBAAC,IAAD,CACE2B,kBAAkB,EAClBC,cAAe,CACb9B,SAAU,IAEZF,iBAAkBA,EAClBiC,SAAU,SAACC,EAAD,IACRC,EAD+B,EAAfA,gBAGjB,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMpB,UAAWV,EAAQnB,MACvB,kBAAC,IAAD,CAAKsC,GAAI,CAACL,GAAI,EAAGiB,GAAI,IACnB,kBAAC9C,EAAD,CACE+C,KAAK,WACLC,MAAO,kBAAC,IAAD,CAAcnC,GAAG,oBACxBY,UAAWV,EAAQlB,UACnBoD,QAAQ,WACRC,KAAK,cAGT,kBAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUP,EACVpB,UAAWV,EAAQjB,OACnBoD,KAAK,UACL,kBAAC,IAAD,CAAcrC,GAAG","file":"static/js/166.3c4c5850.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles, Typography} from '@material-ui/core';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  styledImg: {\r\n    display: 'inline-block',\r\n  },\r\n  card: {\r\n    maxWidth: 1024,\r\n    width: '100%',\r\n    textAlign: 'center',\r\n    padding: 32,\r\n    overflow: 'hidden',\r\n    boxShadow:\r\n      '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n    [theme.breakpoints.up('sm')]: {\r\n      padding: 48,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      paddingLeft: 32,\r\n      paddingRight: 64,\r\n    },\r\n    [theme.breakpoints.up('xl')]: {\r\n      paddingLeft: 80,\r\n      paddingRight: 80,\r\n    },\r\n  },\r\n  form: {\r\n    textAlign: 'left',\r\n  },\r\n  textField: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    width: '100%',\r\n    height: 44,\r\n  },\r\n}));\r\n\r\nconst MyTextField = (props) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  password: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.passwordRequired' />),\r\n});\r\n\r\nconst UnlockScreen = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n      <Box\r\n        pb={6}\r\n        py={{xl: 8}}\r\n        display='flex'\r\n        flex={1}\r\n        flexDirection='column'\r\n        alignItems='center'\r\n        justifyContent='center'>\r\n        <Card className={classes.card}>\r\n          <Grid container spacing={5}>\r\n            <Grid item xs={12} md={6}>\r\n              <img\r\n                className={classes.styledImg}\r\n                src={'/assets/images/userPageImages/Unlock.png'}\r\n                alt='crema'\r\n                title='crema'\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Box mb={{xs: 6, xl: 8}} fontWeight={Fonts.BOLD} fontSize={20}>\r\n                <IntlMessages id='common.unlockScreen' />\r\n              </Box>\r\n              <Box mb={{xs: 5, xl: 8}} fontSize={14}>\r\n                <Typography component='span'>\r\n                  <IntlMessages id='common.unlockScreenTextOne' />\r\n                </Typography>\r\n                <Typography component='span'>\r\n                  <IntlMessages id='common.unlockScreenTextTwo' />\r\n                </Typography>\r\n              </Box>\r\n              <Formik\r\n                validateOnChange={true}\r\n                initialValues={{\r\n                  password: '',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(data, {resetForm}) => {\r\n                  resetForm();\r\n                }}>\r\n                {({isSubmitting}) => (\r\n                  <Form className={classes.form}>\r\n                    <Box mb={{xs: 5, lg: 8}}>\r\n                      <MyTextField\r\n                        name='password'\r\n                        label={<IntlMessages id='common.password' />}\r\n                        className={classes.textField}\r\n                        variant='outlined'\r\n                        type='password'\r\n                      />\r\n                    </Box>\r\n                    <Button\r\n                      variant='contained'\r\n                      color='primary'\r\n                      disabled={isSubmitting}\r\n                      className={classes.button}\r\n                      type='submit'>\r\n                      <IntlMessages id='common.unlockItForMe' />\r\n                    </Button>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Box>\r\n    </AppAnimate>\r\n  );\r\n};\r\n\r\nexport default UnlockScreen;\r\n"],"sourceRoot":""}