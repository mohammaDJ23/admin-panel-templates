{"version":3,"sources":["modules/errorPages/ComingSoon/index.js"],"names":["useStyles","makeStyles","theme","form","display","flexDirection","alignItems","marginBottom","textField","width","button","fontWeight","Fonts","BOLD","fontSize","textTransform","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","email","required","ComingSoon","dispatch","useDispatch","classes","animation","delay","py","xl","flex","justifyContent","textAlign","component","mb","xs","md","id","color","grey","MEDIUM","mx","maxWidth","validateOnChange","initialValues","onSubmit","data","resetForm","showMessage","className","placeholder","name","label","variant","type","sm","src","alt"],"mappings":"+PAgBMA,EAAYC,aAAW,SAACC,GAC5B,MAAO,CACLC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,aAAc,IAEhBC,UAAW,CACTC,MAAO,OACPF,aAAc,IAEhBG,OAAQ,CACNC,WAAYC,IAAMC,KAClBC,SAAU,GACVC,cAAe,kBAIfC,EAAc,SAACC,GAAW,IAAD,EACPC,YAASD,GADF,mBACtBE,EADsB,KACfC,EADe,KAEvBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,MAAOD,MAEJC,MAAM,gDACNC,SAAS,iCAuFCC,UApFI,WACjB,IAAMC,EAAWC,cAEXC,EAAUhC,IAEhB,OACE,kBAAC,IAAD,CAAYiC,UAAU,uBAAuBC,MAAO,KAClD,kBAAC,IAAD,CACEC,GAAI,CAACC,GAAI,GACTC,KAAM,EACNjC,QAAQ,OACRC,cAAc,SACdiC,eAAe,SACfhC,WAAW,SACXiC,UAAU,UACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAU,KACVC,GAAI,CAACC,GAAI,EAAGN,GAAI,IAChBtB,SAAU,CAAC4B,GAAI,GAAIC,GAAI,IACvBhC,WAAYC,IAAMC,MAClB,kBAAC,IAAD,CAAc+B,GAAG,qBALnB,KAOA,kBAAC,IAAD,CACEH,GAAI,CAACC,GAAI,EAAGN,GAAI,IAChBS,MAAOC,IAAK,KACZnC,WAAYC,IAAMmC,OAClBjC,SAAU,IACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAc8B,GAAG,8BAEnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcA,GAAG,+BAGrB,kBAAC,IAAD,CAAKI,GAAG,OAAOP,GAAI,EAAGQ,SAAU,KAC9B,kBAAC,IAAD,CACEC,kBAAkB,EAClBC,cAAe,CACbxB,MAAO,IAETF,iBAAkBA,EAClB2B,SAAU,SAACC,EAAD,GAAwB,IAAhBC,EAAe,EAAfA,UAChBxB,EACEyB,aACE,kBAAC,IAAD,CAAcX,GAAG,mCAGrBU,OAED,kBACC,kBAAC,IAAD,CAAME,UAAWxB,EAAQ7B,MACvB,kBAACa,EAAD,CACEyC,YAAY,QACZC,KAAK,QACLC,MAAO,kBAAC,IAAD,CAAcf,GAAG,wBACxBY,UAAWxB,EAAQxB,UACnBoD,QAAQ,aAGV,kBAAC,IAAD,CACEA,QAAQ,YACRf,MAAM,UACNgB,KAAK,SACLL,UAAWxB,EAAQtB,QACnB,kBAAC,IAAD,CAAckC,GAAG,yBAM3B,kBAAC,IAAD,CAAKH,GAAI,EAAGQ,SAAU,CAACP,GAAI,IAAKoB,GAAI,IAAK1B,GAAI,KAAM3B,MAAM,QACvD,yBACEsD,IAAK,gDACLC,IAAI,UAIV,kBAAC,IAAD","file":"static/js/116.42e4516c.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport {useDispatch} from 'react-redux';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport {showMessage} from '../../../redux/actions';\nimport InfoView from '@crema/core/InfoView';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport {grey} from '@material-ui/core/colors';\nimport {makeStyles} from '@material-ui/core';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    form: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    textField: {\n      width: '100%',\n      marginBottom: 20,\n    },\n    button: {\n      fontWeight: Fonts.BOLD,\n      fontSize: 16,\n      textTransform: 'capitalize',\n    },\n  };\n});\nconst MyTextField = (props) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('The Email you entered is not a valid format!')\n    .required('Please enter Email Address!'),\n});\n\nconst ComingSoon = () => {\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        py={{xl: 8}}\n        flex={1}\n        display='flex'\n        flexDirection='column'\n        justifyContent='center'\n        alignItems='center'\n        textAlign='center'>\n        <Box>\n          <Box\n            component='h3'\n            mb={{xs: 4, xl: 10}}\n            fontSize={{xs: 20, md: 24}}\n            fontWeight={Fonts.BOLD}>\n            <IntlMessages id='error.comingSoon' />!\n          </Box>\n          <Box\n            mb={{xs: 5, xl: 12}}\n            color={grey[600]}\n            fontWeight={Fonts.MEDIUM}\n            fontSize={16}>\n            <Typography>\n              <IntlMessages id='error.comingSoonMessage1' />\n            </Typography>\n            <Typography>\n              <IntlMessages id='error.comingSoonMessage2' />\n            </Typography>\n          </Box>\n          <Box mx='auto' mb={5} maxWidth={384}>\n            <Formik\n              validateOnChange={true}\n              initialValues={{\n                email: '',\n              }}\n              validationSchema={validationSchema}\n              onSubmit={(data, {resetForm}) => {\n                dispatch(\n                  showMessage(\n                    <IntlMessages id='error.comingSoonNotification' />,\n                  ),\n                );\n                resetForm();\n              }}>\n              {() => (\n                <Form className={classes.form}>\n                  <MyTextField\n                    placeholder='Email'\n                    name='email'\n                    label={<IntlMessages id='common.emailAddress' />}\n                    className={classes.textField}\n                    variant='outlined'\n                  />\n\n                  <Button\n                    variant='contained'\n                    color='primary'\n                    type='submit'\n                    className={classes.button}>\n                    <IntlMessages id='error.notifyMe' />\n                  </Button>\n                </Form>\n              )}\n            </Formik>\n          </Box>\n          <Box mb={5} maxWidth={{xs: 300, sm: 400, xl: 672}} width='100%'>\n            <img\n              src={'/assets/images/errorPageImages/comingsoon.png'}\n              alt='404'\n            />\n          </Box>\n        </Box>\n        <InfoView />\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ComingSoon;\n"],"sourceRoot":""}