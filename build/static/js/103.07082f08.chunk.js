(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[103],{1584:function(e,n,r){var t=r(160),o=r(135);e.exports=function(e){return"number"==typeof e||o(e)&&"[object Number]"==t(e)}},2690:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SearchBox=void 0;var t=x(r(1458)),o=x(r(1450)),a=x(r(1451)),s=x(r(1452)),i=x(r(1453)),l=x(r(1454)),c=x(r(1584)),p=x(r(1477)),d=x(r(1653)),u=x(r(0)),m=x(r(35)),h=x(r(11)),g=r(1463),f=r(1459);function x(e){return e&&e.__esModule?e:{default:e}}var b=n.SearchBox=function(e){function n(){var e,r,s,l;(0,a.default)(this,n);for(var c=arguments.length,p=Array(c),d=0;d<c;d++)p[d]=arguments[d];return r=s=(0,i.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(p))),s.state=(0,t.default)({},f.SEARCH_BOX,null),l=r,(0,i.default)(s,l)}return(0,l.default)(n,e),(0,s.default)(n,[{key:"componentWillMount",value:function(){d.default&&!this.containerElement&&((0,p.default)(google.maps.places,'Did you include "libraries=places" in the URL?'),this.containerElement=document.createElement("div"),this.handleRenderChildToContainerElement(),u.default.version.match(/^16/)||this.handleInitializeSearchBox())}},{key:"componentDidMount",value:function(){var e=this.state[f.SEARCH_BOX];u.default.version.match(/^16/)&&(e=this.handleInitializeSearchBox()),(0,g.componentDidMount)(this,e,y),this.handleMountAtControlPosition()}},{key:"componentWillUpdate",value:function(e){this.props.controlPosition!==e.controlPosition&&this.handleUnmountAtControlPosition()}},{key:"componentDidUpdate",value:function(e){(0,g.componentDidUpdate)(this,this.state[f.SEARCH_BOX],y,C,e),this.props.children!==e.children&&this.handleRenderChildToContainerElement(),this.props.controlPosition!==e.controlPosition&&this.handleMountAtControlPosition()}},{key:"componentWillUnmount",value:function(){(0,g.componentWillUnmount)(this),this.handleUnmountAtControlPosition(),u.default.version.match(/^16/)||this.containerElement&&(m.default.unmountComponentAtNode(this.containerElement),this.containerElement=null)}},{key:"handleInitializeSearchBox",value:function(){var e=new google.maps.places.SearchBox(this.containerElement.querySelector("input"));return(0,g.construct)(n.propTypes,C,this.props,e),this.setState((0,t.default)({},f.SEARCH_BOX,e)),e}},{key:"handleRenderChildToContainerElement",value:function(){u.default.version.match(/^16/)||m.default.unstable_renderSubtreeIntoContainer(this,u.default.Children.only(this.props.children),this.containerElement)}},{key:"handleMountAtControlPosition",value:function(){v(this.props.controlPosition)&&(this.mountControlIndex=-1+this.context[f.MAP].controls[this.props.controlPosition].push(this.containerElement.firstChild))}},{key:"handleUnmountAtControlPosition",value:function(){if(v(this.props.controlPosition)){var e=this.context[f.MAP].controls[this.props.controlPosition].removeAt(this.mountControlIndex);void 0!==e&&this.containerElement.appendChild(e)}}},{key:"render",value:function(){return!!u.default.version.match(/^16/)&&m.default.createPortal(u.default.Children.only(this.props.children),this.containerElement)}},{key:"getBounds",value:function(){return this.state[f.SEARCH_BOX].getBounds()}},{key:"getPlaces",value:function(){return this.state[f.SEARCH_BOX].getPlaces()}}]),n}(u.default.PureComponent);b.propTypes={controlPosition:h.default.number,defaultBounds:h.default.any,bounds:h.default.any,onPlacesChanged:h.default.func},b.contextTypes=(0,t.default)({},f.MAP,h.default.object),n.default=b;var v=c.default,y={onPlacesChanged:"places_changed"},C={bounds:function(e,n){e.setBounds(n)}}},3165:function(e,n,r){"use strict";r.r(n);var t=r(0),o=r.n(t),a=r(359),s=r(408),i=r(407),l=r(406),c=r(413),p=r(414),d=r(416),u=r(415),m=window.google,h=r(77),g=r(1876),f=g.compose,x=g.withProps,b=g.lifecycle,v=r(1484),y=v.withScriptjs,C=v.withGoogleMap,S=v.GoogleMap,M=v.Marker,B=r(2690).SearchBox,E=f(x({googleMapURL:"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k",loadingElement:o.a.createElement("div",{className:"cr-embed-responsive-item"}),containerElement:o.a.createElement("div",{className:"cr-embed-responsive cr-embed-responsive-21by9"}),mapElement:o.a.createElement("div",{className:"cr-embed-responsive-item"})}),b({componentWillMount:function(){var e=this,n={};this.setState({bounds:null,center:{lat:41.9,lng:-87.624},markers:[],onMapMounted:function(e){n.map=e},onBoundsChanged:function(){e.setState({bounds:n.map.getBounds(),center:n.map.getCenter()})},onSearchBoxMounted:function(e){n.searchBox=e},onPlacesChanged:function(){var r=n.searchBox.getPlaces(),t=new m.maps.LatLngBounds;r.forEach((function(e){e.geometry&&e.geometry.viewport?t.union(e.geometry.viewport):t.extend(e.geometry.location)}));var o=r.map((function(e){return{position:e.geometry.location}})),a=h.get(o,"0.position",e.state.center);e.setState({center:a,markers:o})}})}}),y,C)((function(e){return o.a.createElement(S,{ref:e.onMapMounted,defaultZoom:15,center:e.center,defaultOptions:{mapTypeControl:!1},onBoundsChanged:e.onBoundsChanged},o.a.createElement(B,{ref:e.onSearchBoxMounted,bounds:e.bounds,controlPosition:m.maps.ControlPosition.TOP_LEFT,onPlacesChanged:e.onPlacesChanged},o.a.createElement("input",{type:"text",placeholder:"Enter search location",style:{boxSizing:"border-box",border:"1px solid transparent",width:"240px",height:"32px",marginTop:"27px",padding:"0 12px",borderRadius:"3px",boxShadow:"0 2px 6px rgba(0, 0, 0, 0.3)",fontSize:"14px",outline:"none",marginLeft:"20px",textOverflow:"ellipses"}})),e.markers.map((function(e,n){return o.a.createElement(M,{key:n,position:e.position})})))})),P=function(e){Object(d.a)(r,e);var n=Object(u.a)(r);function r(){return Object(c.a)(this,r),n.apply(this,arguments)}return Object(p.a)(r,[{key:"render",value:function(){return o.a.createElement(E,{containerElement:o.a.createElement("div",{className:"cr-embed-responsive cr-embed-responsive-21by9"}),mapElement:o.a.createElement("div",{className:"cr-embed-responsive-item"})})}}]),r}(t.Component);n.default=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.a,{title:"Google Map with SearchBox",description:"A wrapper around google.maps.places.SearchBox on the map",refUrl:"https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox/"}),o.a.createElement(l.a,null,o.a.createElement(a.a,{item:!0,xs:12},o.a.createElement(s.a,{title:"Map With Search Box",component:P,source:"import React, {Component} from 'react';\r\n\r\nconst google = window.google;\r\n\r\nconst _ = require('lodash');\r\nconst {compose, withProps, lifecycle} = require('recompose');\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} = require('react-google-maps');\r\nconst {\r\n  SearchBox,\r\n} = require('react-google-maps/lib/components/places/SearchBox');\r\n\r\nconst MapWithASearchBoxs = compose(\r\n  withProps({\r\n    googleMapURL:\r\n      'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k',\r\n    loadingElement: <div className='cr-embed-responsive-item' />,\r\n    containerElement: (\r\n      <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n    ),\r\n    mapElement: <div className='cr-embed-responsive-item' />,\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {};\r\n\r\n      this.setState({\r\n        bounds: null,\r\n        center: {\r\n          lat: 41.9,\r\n          lng: -87.624,\r\n        },\r\n        markers: [],\r\n        onMapMounted: (ref) => {\r\n          refs.map = ref;\r\n        },\r\n        onBoundsChanged: () => {\r\n          this.setState({\r\n            bounds: refs.map.getBounds(),\r\n            center: refs.map.getCenter(),\r\n          });\r\n        },\r\n        onSearchBoxMounted: (ref) => {\r\n          refs.searchBox = ref;\r\n        },\r\n        onPlacesChanged: () => {\r\n          const places = refs.searchBox.getPlaces();\r\n          const bounds = new google.maps.LatLngBounds();\r\n\r\n          places.forEach((place) => {\r\n            if (place.geometry && place.geometry.viewport) {\r\n              bounds.union(place.geometry.viewport);\r\n            } else {\r\n              bounds.extend(place.geometry.location);\r\n            }\r\n          });\r\n          const nextMarkers = places.map((place) => ({\r\n            position: place.geometry.location,\r\n          }));\r\n          const nextCenter = _.get(\r\n            nextMarkers,\r\n            '0.position',\r\n            this.state.center,\r\n          );\r\n\r\n          this.setState({\r\n            center: nextCenter,\r\n            markers: nextMarkers,\r\n          });\r\n          // refs.map.fitBounds(bounds);\r\n        },\r\n      });\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap,\r\n)((props) => (\r\n  <GoogleMap\r\n    ref={props.onMapMounted}\r\n    defaultZoom={15}\r\n    center={props.center}\r\n    defaultOptions={{mapTypeControl: false}}\r\n    onBoundsChanged={props.onBoundsChanged}>\r\n    <SearchBox\r\n      ref={props.onSearchBoxMounted}\r\n      bounds={props.bounds}\r\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n      onPlacesChanged={props.onPlacesChanged}>\r\n      <input\r\n        type='text'\r\n        placeholder='Enter search location'\r\n        style={{\r\n          boxSizing: `border-box`,\r\n          border: `1px solid transparent`,\r\n          width: `240px`,\r\n          height: `32px`,\r\n          marginTop: `27px`,\r\n          padding: `0 12px`,\r\n          borderRadius: `3px`,\r\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n          fontSize: `14px`,\r\n          outline: `none`,\r\n          marginLeft: '20px',\r\n          textOverflow: `ellipses`,\r\n        }}\r\n      />\r\n    </SearchBox>\r\n    {props.markers.map((marker, index) => (\r\n      <Marker key={index} position={marker.position} />\r\n    ))}\r\n  </GoogleMap>\r\n));\r\n\r\nexport default class MapWithASearchBox extends Component {\r\n  render() {\r\n    return (\r\n      <MapWithASearchBoxs\r\n        containerElement={\r\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n        }\r\n        mapElement={<div className='cr-embed-responsive-item' />}\r\n      />\r\n    );\r\n  }\r\n}\r\n// const _ = require(\"lodash\");\r\n// const { compose, withProps, lifecycle } = require(\"recompose\");\r\n// const {\r\n//   withScriptjs,\r\n//   withGoogleMap,\r\n//   GoogleMap,\r\n//   Marker,\r\n// } = require(\"react-google-maps\");\r\n// const { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\r\n//\r\n// const MapWithASearchBox = compose(\r\n//   withProps({\r\n//     googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\r\n//     loadingElement: <div style={{ height: `100%` }} />,\r\n//     containerElement: <div style={{ height: `400px` }} />,\r\n//     mapElement: <div style={{ height: `100%` }} />,\r\n//   }),\r\n//   lifecycle({\r\n//     componentWillMount() {\r\n//       const refs = {}\r\n//\r\n//       this.setState({\r\n//         bounds: null,\r\n//         center: {\r\n//           lat: 41.9, lng: -87.624\r\n//         },\r\n//         markers: [],\r\n//         onMapMounted: ref => {\r\n//           refs.map = ref;\r\n//         },\r\n//         onBoundsChanged: () => {\r\n//           this.setState({\r\n//             bounds: refs.map.getBounds(),\r\n//             center: refs.map.getCenter(),\r\n//           })\r\n//         },\r\n//         onSearchBoxMounted: ref => {\r\n//           refs.searchBox = ref;\r\n//         },\r\n//         onPlacesChanged: () => {\r\n//           const places = refs.searchBox.getPlaces();\r\n//           const bounds = new google.maps.LatLngBounds();\r\n//\r\n//           places.forEach(place => {\r\n//             if (place.geometry.viewport) {\r\n//               bounds.union(place.geometry.viewport)\r\n//             } else {\r\n//               bounds.extend(place.geometry.location)\r\n//             }\r\n//           });\r\n//           const nextMarkers = places.map(place => ({\r\n//             position: place.geometry.location,\r\n//           }));\r\n//           const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\r\n//\r\n//           this.setState({\r\n//             center: nextCenter,\r\n//             markers: nextMarkers,\r\n//           });\r\n//           // refs.map.fitBounds(bounds);\r\n//         },\r\n//       })\r\n//     },\r\n//   }),\r\n//   withScriptjs,\r\n//   withGoogleMap\r\n// )(props =>\r\n//   <GoogleMap\r\n//     ref={props.onMapMounted}\r\n//     defaultZoom={15}\r\n//     center={props.center}\r\n//     onBoundsChanged={props.onBoundsChanged}\r\n//   >\r\n//     <SearchBox\r\n//       ref={props.onSearchBoxMounted}\r\n//       bounds={props.bounds}\r\n//       controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n//       onPlacesChanged={props.onPlacesChanged}\r\n//     >\r\n//       <input\r\n//         type=\"text\"\r\n//         Skeleton=\"Customized your Skeleton\"\r\n//         style={{\r\n//           boxSizing: `border-box`,\r\n//           border: `1px solid transparent`,\r\n//           width: `240px`,\r\n//           height: `32px`,\r\n//           marginTop: `27px`,\r\n//           padding: `0 12px`,\r\n//           borderRadius: `3px`,\r\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n//           fontSize: `14px`,\r\n//           outline: `none`,\r\n//           textOverflow: `ellipses`,\r\n//         }}\r\n//       />\r\n//     </SearchBox>\r\n//     {props.markers.map((marker, index) =>\r\n//       <Marker key={index} position={marker.position} />\r\n//     )}\r\n//   </GoogleMap>\r\n// );\r\n"}))))}}}]);
//# sourceMappingURL=103.07082f08.chunk.js.map