{"version":3,"sources":["modules/muiComponents/feedback/Dialogs/SimpleDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/SimpleDialogs.js?6cd9","modules/muiComponents/feedback/Dialogs/AlertsDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/AlertsDialogs.js?b707","modules/muiComponents/feedback/Dialogs/TransitionsDialog.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/TransitionsDialog.js?9bf5","modules/muiComponents/feedback/Dialogs/FormDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/FormDialogs.js?8ced","modules/muiComponents/feedback/Dialogs/CustomizedDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/CustomizedDialogs.js?4ca7","modules/muiComponents/feedback/Dialogs/FullScreenDialogs.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/FullScreenDialogs.js?b501","modules/muiComponents/feedback/Dialogs/OptionalSizes.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/OptionalSizes.js?26d1","modules/muiComponents/feedback/Dialogs/ResponsiveFullScreen.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/ResponsiveFullScreen.js?e2dc","modules/muiComponents/feedback/Dialogs/DraggableDialog.js","modules/muiComponents/feedback/Dialogs/index.js","webpack:///./src/modules/muiComponents/feedback/Dialogs/DraggableDialog.js?3397"],"names":["emails","useStyles","makeStyles","avatar","backgroundColor","blue","color","SimpleDialog","props","classes","onClose","selectedValue","open","handleListItemClick","value","Dialog","aria-labelledby","DialogTitle","id","List","map","email","ListItem","button","onClick","key","ListItemAvatar","Avatar","className","ListItemText","primary","SimpleDialogDemo","React","useState","setOpen","setSelectedValue","Typography","variant","Button","AlertDialog","handleClose","aria-describedby","DialogContent","DialogContentText","DialogActions","autoFocus","Transition","forwardRef","ref","Slide","direction","AlertDialogSlide","TransitionComponent","keepMounted","FormDialog","TextField","margin","label","type","fullWidth","withStyles","theme","root","padding","spacing","closeButton","position","right","top","palette","grey","children","disableTypography","IconButton","aria-label","MuiDialogContent","MuiDialogActions","CustomizedDialogs","dividers","gutterBottom","appBar","title","marginLeft","flex","FullScreenDialog","fullScreen","AppBar","Toolbar","edge","secondary","Divider","form","display","flexDirection","width","formControl","marginTop","minWidth","formControlLabel","MaxWidthDialog","setFullWidth","maxWidth","setMaxWidth","Fragment","noValidate","FormControl","InputLabel","htmlFor","Select","onChange","event","target","inputProps","name","MenuItem","FormControlLabel","control","Switch","checked","ResponsiveDialog","useTheme","useMediaQuery","breakpoints","down","PaperComponent","cancel","Paper","DraggableDialog","style","cursor","Dialogs","ComponentHeader","description","refUrl","GridContainer","Grid","item","xs","lg","ComponentCard","component","SimpleDialogs","source","AlertsDialogs","TransitionsDialog","FormDialogs","CustomizedDialogsSource","FullScreenDialogs","OptionalSizes","ResponsiveFullScreen","ResponsiveFullScreenSource"],"mappings":"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","file":"static/js/123.66b6800f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {blue} from '@material-ui/core/colors';\r\n\r\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const {onClose, selectedValue, open} = props;\r\n\r\n  function handleClose() {\r\n    onClose(selectedValue);\r\n  }\r\n\r\n  function handleListItemClick(value) {\r\n    onClose(value);\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby='simple-dialog-title'\r\n      open={open}>\r\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\r\n      <List>\r\n        {emails.map((email) => (\r\n          <ListItem\r\n            button\r\n            onClick={() => handleListItemClick(email)}\r\n            key={email}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.avatar}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={email} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary='add account' />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function SimpleDialogDemo() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\r\n      <br />\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open simple dialog\r\n      </Button>\r\n      <SimpleDialog\r\n        selectedValue={selectedValue}\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Avatar from '@material-ui/core/Avatar';\\r\\nimport List from '@material-ui/core/List';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport PersonIcon from '@material-ui/icons/Person';\\r\\nimport AddIcon from '@material-ui/icons/Add';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\nimport {blue} from '@material-ui/core/colors';\\r\\n\\r\\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\\r\\nconst useStyles = makeStyles({\\r\\n  avatar: {\\r\\n    backgroundColor: blue[100],\\r\\n    color: blue[600],\\r\\n  },\\r\\n});\\r\\n\\r\\nfunction SimpleDialog(props) {\\r\\n  const classes = useStyles();\\r\\n  const {onClose, selectedValue, open} = props;\\r\\n\\r\\n  function handleClose() {\\r\\n    onClose(selectedValue);\\r\\n  }\\r\\n\\r\\n  function handleListItemClick(value) {\\r\\n    onClose(value);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <Dialog\\r\\n      onClose={handleClose}\\r\\n      aria-labelledby='simple-dialog-title'\\r\\n      open={open}>\\r\\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\\r\\n      <List>\\r\\n        {emails.map((email) => (\\r\\n          <ListItem\\r\\n            button\\r\\n            onClick={() => handleListItemClick(email)}\\r\\n            key={email}>\\r\\n            <ListItemAvatar>\\r\\n              <Avatar className={classes.avatar}>\\r\\n                <PersonIcon />\\r\\n              </Avatar>\\r\\n            </ListItemAvatar>\\r\\n            <ListItemText primary={email} />\\r\\n          </ListItem>\\r\\n        ))}\\r\\n\\r\\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\\r\\n          <ListItemAvatar>\\r\\n            <Avatar>\\r\\n              <AddIcon />\\r\\n            </Avatar>\\r\\n          </ListItemAvatar>\\r\\n          <ListItemText primary='add account' />\\r\\n        </ListItem>\\r\\n      </List>\\r\\n    </Dialog>\\r\\n  );\\r\\n}\\r\\n\\r\\nSimpleDialog.propTypes = {\\r\\n  onClose: PropTypes.func.isRequired,\\r\\n  open: PropTypes.bool.isRequired,\\r\\n  selectedValue: PropTypes.string.isRequired,\\r\\n};\\r\\n\\r\\nexport default function SimpleDialogDemo() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  const handleClose = (value) => {\\r\\n    setOpen(false);\\r\\n    setSelectedValue(value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\\r\\n      <br />\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open simple dialog\\r\\n      </Button>\\r\\n      <SimpleDialog\\r\\n        selectedValue={selectedValue}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function AlertDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-title'\r\n        aria-describedby='alert-dialog-description'>\r\n        <DialogTitle id='alert-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary' autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\n\\r\\nexport default function AlertDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open alert dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='alert-dialog-title'\\r\\n        aria-describedby='alert-dialog-description'>\\r\\n        <DialogTitle id='alert-dialog-title'>\\r\\n          {\\\"Use Google's location service?\\\"}\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText id='alert-dialog-description'>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Disagree\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} color='primary' autoFocus>\\r\\n            Agree\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AlertDialogSlide() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Slide in alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-slide-title'\r\n        aria-describedby='alert-dialog-slide-description'>\r\n        <DialogTitle id='alert-dialog-slide-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-slide-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport Slide from '@material-ui/core/Slide';\\r\\n\\r\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\r\\n  return <Slide direction='up' ref={ref} {...props} />;\\r\\n});\\r\\n\\r\\nexport default function AlertDialogSlide() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Slide in alert dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        TransitionComponent={Transition}\\r\\n        keepMounted\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='alert-dialog-slide-title'\\r\\n        aria-describedby='alert-dialog-slide-description'>\\r\\n        <DialogTitle id='alert-dialog-slide-title'>\\r\\n          {\\\"Use Google's location service?\\\"}\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText id='alert-dialog-slide-description'>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Disagree\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Agree\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function FormDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open form dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'>\r\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='Email Address'\r\n            type='email'\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\n\\r\\nexport default function FormDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open form dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='form-dialog-title'>\\r\\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            To subscribe to this website, please enter your email address here.\\r\\n            We will send updates occasionally.\\r\\n          </DialogContentText>\\r\\n          <TextField\\r\\n            autoFocus\\r\\n            margin='dense'\\r\\n            id='name'\\r\\n            label='Email Address'\\r\\n            type='email'\\r\\n            fullWidth\\r\\n          />\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Cancel\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Subscribe\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const {children, classes, onClose} = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root}>\r\n      <Typography variant='h6'>{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label='close'\r\n          className={classes.closeButton}\r\n          onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\r\n        Open dialog\r\n      </Button>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby='customized-dialog-title'\r\n        open={open}>\r\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\r\n          Modal title\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>\r\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\r\n            ac consectetur ac, vestibulum at eros.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\r\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\r\n            auctor.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\r\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\r\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {withStyles} from '@material-ui/core/styles';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport MuiDialogContent from '@material-ui/core/DialogContent';\\r\\nimport MuiDialogActions from '@material-ui/core/DialogActions';\\r\\nimport IconButton from '@material-ui/core/IconButton';\\r\\nimport CloseIcon from '@material-ui/icons/Close';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\n\\r\\nconst styles = (theme) => ({\\r\\n  root: {\\r\\n    margin: 0,\\r\\n    padding: theme.spacing(2),\\r\\n  },\\r\\n  closeButton: {\\r\\n    position: 'absolute',\\r\\n    right: theme.spacing(1),\\r\\n    top: theme.spacing(1),\\r\\n    color: theme.palette.grey[500],\\r\\n  },\\r\\n});\\r\\n\\r\\nconst DialogTitle = withStyles(styles)((props) => {\\r\\n  const {children, classes, onClose} = props;\\r\\n  return (\\r\\n    <MuiDialogTitle disableTypography className={classes.root}>\\r\\n      <Typography variant='h6'>{children}</Typography>\\r\\n      {onClose ? (\\r\\n        <IconButton\\r\\n          aria-label='close'\\r\\n          className={classes.closeButton}\\r\\n          onClick={onClose}>\\r\\n          <CloseIcon />\\r\\n        </IconButton>\\r\\n      ) : null}\\r\\n    </MuiDialogTitle>\\r\\n  );\\r\\n});\\r\\n\\r\\nconst DialogContent = withStyles((theme) => ({\\r\\n  root: {\\r\\n    padding: theme.spacing(2),\\r\\n  },\\r\\n}))(MuiDialogContent);\\r\\n\\r\\nconst DialogActions = withStyles((theme) => ({\\r\\n  root: {\\r\\n    margin: 0,\\r\\n    padding: theme.spacing(1),\\r\\n  },\\r\\n}))(MuiDialogActions);\\r\\n\\r\\nexport default function CustomizedDialogs() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\\r\\n        Open dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='customized-dialog-title'\\r\\n        open={open}>\\r\\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\\r\\n          Modal title\\r\\n        </DialogTitle>\\r\\n        <DialogContent dividers>\\r\\n          <Typography gutterBottom>\\r\\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\\r\\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\\r\\n            ac consectetur ac, vestibulum at eros.\\r\\n          </Typography>\\r\\n          <Typography gutterBottom>\\r\\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\\r\\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\\r\\n            auctor.\\r\\n          </Typography>\\r\\n          <Typography gutterBottom>\\r\\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\\r\\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\\r\\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\\r\\n          </Typography>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Save changes\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open full-screen dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge='start'\r\n              color='inherit'\r\n              onClick={handleClose}\r\n              aria-label='close'>\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant='h6' className={classes.title}>\r\n              Sound\r\n            </Typography>\r\n            <Button color='inherit' onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem button>\r\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem button>\r\n            <ListItemText\r\n              primary='Default notification ringtone'\r\n              secondary='Tethys'\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport List from '@material-ui/core/List';\\r\\nimport Divider from '@material-ui/core/Divider';\\r\\nimport AppBar from '@material-ui/core/AppBar';\\r\\nimport Toolbar from '@material-ui/core/Toolbar';\\r\\nimport IconButton from '@material-ui/core/IconButton';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\nimport CloseIcon from '@material-ui/icons/Close';\\r\\nimport Slide from '@material-ui/core/Slide';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  appBar: {\\r\\n    position: 'relative',\\r\\n  },\\r\\n  title: {\\r\\n    marginLeft: theme.spacing(2),\\r\\n    flex: 1,\\r\\n  },\\r\\n}));\\r\\n\\r\\nconst Transition = React.forwardRef(function Transition(props, ref) {\\r\\n  return <Slide direction='up' ref={ref} {...props} />;\\r\\n});\\r\\n\\r\\nexport default function FullScreenDialog() {\\r\\n  const classes = useStyles();\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open full-screen dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullScreen\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        TransitionComponent={Transition}>\\r\\n        <AppBar className={classes.appBar}>\\r\\n          <Toolbar>\\r\\n            <IconButton\\r\\n              edge='start'\\r\\n              color='inherit'\\r\\n              onClick={handleClose}\\r\\n              aria-label='close'>\\r\\n              <CloseIcon />\\r\\n            </IconButton>\\r\\n            <Typography variant='h6' className={classes.title}>\\r\\n              Sound\\r\\n            </Typography>\\r\\n            <Button color='inherit' onClick={handleClose}>\\r\\n              save\\r\\n            </Button>\\r\\n          </Toolbar>\\r\\n        </AppBar>\\r\\n        <List>\\r\\n          <ListItem button>\\r\\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\\r\\n          </ListItem>\\r\\n          <Divider />\\r\\n          <ListItem button>\\r\\n            <ListItemText\\r\\n              primary='Default notification ringtone'\\r\\n              secondary='Tethys'\\r\\n            />\\r\\n          </ListItem>\\r\\n        </List>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function MaxWidthDialog() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [fullWidth, setFullWidth] = React.useState(true);\r\n  const [maxWidth, setMaxWidth] = React.useState('sm');\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleMaxWidthChange(event) {\r\n    setMaxWidth(event.target.value);\r\n  }\r\n\r\n  function handleFullWidthChange(event) {\r\n    setFullWidth(event.target.checked);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open max-width dialog\r\n      </Button>\r\n      <Dialog\r\n        fullWidth={fullWidth}\r\n        maxWidth={maxWidth}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='max-width-dialog-title'>\r\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You can set my maximum width and whether to adapt or not.\r\n          </DialogContentText>\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\r\n              <Select\r\n                value={maxWidth}\r\n                onChange={handleMaxWidthChange}\r\n                inputProps={{\r\n                  name: 'max-width',\r\n                  id: 'max-width',\r\n                }}>\r\n                <MenuItem value={false}>false</MenuItem>\r\n                <MenuItem value='xs'>xs</MenuItem>\r\n                <MenuItem value='sm'>sm</MenuItem>\r\n                <MenuItem value='md'>md</MenuItem>\r\n                <MenuItem value='lg'>lg</MenuItem>\r\n                <MenuItem value='xl'>xl</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControlLabel\r\n              className={classes.formControlLabel}\r\n              control={\r\n                <Switch\r\n                  checked={fullWidth}\r\n                  onChange={handleFullWidthChange}\r\n                  value='fullWidth'\r\n                />\r\n              }\r\n              label='Full width'\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport FormControl from '@material-ui/core/FormControl';\\r\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\r\\nimport InputLabel from '@material-ui/core/InputLabel';\\r\\nimport MenuItem from '@material-ui/core/MenuItem';\\r\\nimport Select from '@material-ui/core/Select';\\r\\nimport Switch from '@material-ui/core/Switch';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  form: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n    margin: 'auto',\\r\\n    width: 'fit-content',\\r\\n  },\\r\\n  formControl: {\\r\\n    marginTop: theme.spacing(2),\\r\\n    minWidth: 120,\\r\\n  },\\r\\n  formControlLabel: {\\r\\n    marginTop: theme.spacing(1),\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function MaxWidthDialog() {\\r\\n  const classes = useStyles();\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const [fullWidth, setFullWidth] = React.useState(true);\\r\\n  const [maxWidth, setMaxWidth] = React.useState('sm');\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  function handleMaxWidthChange(event) {\\r\\n    setMaxWidth(event.target.value);\\r\\n  }\\r\\n\\r\\n  function handleFullWidthChange(event) {\\r\\n    setFullWidth(event.target.checked);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <React.Fragment>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open max-width dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullWidth={fullWidth}\\r\\n        maxWidth={maxWidth}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='max-width-dialog-title'>\\r\\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            You can set my maximum width and whether to adapt or not.\\r\\n          </DialogContentText>\\r\\n          <form className={classes.form} noValidate>\\r\\n            <FormControl className={classes.formControl}>\\r\\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\\r\\n              <Select\\r\\n                value={maxWidth}\\r\\n                onChange={handleMaxWidthChange}\\r\\n                inputProps={{\\r\\n                  name: 'max-width',\\r\\n                  id: 'max-width',\\r\\n                }}>\\r\\n                <MenuItem value={false}>false</MenuItem>\\r\\n                <MenuItem value='xs'>xs</MenuItem>\\r\\n                <MenuItem value='sm'>sm</MenuItem>\\r\\n                <MenuItem value='md'>md</MenuItem>\\r\\n                <MenuItem value='lg'>lg</MenuItem>\\r\\n                <MenuItem value='xl'>xl</MenuItem>\\r\\n              </Select>\\r\\n            </FormControl>\\r\\n            <FormControlLabel\\r\\n              className={classes.formControlLabel}\\r\\n              control={\\r\\n                <Switch\\r\\n                  checked={fullWidth}\\r\\n                  onChange={handleFullWidthChange}\\r\\n                  value='fullWidth'\\r\\n                />\\r\\n              }\\r\\n              label='Full width'\\r\\n            />\\r\\n          </form>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Close\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </React.Fragment>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {useTheme} from '@material-ui/core/styles';\r\n\r\nexport default function ResponsiveDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='responsive-dialog-title'>\r\n        <DialogTitle id='responsive-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary' autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\r\\nimport {useTheme} from '@material-ui/core/styles';\\r\\n\\r\\nexport default function ResponsiveDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n  const theme = useTheme();\\r\\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\\r\\n\\r\\n  function handleClickOpen() {\\r\\n    setOpen(true);\\r\\n  }\\r\\n\\r\\n  function handleClose() {\\r\\n    setOpen(false);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open responsive dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        fullScreen={fullScreen}\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        aria-labelledby='responsive-dialog-title'>\\r\\n        <DialogTitle id='responsive-dialog-title'>\\r\\n          {\\\"Use Google's location service?\\\"}\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            Let Google help apps determine location. This means sending\\r\\n            anonymous location data to Google, even when no apps are running.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Disagree\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} color='primary' autoFocus>\\r\\n            Agree\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Draggable from 'react-draggable';\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function DraggableDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open form dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby='draggable-dialog-title'>\r\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\r\n          Subscribe\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\nimport SimpleDialogs from './SimpleDialogs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleDialogsSource from '!raw-loader!./SimpleDialogs';\r\nimport AlertsDialogs from './AlertsDialogs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport AlertsDialogsSource from '!raw-loader!./AlertsDialogs';\r\nimport TransitionsDialog from './TransitionsDialog';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport TransitionsDialogSource from '!raw-loader!./TransitionsDialog';\r\nimport FormDialogs from './FormDialogs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport FormDialogsSource from '!raw-loader!./FormDialogs';\r\nimport CustomizedDialogs from './CustomizedDialogs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport CustomizedDialogsSource from '!raw-loader!./CustomizedDialogs';\r\nimport FullScreenDialogs from './FullScreenDialogs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport FullScreenDialogsSource from '!raw-loader!./FullScreenDialogs';\r\nimport OptionalSizes from './OptionalSizes';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport OptionalSizesSource from '!raw-loader!./OptionalSizes';\r\nimport ResponsiveFullScreen from './ResponsiveFullScreen';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport ResponsiveFullScreenSource from '!raw-loader!./ResponsiveFullScreen';\r\n\r\nimport DraggableDialog from './DraggableDialog';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport DraggableDialogSource from '!raw-loader!./DraggableDialog';\r\n\r\nconst Dialogs = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Dialogs'\r\n        description='Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.'\r\n        refUrl='https://material-ui.com/components/dialogs/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Simple Dialogs'\r\n            component={SimpleDialogs}\r\n            source={SimpleDialogsSource}\r\n            description='Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account)'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Alerts Dialogs'\r\n            component={AlertsDialogs}\r\n            source={AlertsDialogsSource}\r\n            description='Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Transitions'\r\n            component={TransitionsDialog}\r\n            source={TransitionsDialogSource}\r\n            description='You can also swap out the transition, the next example uses Slide.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Form dialogs'\r\n            component={FormDialogs}\r\n            source={FormDialogsSource}\r\n            description=\"Form dialogs allow users to fill out form fields within a dialog. For example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'. \"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Customized dialogs'\r\n            component={CustomizedDialogs}\r\n            source={CustomizedDialogsSource}\r\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Customized dialogs'\r\n            component={CustomizedDialogs}\r\n            source={CustomizedDialogsSource}\r\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Full Screen Dialogs'\r\n            component={FullScreenDialogs}\r\n            source={FullScreenDialogsSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Optional sizes'\r\n            component={OptionalSizes}\r\n            source={OptionalSizesSource}\r\n            description='You can set a dialog maximum width by using the maxWidth enumerable in combination with the fullWidth boolean. When the fullWidth property is true, the dialog will adapt based on the maxWidth value.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Responsive full-screen'\r\n            component={ResponsiveFullScreen}\r\n            source={ResponsiveFullScreenSource}\r\n            description='You may make a dialog responsively full screen using useMediaQuery.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Confirmation dialogs'\r\n            component={ResponsiveFullScreen}\r\n            source={ResponsiveFullScreenSource}\r\n            description='Confirmation dialogs require users to explicitly confirm their choice before an option is committed.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Scrolling long content'\r\n            component={ResponsiveFullScreen}\r\n            source={ResponsiveFullScreenSource}\r\n            description='When dialogs become too long for the user’s viewport or device, they scroll..'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Draggable dialog'\r\n            component={DraggableDialog}\r\n            source={DraggableDialogSource}\r\n            description='You can create a draggable dialog by using react-draggable. To do so, you can pass the the imported Draggable component as the PaperComponent of the Dialog component. This will make the entire dialog draggable..'\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","export default \"import React from 'react';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Dialog from '@material-ui/core/Dialog';\\r\\nimport DialogActions from '@material-ui/core/DialogActions';\\r\\nimport DialogContent from '@material-ui/core/DialogContent';\\r\\nimport DialogContentText from '@material-ui/core/DialogContentText';\\r\\nimport DialogTitle from '@material-ui/core/DialogTitle';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport Draggable from 'react-draggable';\\r\\n\\r\\nfunction PaperComponent(props) {\\r\\n  return (\\r\\n    <Draggable cancel={'[class*=\\\"MuiDialogContent-root\\\"]'}>\\r\\n      <Paper {...props} />\\r\\n    </Draggable>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default function DraggableDialog() {\\r\\n  const [open, setOpen] = React.useState(false);\\r\\n\\r\\n  const handleClickOpen = () => {\\r\\n    setOpen(true);\\r\\n  };\\r\\n\\r\\n  const handleClose = () => {\\r\\n    setOpen(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\\r\\n        Open form dialog\\r\\n      </Button>\\r\\n      <Dialog\\r\\n        open={open}\\r\\n        onClose={handleClose}\\r\\n        PaperComponent={PaperComponent}\\r\\n        aria-labelledby='draggable-dialog-title'>\\r\\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\\r\\n          Subscribe\\r\\n        </DialogTitle>\\r\\n        <DialogContent>\\r\\n          <DialogContentText>\\r\\n            To subscribe to this website, please enter your email address here.\\r\\n            We will send updates occasionally.\\r\\n          </DialogContentText>\\r\\n        </DialogContent>\\r\\n        <DialogActions>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Cancel\\r\\n          </Button>\\r\\n          <Button onClick={handleClose} color='primary'>\\r\\n            Subscribe\\r\\n          </Button>\\r\\n        </DialogActions>\\r\\n      </Dialog>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}