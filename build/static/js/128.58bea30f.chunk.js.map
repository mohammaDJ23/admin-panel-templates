{"version":3,"sources":["modules/muiComponents/inputs/TransferList/SimpleTransferList.js","webpack:///./src/modules/muiComponents/inputs/TransferList/SimpleTransferList.js?dda3","modules/muiComponents/inputs/TransferList/EnhancedTransferList.js","modules/muiComponents/inputs/TransferList/index.js","webpack:///./src/modules/muiComponents/inputs/TransferList/EnhancedTransferList.js?746a"],"names":["useStyles","makeStyles","theme","root","margin","paper","width","height","overflow","button","spacing","not","a","b","filter","value","indexOf","intersection","TransferList","classes","React","useState","checked","setChecked","left","setLeft","right","setRight","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","push","splice","customList","items","Paper","className","List","dense","component","role","map","labelId","ListItem","key","onClick","ListItemIcon","Checkbox","tabIndex","disableRipple","inputProps","ListItemText","id","primary","Grid","container","justify","alignItems","item","direction","Button","variant","size","concat","disabled","length","aria-label","cardHeader","padding","list","backgroundColor","palette","background","numberOfChecked","handleToggleAll","title","Card","CardHeader","avatar","indeterminate","subheader","Divider","TransferLists","ComponentHeader","description","refUrl","GridContainer","xs","lg","ComponentCard","SimpleTransferList","source","EnhancedTransferList"],"mappings":"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","file":"static/js/128.58bea30f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    width: 200,\r\n    height: 230,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nexport default function TransferList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleAllRight = () => {\r\n    setRight(right.concat(left));\r\n    setLeft([]);\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const handleAllLeft = () => {\r\n    setLeft(left.concat(right));\r\n    setRight([]);\r\n  };\r\n\r\n  const customList = (items) => (\r\n    <Paper className={classes.paper}>\r\n      <List dense component='div' role='list'>\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{'aria-labelledby': labelId}}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify='center'\r\n      alignItems='center'\r\n      className={classes.root}>\r\n      <Grid item>{customList(left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleAllRight}\r\n            disabled={left.length === 0}\r\n            aria-label='move all right'>\r\n            ≫\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'>\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'>\r\n            &lt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleAllLeft}\r\n            disabled={right.length === 0}\r\n            aria-label='move all left'>\r\n            ≪\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList(right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Grid from '@material-ui/core/Grid';\\r\\nimport List from '@material-ui/core/List';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport Checkbox from '@material-ui/core/Checkbox';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    margin: 'auto',\\r\\n  },\\r\\n  paper: {\\r\\n    width: 200,\\r\\n    height: 230,\\r\\n    overflow: 'auto',\\r\\n  },\\r\\n  button: {\\r\\n    margin: theme.spacing(0.5, 0),\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction not(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) === -1);\\r\\n}\\r\\n\\r\\nfunction intersection(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) !== -1);\\r\\n}\\r\\n\\r\\nexport default function TransferList() {\\r\\n  const classes = useStyles();\\r\\n  const [checked, setChecked] = React.useState([]);\\r\\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\\r\\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\\r\\n\\r\\n  const leftChecked = intersection(checked, left);\\r\\n  const rightChecked = intersection(checked, right);\\r\\n\\r\\n  const handleToggle = (value) => () => {\\r\\n    const currentIndex = checked.indexOf(value);\\r\\n    const newChecked = [...checked];\\r\\n\\r\\n    if (currentIndex === -1) {\\r\\n      newChecked.push(value);\\r\\n    } else {\\r\\n      newChecked.splice(currentIndex, 1);\\r\\n    }\\r\\n\\r\\n    setChecked(newChecked);\\r\\n  };\\r\\n\\r\\n  const handleAllRight = () => {\\r\\n    setRight(right.concat(left));\\r\\n    setLeft([]);\\r\\n  };\\r\\n\\r\\n  const handleCheckedRight = () => {\\r\\n    setRight(right.concat(leftChecked));\\r\\n    setLeft(not(left, leftChecked));\\r\\n    setChecked(not(checked, leftChecked));\\r\\n  };\\r\\n\\r\\n  const handleCheckedLeft = () => {\\r\\n    setLeft(left.concat(rightChecked));\\r\\n    setRight(not(right, rightChecked));\\r\\n    setChecked(not(checked, rightChecked));\\r\\n  };\\r\\n\\r\\n  const handleAllLeft = () => {\\r\\n    setLeft(left.concat(right));\\r\\n    setRight([]);\\r\\n  };\\r\\n\\r\\n  const customList = (items) => (\\r\\n    <Paper className={classes.paper}>\\r\\n      <List dense component='div' role='list'>\\r\\n        {items.map((value) => {\\r\\n          const labelId = `transfer-list-item-${value}-label`;\\r\\n\\r\\n          return (\\r\\n            <ListItem\\r\\n              key={value}\\r\\n              role='listitem'\\r\\n              button\\r\\n              onClick={handleToggle(value)}>\\r\\n              <ListItemIcon>\\r\\n                <Checkbox\\r\\n                  checked={checked.indexOf(value) !== -1}\\r\\n                  tabIndex={-1}\\r\\n                  disableRipple\\r\\n                  inputProps={{'aria-labelledby': labelId}}\\r\\n                />\\r\\n              </ListItemIcon>\\r\\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        })}\\r\\n        <ListItem />\\r\\n      </List>\\r\\n    </Paper>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Grid\\r\\n      container\\r\\n      spacing={2}\\r\\n      justify='center'\\r\\n      alignItems='center'\\r\\n      className={classes.root}>\\r\\n      <Grid item>{customList(left)}</Grid>\\r\\n      <Grid item>\\r\\n        <Grid container direction='column' alignItems='center'>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleAllRight}\\r\\n            disabled={left.length === 0}\\r\\n            aria-label='move all right'>\\r\\n            ≫\\r\\n          </Button>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleCheckedRight}\\r\\n            disabled={leftChecked.length === 0}\\r\\n            aria-label='move selected right'>\\r\\n            &gt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleCheckedLeft}\\r\\n            disabled={rightChecked.length === 0}\\r\\n            aria-label='move selected left'>\\r\\n            &lt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleAllLeft}\\r\\n            disabled={right.length === 0}\\r\\n            aria-label='move all left'>\\r\\n            ≪\\r\\n          </Button>\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n      <Grid item>{customList(right)}</Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 200,\r\n    height: 230,\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nexport default function TransferList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = (items) => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = (items) => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const customList = (title, items) => (\r\n    <Card>\r\n      <CardHeader\r\n        className={classes.cardHeader}\r\n        avatar={\r\n          <Checkbox\r\n            onClick={handleToggleAll(items)}\r\n            checked={\r\n              numberOfChecked(items) === items.length && items.length !== 0\r\n            }\r\n            indeterminate={\r\n              numberOfChecked(items) !== items.length &&\r\n              numberOfChecked(items) !== 0\r\n            }\r\n            disabled={items.length === 0}\r\n            inputProps={{'aria-label': 'all items selected'}}\r\n          />\r\n        }\r\n        title={title}\r\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n      />\r\n      <Divider />\r\n      <List className={classes.list} dense component='div' role='list'>\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{'aria-labelledby': labelId}}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify='center'\r\n      alignItems='center'\r\n      className={classes.root}>\r\n      <Grid item>{customList('Choices', left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'>\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'>\r\n            &lt;\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList('Chosen', right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\nimport SimpleTransferList from './SimpleTransferList';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleTransferListSource from '!raw-loader!./SimpleTransferList';\r\nimport EnhancedTransferList from './EnhancedTransferList';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport EnhancedTransferListSource from '!raw-loader!./EnhancedTransferList';\r\n\r\nconst TransferLists = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Transfer List'\r\n        description='transfer list (or shuttle) enables the user to move one or more list items between lists.'\r\n        refUrl='https://material-ui.com/components/transfer-list/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Simple Transfer List'\r\n            component={SimpleTransferList}\r\n            source={SimpleTransferListSource}\r\n            description='For completeness, this example includes buttons for move all, but not every transfer list needs these.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Enhanced Transfer List'\r\n            component={EnhancedTransferList}\r\n            source={EnhancedTransferListSource}\r\n            description='This example exchanges the move all buttons for a select all / select none checkbox, and adds a counter.'\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransferLists;\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Grid from '@material-ui/core/Grid';\\r\\nimport List from '@material-ui/core/List';\\r\\nimport Card from '@material-ui/core/Card';\\r\\nimport CardHeader from '@material-ui/core/CardHeader';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\\r\\nimport Checkbox from '@material-ui/core/Checkbox';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Divider from '@material-ui/core/Divider';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    margin: 'auto',\\r\\n  },\\r\\n  cardHeader: {\\r\\n    padding: theme.spacing(1, 2),\\r\\n  },\\r\\n  list: {\\r\\n    width: 200,\\r\\n    height: 230,\\r\\n    backgroundColor: theme.palette.background.paper,\\r\\n    overflow: 'auto',\\r\\n  },\\r\\n  button: {\\r\\n    margin: theme.spacing(0.5, 0),\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction not(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) === -1);\\r\\n}\\r\\n\\r\\nfunction intersection(a, b) {\\r\\n  return a.filter((value) => b.indexOf(value) !== -1);\\r\\n}\\r\\n\\r\\nfunction union(a, b) {\\r\\n  return [...a, ...not(b, a)];\\r\\n}\\r\\n\\r\\nexport default function TransferList() {\\r\\n  const classes = useStyles();\\r\\n  const [checked, setChecked] = React.useState([]);\\r\\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\\r\\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\\r\\n\\r\\n  const leftChecked = intersection(checked, left);\\r\\n  const rightChecked = intersection(checked, right);\\r\\n\\r\\n  const handleToggle = (value) => () => {\\r\\n    const currentIndex = checked.indexOf(value);\\r\\n    const newChecked = [...checked];\\r\\n\\r\\n    if (currentIndex === -1) {\\r\\n      newChecked.push(value);\\r\\n    } else {\\r\\n      newChecked.splice(currentIndex, 1);\\r\\n    }\\r\\n\\r\\n    setChecked(newChecked);\\r\\n  };\\r\\n\\r\\n  const numberOfChecked = (items) => intersection(checked, items).length;\\r\\n\\r\\n  const handleToggleAll = (items) => () => {\\r\\n    if (numberOfChecked(items) === items.length) {\\r\\n      setChecked(not(checked, items));\\r\\n    } else {\\r\\n      setChecked(union(checked, items));\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleCheckedRight = () => {\\r\\n    setRight(right.concat(leftChecked));\\r\\n    setLeft(not(left, leftChecked));\\r\\n    setChecked(not(checked, leftChecked));\\r\\n  };\\r\\n\\r\\n  const handleCheckedLeft = () => {\\r\\n    setLeft(left.concat(rightChecked));\\r\\n    setRight(not(right, rightChecked));\\r\\n    setChecked(not(checked, rightChecked));\\r\\n  };\\r\\n\\r\\n  const customList = (title, items) => (\\r\\n    <Card>\\r\\n      <CardHeader\\r\\n        className={classes.cardHeader}\\r\\n        avatar={\\r\\n          <Checkbox\\r\\n            onClick={handleToggleAll(items)}\\r\\n            checked={\\r\\n              numberOfChecked(items) === items.length && items.length !== 0\\r\\n            }\\r\\n            indeterminate={\\r\\n              numberOfChecked(items) !== items.length &&\\r\\n              numberOfChecked(items) !== 0\\r\\n            }\\r\\n            disabled={items.length === 0}\\r\\n            inputProps={{'aria-label': 'all items selected'}}\\r\\n          />\\r\\n        }\\r\\n        title={title}\\r\\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\\r\\n      />\\r\\n      <Divider />\\r\\n      <List className={classes.list} dense component='div' role='list'>\\r\\n        {items.map((value) => {\\r\\n          const labelId = `transfer-list-all-item-${value}-label`;\\r\\n\\r\\n          return (\\r\\n            <ListItem\\r\\n              key={value}\\r\\n              role='listitem'\\r\\n              button\\r\\n              onClick={handleToggle(value)}>\\r\\n              <ListItemIcon>\\r\\n                <Checkbox\\r\\n                  checked={checked.indexOf(value) !== -1}\\r\\n                  tabIndex={-1}\\r\\n                  disableRipple\\r\\n                  inputProps={{'aria-labelledby': labelId}}\\r\\n                />\\r\\n              </ListItemIcon>\\r\\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        })}\\r\\n        <ListItem />\\r\\n      </List>\\r\\n    </Card>\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <Grid\\r\\n      container\\r\\n      spacing={2}\\r\\n      justify='center'\\r\\n      alignItems='center'\\r\\n      className={classes.root}>\\r\\n      <Grid item>{customList('Choices', left)}</Grid>\\r\\n      <Grid item>\\r\\n        <Grid container direction='column' alignItems='center'>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleCheckedRight}\\r\\n            disabled={leftChecked.length === 0}\\r\\n            aria-label='move selected right'>\\r\\n            &gt;\\r\\n          </Button>\\r\\n          <Button\\r\\n            variant='outlined'\\r\\n            size='small'\\r\\n            className={classes.button}\\r\\n            onClick={handleCheckedLeft}\\r\\n            disabled={rightChecked.length === 0}\\r\\n            aria-label='move selected left'>\\r\\n            &lt;\\r\\n          </Button>\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n      <Grid item>{customList('Chosen', right)}</Grid>\\r\\n    </Grid>\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}