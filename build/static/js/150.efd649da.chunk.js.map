{"version":3,"sources":["modules/thirdParty/reactDropzone/Basic/index.js","modules/thirdParty/reactDropzone/EventPropagation/index.js","modules/thirdParty/reactDropzone/StylingDropzone/index.js","modules/thirdParty/reactDropzone/SpecificFileTypes/index.js","modules/thirdParty/reactDropzone/DialogProgrammatically/index.js","modules/thirdParty/reactDropzone/Previews/index.js","modules/thirdParty/reactDropzone/ClassComponents/index.js","modules/thirdParty/reactDropzone/index.js","webpack:///./src/modules/thirdParty/reactDropzone/Basic/index.js?eaa9","webpack:///./src/modules/thirdParty/reactDropzone/EventPropagation/index.js?c971","webpack:///./src/modules/thirdParty/reactDropzone/SpecificFileTypes/index.js?59a9","webpack:///./src/modules/thirdParty/reactDropzone/DialogProgrammatically/index.js?614c","webpack:///./src/modules/thirdParty/reactDropzone/StylingDropzone/index.js?6267","webpack:///./src/modules/thirdParty/reactDropzone/Previews/index.js?bb73","webpack:///./src/modules/thirdParty/reactDropzone/ClassComponents/index.js?31d5"],"names":["Basic","useDropzone","acceptedFiles","getRootProps","getInputProps","files","map","file","key","path","size","className","InnerDropzone","props","noDragEventsBubbling","EventPropagation","onDrop","console","log","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","StyledDropzone","accept","isDragActive","isDragAccept","isDragReject","style","useMemo","SpecificFileTypes","rejectedFiles","acceptedFilesItems","rejectedFilesItems","DialogProgrammatically","noClick","noKeyboard","open","Box","mb","component","Button","variant","onClick","thumbsContainer","flexWrap","marginTop","thumb","border","marginBottom","marginRight","width","height","boxSizing","thumbInner","minWidth","overflow","img","Previews","useState","setFiles","Object","assign","preview","URL","createObjectURL","thumbs","name","alt","src","useEffect","forEach","revokeObjectURL","ClassComponents","setState","state","this","Component","ReactDropzone","ComponentHeader","title","description","refUrl","GridContainer","Grid","item","xs","lg","ComponentCard","source","StylingDropzone"],"mappings":"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","file":"static/js/150.efd649da.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst Basic = () => {\r\n  const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <section className='container'>\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n      <aside>\r\n        <h6>Files</h6>\r\n        <ul>{files}</ul>\r\n      </aside>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Basic;\r\n","import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst EventPropagation = (props) => {\r\n  const {getRootProps} = useDropzone({\r\n    // Note how this callback is never invoked if drop occurs on the inner dropzone\r\n    onDrop: (files) => console.log(files),\r\n  });\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <InnerDropzone />\r\n        <p>Outer dropzone</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst InnerDropzone = (props) => {\r\n  const {getRootProps} = useDropzone({noDragEventsBubbling: true});\r\n  return (\r\n    <div {...getRootProps({className: 'dropzone'})}>\r\n      <p>Inner dropzone</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventPropagation;\r\n","import React, {useMemo} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  padding: '20px',\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: '#eeeeee',\r\n  borderStyle: 'dashed',\r\n  backgroundColor: '#ffffff',\r\n  color: '#bdbdbd',\r\n  outline: 'none',\r\n  transition: 'border .24s ease-in-out',\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: '#2196f3',\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: '#00e676',\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: '#ff1744',\r\n};\r\n\r\nconst StyledDropzone = (props) => {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: 'image/*'});\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject],\r\n  );\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div {...getRootProps({style})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StyledDropzone;\r\n","import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst SpecificFileTypes = (props) => {\r\n  const {\r\n    acceptedFiles,\r\n    rejectedFiles,\r\n    getRootProps,\r\n    getInputProps,\r\n  } = useDropzone({\r\n    accept: 'image/jpeg, image/png',\r\n  });\r\n\r\n  const acceptedFilesItems =\r\n    acceptedFiles &&\r\n    acceptedFiles.map((file) => (\r\n      <li key={file.path}>\r\n        {file.path} - {file.size} bytes\r\n      </li>\r\n    ));\r\n\r\n  const rejectedFilesItems =\r\n    rejectedFiles &&\r\n    rejectedFiles.map((file) => (\r\n      <li key={file.path}>\r\n        {file.path} - {file.size} bytes\r\n      </li>\r\n    ));\r\n\r\n  return (\r\n    <section className='container'>\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n        <em>(Only *.jpeg and *.png images will be accepted)</em>\r\n      </div>\r\n      <aside>\r\n        <h4>Accepted files</h4>\r\n        <ul>{acceptedFilesItems}</ul>\r\n        <h4>Rejected files</h4>\r\n        <ul>{rejectedFilesItems}</ul>\r\n      </aside>\r\n    </section>\r\n  );\r\n};\r\nexport default SpecificFileTypes;\r\n","import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst DialogProgrammatically = (props) => {\r\n  const {getRootProps, getInputProps, open, acceptedFiles} = useDropzone({\r\n    // Disable click and keydown behavior\r\n    noClick: true,\r\n    noKeyboard: true,\r\n  });\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Box mb={2} {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <Box component='p' mb={2}>\r\n          Drag 'n' drop some files here\r\n        </Box>\r\n        <Button color='primary' variant='contained' onClick={open}>\r\n          Open File Dialog\r\n        </Button>\r\n      </Box>\r\n      <aside>\r\n        <h6>Files</h6>\r\n        <ul>{files}</ul>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\nexport default DialogProgrammatically;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst thumbsContainer = {\r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  flexWrap: 'wrap',\r\n  marginTop: 16,\r\n};\r\n\r\nconst thumb = {\r\n  display: 'inline-flex',\r\n  borderRadius: 2,\r\n  border: '1px solid #eaeaea',\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: 'border-box',\r\n};\r\n\r\nconst thumbInner = {\r\n  display: 'flex',\r\n  minWidth: 0,\r\n  overflow: 'hidden',\r\n};\r\n\r\nconst img = {\r\n  display: 'block',\r\n  width: 'auto',\r\n  height: '100%',\r\n};\r\n\r\nconst Previews = (props) => {\r\n  const [files, setFiles] = useState([]);\r\n  const {getRootProps, getInputProps} = useDropzone({\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles) => {\r\n      setFiles(\r\n        acceptedFiles.map((file) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n          }),\r\n        ),\r\n      );\r\n    },\r\n  });\r\n\r\n  const thumbs = files.map((file) => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img alt='preview' src={file.preview} style={img} />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  useEffect(\r\n    () => () => {\r\n      // Make sure to revoke the db uris to avoid memory leaks\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files],\r\n  );\r\n\r\n  return (\r\n    <section className='container'>\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n      <aside style={thumbsContainer}>{thumbs}</aside>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Previews;\r\n","import React, {Component} from 'react';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nclass ClassComponents extends Component {\r\n  constructor() {\r\n    super();\r\n    this.onDrop = (files) => {\r\n      this.setState({files});\r\n    };\r\n    this.state = {\r\n      files: [],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const files = this.state.files.map((file) => (\r\n      <li key={file.name}>\r\n        {file.name} - {file.size} bytes\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section className='container'>\r\n            <div {...getRootProps({className: 'dropzone'})}>\r\n              <input {...getInputProps()} />\r\n              <p>Drag 'n' drop some files here, or click to select files</p>\r\n            </div>\r\n            <aside>\r\n              <h6>Files</h6>\r\n              <ul>{files}</ul>\r\n            </aside>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClassComponents;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\nimport Basic from './Basic';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport BasicSource from '!raw-loader!./Basic';\r\nimport EventPropagation from './EventPropagation';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport EventPropagationSource from '!raw-loader!./EventPropagation';\r\nimport StylingDropzone from './StylingDropzone';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport StylingDropzoneSource from '!raw-loader!./StylingDropzone';\r\nimport SpecificFileTypes from './SpecificFileTypes';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SpecificFileTypesSource from '!raw-loader!./SpecificFileTypes';\r\nimport DialogProgrammatically from './DialogProgrammatically';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport DialogProgrammaticallySource from '!raw-loader!./DialogProgrammatically';\r\nimport Previews from './Previews';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport PreviewsSource from '!raw-loader!./Previews';\r\nimport ClassComponents from './ClassComponents';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport ClassComponentsSource from '!raw-loader!./ClassComponents';\r\n\r\nconst ReactDropzone = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='React Dropzone'\r\n        description=\"Simple React hook to create a HTML5-compliant drag'n'drop zone for files.\"\r\n        refUrl='https://react-dropzone.netlify.com/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard title='Basic' component={Basic} source={BasicSource} />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Event Propagation'\r\n            component={EventPropagation}\r\n            source={EventPropagationSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Specific`File Types'\r\n            component={SpecificFileTypes}\r\n            source={SpecificFileTypesSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Dialog Programmatically'\r\n            component={DialogProgrammatically}\r\n            source={DialogProgrammaticallySource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Styling Dropzone'\r\n            component={StylingDropzone}\r\n            source={StylingDropzoneSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Previews'\r\n            component={Previews}\r\n            source={PreviewsSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n          <ComponentCard\r\n            title='Class Components'\r\n            component={ClassComponents}\r\n            source={ClassComponentsSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactDropzone;\r\n","export default \"import React from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\n\\r\\nconst Basic = () => {\\r\\n  const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\\r\\n\\r\\n  const files = acceptedFiles.map((file) => (\\r\\n    <li key={file.path}>\\r\\n      {file.path} - {file.size} bytes\\r\\n    </li>\\r\\n  ));\\r\\n\\r\\n  return (\\r\\n    <section className='container'>\\r\\n      <div {...getRootProps({className: 'dropzone'})}>\\r\\n        <input {...getInputProps()} />\\r\\n        <p>Drag 'n' drop some files here, or click to select files</p>\\r\\n      </div>\\r\\n      <aside>\\r\\n        <h6>Files</h6>\\r\\n        <ul>{files}</ul>\\r\\n      </aside>\\r\\n    </section>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Basic;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\n\\r\\nconst EventPropagation = (props) => {\\r\\n  const {getRootProps} = useDropzone({\\r\\n    // Note how this callback is never invoked if drop occurs on the inner dropzone\\r\\n    onDrop: (files) => console.log(files),\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <div className='container'>\\r\\n      <div {...getRootProps({className: 'dropzone'})}>\\r\\n        <InnerDropzone />\\r\\n        <p>Outer dropzone</p>\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nconst InnerDropzone = (props) => {\\r\\n  const {getRootProps} = useDropzone({noDragEventsBubbling: true});\\r\\n  return (\\r\\n    <div {...getRootProps({className: 'dropzone'})}>\\r\\n      <p>Inner dropzone</p>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default EventPropagation;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\n\\r\\nconst SpecificFileTypes = (props) => {\\r\\n  const {\\r\\n    acceptedFiles,\\r\\n    rejectedFiles,\\r\\n    getRootProps,\\r\\n    getInputProps,\\r\\n  } = useDropzone({\\r\\n    accept: 'image/jpeg, image/png',\\r\\n  });\\r\\n\\r\\n  const acceptedFilesItems =\\r\\n    acceptedFiles &&\\r\\n    acceptedFiles.map((file) => (\\r\\n      <li key={file.path}>\\r\\n        {file.path} - {file.size} bytes\\r\\n      </li>\\r\\n    ));\\r\\n\\r\\n  const rejectedFilesItems =\\r\\n    rejectedFiles &&\\r\\n    rejectedFiles.map((file) => (\\r\\n      <li key={file.path}>\\r\\n        {file.path} - {file.size} bytes\\r\\n      </li>\\r\\n    ));\\r\\n\\r\\n  return (\\r\\n    <section className='container'>\\r\\n      <div {...getRootProps({className: 'dropzone'})}>\\r\\n        <input {...getInputProps()} />\\r\\n        <p>Drag 'n' drop some files here, or click to select files</p>\\r\\n        <em>(Only *.jpeg and *.png images will be accepted)</em>\\r\\n      </div>\\r\\n      <aside>\\r\\n        <h4>Accepted files</h4>\\r\\n        <ul>{acceptedFilesItems}</ul>\\r\\n        <h4>Rejected files</h4>\\r\\n        <ul>{rejectedFilesItems}</ul>\\r\\n      </aside>\\r\\n    </section>\\r\\n  );\\r\\n};\\r\\nexport default SpecificFileTypes;\\r\\n\";","export default \"import React from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\nconst DialogProgrammatically = (props) => {\\r\\n  const {getRootProps, getInputProps, open, acceptedFiles} = useDropzone({\\r\\n    // Disable click and keydown behavior\\r\\n    noClick: true,\\r\\n    noKeyboard: true,\\r\\n  });\\r\\n\\r\\n  const files = acceptedFiles.map((file) => (\\r\\n    <li key={file.path}>\\r\\n      {file.path} - {file.size} bytes\\r\\n    </li>\\r\\n  ));\\r\\n\\r\\n  return (\\r\\n    <div className='container'>\\r\\n      <Box mb={2} {...getRootProps({className: 'dropzone'})}>\\r\\n        <input {...getInputProps()} />\\r\\n        <Box component='p' mb={2}>\\r\\n          Drag 'n' drop some files here\\r\\n        </Box>\\r\\n        <Button color='primary' variant='contained' onClick={open}>\\r\\n          Open File Dialog\\r\\n        </Button>\\r\\n      </Box>\\r\\n      <aside>\\r\\n        <h6>Files</h6>\\r\\n        <ul>{files}</ul>\\r\\n      </aside>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\nexport default DialogProgrammatically;\\r\\n\";","export default \"import React, {useMemo} from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\n\\r\\nconst baseStyle = {\\r\\n  flex: 1,\\r\\n  display: 'flex',\\r\\n  flexDirection: 'column',\\r\\n  alignItems: 'center',\\r\\n  padding: '20px',\\r\\n  borderWidth: 2,\\r\\n  borderRadius: 2,\\r\\n  borderColor: '#eeeeee',\\r\\n  borderStyle: 'dashed',\\r\\n  backgroundColor: '#ffffff',\\r\\n  color: '#bdbdbd',\\r\\n  outline: 'none',\\r\\n  transition: 'border .24s ease-in-out',\\r\\n};\\r\\n\\r\\nconst activeStyle = {\\r\\n  borderColor: '#2196f3',\\r\\n};\\r\\n\\r\\nconst acceptStyle = {\\r\\n  borderColor: '#00e676',\\r\\n};\\r\\n\\r\\nconst rejectStyle = {\\r\\n  borderColor: '#ff1744',\\r\\n};\\r\\n\\r\\nconst StyledDropzone = (props) => {\\r\\n  const {\\r\\n    getRootProps,\\r\\n    getInputProps,\\r\\n    isDragActive,\\r\\n    isDragAccept,\\r\\n    isDragReject,\\r\\n  } = useDropzone({accept: 'image/*'});\\r\\n\\r\\n  const style = useMemo(\\r\\n    () => ({\\r\\n      ...baseStyle,\\r\\n      ...(isDragActive ? activeStyle : {}),\\r\\n      ...(isDragAccept ? acceptStyle : {}),\\r\\n      ...(isDragReject ? rejectStyle : {}),\\r\\n    }),\\r\\n    [isDragActive, isDragAccept, isDragReject],\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <div className='container'>\\r\\n      <div {...getRootProps({style})}>\\r\\n        <input {...getInputProps()} />\\r\\n        <p>Drag 'n' drop some files here, or click to select files</p>\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default StyledDropzone;\\r\\n\";","export default \"import React, {useEffect, useState} from 'react';\\r\\nimport {useDropzone} from 'react-dropzone';\\r\\n\\r\\nconst thumbsContainer = {\\r\\n  display: 'flex',\\r\\n  flexDirection: 'row',\\r\\n  flexWrap: 'wrap',\\r\\n  marginTop: 16,\\r\\n};\\r\\n\\r\\nconst thumb = {\\r\\n  display: 'inline-flex',\\r\\n  borderRadius: 2,\\r\\n  border: '1px solid #eaeaea',\\r\\n  marginBottom: 8,\\r\\n  marginRight: 8,\\r\\n  width: 100,\\r\\n  height: 100,\\r\\n  padding: 4,\\r\\n  boxSizing: 'border-box',\\r\\n};\\r\\n\\r\\nconst thumbInner = {\\r\\n  display: 'flex',\\r\\n  minWidth: 0,\\r\\n  overflow: 'hidden',\\r\\n};\\r\\n\\r\\nconst img = {\\r\\n  display: 'block',\\r\\n  width: 'auto',\\r\\n  height: '100%',\\r\\n};\\r\\n\\r\\nconst Previews = (props) => {\\r\\n  const [files, setFiles] = useState([]);\\r\\n  const {getRootProps, getInputProps} = useDropzone({\\r\\n    accept: 'image/*',\\r\\n    onDrop: (acceptedFiles) => {\\r\\n      setFiles(\\r\\n        acceptedFiles.map((file) =>\\r\\n          Object.assign(file, {\\r\\n            preview: URL.createObjectURL(file),\\r\\n          }),\\r\\n        ),\\r\\n      );\\r\\n    },\\r\\n  });\\r\\n\\r\\n  const thumbs = files.map((file) => (\\r\\n    <div style={thumb} key={file.name}>\\r\\n      <div style={thumbInner}>\\r\\n        <img alt='preview' src={file.preview} style={img} />\\r\\n      </div>\\r\\n    </div>\\r\\n  ));\\r\\n\\r\\n  useEffect(\\r\\n    () => () => {\\r\\n      // Make sure to revoke the db uris to avoid memory leaks\\r\\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\\r\\n    },\\r\\n    [files],\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <section className='container'>\\r\\n      <div {...getRootProps({className: 'dropzone'})}>\\r\\n        <input {...getInputProps()} />\\r\\n        <p>Drag 'n' drop some files here, or click to select files</p>\\r\\n      </div>\\r\\n      <aside style={thumbsContainer}>{thumbs}</aside>\\r\\n    </section>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Previews;\\r\\n\";","export default \"import React, {Component} from 'react';\\r\\nimport Dropzone from 'react-dropzone';\\r\\n\\r\\nclass ClassComponents extends Component {\\r\\n  constructor() {\\r\\n    super();\\r\\n    this.onDrop = (files) => {\\r\\n      this.setState({files});\\r\\n    };\\r\\n    this.state = {\\r\\n      files: [],\\r\\n    };\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const files = this.state.files.map((file) => (\\r\\n      <li key={file.name}>\\r\\n        {file.name} - {file.size} bytes\\r\\n      </li>\\r\\n    ));\\r\\n\\r\\n    return (\\r\\n      <Dropzone onDrop={this.onDrop}>\\r\\n        {({getRootProps, getInputProps}) => (\\r\\n          <section className='container'>\\r\\n            <div {...getRootProps({className: 'dropzone'})}>\\r\\n              <input {...getInputProps()} />\\r\\n              <p>Drag 'n' drop some files here, or click to select files</p>\\r\\n            </div>\\r\\n            <aside>\\r\\n              <h6>Files</h6>\\r\\n              <ul>{files}</ul>\\r\\n            </aside>\\r\\n          </section>\\r\\n        )}\\r\\n      </Dropzone>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ClassComponents;\\r\\n\";"],"sourceRoot":""}