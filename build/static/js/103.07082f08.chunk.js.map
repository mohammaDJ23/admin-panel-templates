{"version":3,"sources":["../node_modules/lodash/isNumber.js","../node_modules/react-google-maps/lib/components/places/SearchBox.js","modules/thirdParty/googleMap/MapWithSearchBox/Components/MapWithASearchBox.js","modules/thirdParty/googleMap/MapWithSearchBox/index.js","webpack:///./src/modules/thirdParty/googleMap/MapWithSearchBox/Components/MapWithASearchBox.js?813c"],"names":["baseGetTag","require","isObjectLike","module","exports","value","Object","defineProperty","SearchBox","undefined","_defineProperty3","_interopRequireDefault","_getPrototypeOf2","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_isNumber3","_invariant2","_canUseDom2","_react2","_reactDom2","_propTypes2","_MapChildHelper","_constants","obj","__esModule","default","_React$PureComponent","_ref","_temp","_this","_ret","this","_len","arguments","length","args","Array","_key","__proto__","call","apply","concat","state","SEARCH_BOX","key","containerElement","google","maps","places","document","createElement","handleRenderChildToContainerElement","version","match","handleInitializeSearchBox","searchBox","componentDidMount","eventMap","handleMountAtControlPosition","nextProp","props","controlPosition","handleUnmountAtControlPosition","prevProps","componentDidUpdate","updaterMap","children","componentWillUnmount","unmountComponentAtNode","querySelector","construct","propTypes","setState","unstable_renderSubtreeIntoContainer","Children","only","isValidControlPosition","mountControlIndex","context","MAP","controls","push","firstChild","child","removeAt","appendChild","createPortal","getBounds","getPlaces","PureComponent","number","defaultBounds","any","bounds","onPlacesChanged","func","contextTypes","object","instance","_bounds","setBounds","window","_","compose","withProps","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","MapWithASearchBoxs","googleMapURL","loadingElement","className","mapElement","componentWillMount","refs","center","lat","lng","markers","onMapMounted","ref","map","onBoundsChanged","getCenter","onSearchBoxMounted","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","defaultZoom","defaultOptions","mapTypeControl","ControlPosition","TOP_LEFT","type","placeholder","style","boxSizing","border","width","height","marginTop","padding","borderRadius","boxShadow","fontSize","outline","marginLeft","textOverflow","marker","index","MapWithASearchBox","Component","MapWithSearchBox","ComponentHeader","title","description","refUrl","GridContainer","Grid","item","xs","ComponentCard","component","source"],"mappings":"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","file":"static/js/103.07082f08.chunk.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","\"use strict\"\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n})\nexports.SearchBox = undefined\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\")\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2)\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\")\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf)\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\")\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2)\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\")\n\nvar _createClass3 = _interopRequireDefault(_createClass2)\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\")\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(\n  _possibleConstructorReturn2\n)\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\")\n\nvar _inherits3 = _interopRequireDefault(_inherits2)\n\nvar _isNumber2 = require(\"lodash/isNumber\")\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2)\n\nvar _invariant = require(\"invariant\")\n\nvar _invariant2 = _interopRequireDefault(_invariant)\n\nvar _canUseDom = require(\"can-use-dom\")\n\nvar _canUseDom2 = _interopRequireDefault(_canUseDom)\n\nvar _react = require(\"react\")\n\nvar _react2 = _interopRequireDefault(_react)\n\nvar _reactDom = require(\"react-dom\")\n\nvar _reactDom2 = _interopRequireDefault(_reactDom)\n\nvar _propTypes = require(\"prop-types\")\n\nvar _propTypes2 = _interopRequireDefault(_propTypes)\n\nvar _MapChildHelper = require(\"../../utils/MapChildHelper\")\n\nvar _constants = require(\"../../constants\")\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj }\n}\n\n/**\n * A wrapper around `google.maps.places.SearchBox` on the map\n *\n * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox\n */\nvar SearchBox = (exports.SearchBox = (function(_React$PureComponent) {\n  ;(0, _inherits3.default)(SearchBox, _React$PureComponent)\n\n  function SearchBox() {\n    var _ref\n\n    var _temp, _this, _ret\n\n    ;(0, _classCallCheck3.default)(this, SearchBox)\n\n    for (\n      var _len = arguments.length, args = Array(_len), _key = 0;\n      _key < _len;\n      _key++\n    ) {\n      args[_key] = arguments[_key]\n    }\n\n    return (\n      (_ret = ((_temp = ((_this = (0, _possibleConstructorReturn3.default)(\n        this,\n        (_ref =\n          SearchBox.__proto__ ||\n          (0, _getPrototypeOf2.default)(SearchBox)).call.apply(\n          _ref,\n          [this].concat(args)\n        )\n      )),\n      _this)),\n      (_this.state = (0, _defineProperty3.default)(\n        {},\n        _constants.SEARCH_BOX,\n        null\n      )),\n      _temp)),\n      (0, _possibleConstructorReturn3.default)(_this, _ret)\n    )\n  }\n\n  ;(0, _createClass3.default)(SearchBox, [\n    {\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        if (!_canUseDom2.default || this.containerElement) {\n          return\n        }\n        ;(0, _invariant2.default)(\n          google.maps.places,\n          'Did you include \"libraries=places\" in the URL?'\n        )\n        this.containerElement = document.createElement(\"div\")\n        this.handleRenderChildToContainerElement()\n        if (_react2.default.version.match(/^16/)) {\n          return\n        }\n        this.handleInitializeSearchBox()\n      },\n    },\n    {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var searchBox = this.state[_constants.SEARCH_BOX]\n        if (_react2.default.version.match(/^16/)) {\n          searchBox = this.handleInitializeSearchBox()\n        }\n        ;(0, _MapChildHelper.componentDidMount)(this, searchBox, eventMap)\n        this.handleMountAtControlPosition()\n      },\n    },\n    {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(nextProp) {\n        if (this.props.controlPosition !== nextProp.controlPosition) {\n          this.handleUnmountAtControlPosition()\n        }\n      },\n    },\n    {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        ;(0, _MapChildHelper.componentDidUpdate)(\n          this,\n          this.state[_constants.SEARCH_BOX],\n          eventMap,\n          updaterMap,\n          prevProps\n        )\n        if (this.props.children !== prevProps.children) {\n          this.handleRenderChildToContainerElement()\n        }\n        if (this.props.controlPosition !== prevProps.controlPosition) {\n          this.handleMountAtControlPosition()\n        }\n      },\n    },\n    {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        ;(0, _MapChildHelper.componentWillUnmount)(this)\n        this.handleUnmountAtControlPosition()\n        if (_react2.default.version.match(/^16/)) {\n          return\n        }\n        if (this.containerElement) {\n          _reactDom2.default.unmountComponentAtNode(this.containerElement)\n          this.containerElement = null\n        }\n      },\n    },\n    {\n      key: \"handleInitializeSearchBox\",\n      value: function handleInitializeSearchBox() {\n        /*\n       * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox\n       */\n        var searchBox = new google.maps.places.SearchBox(\n          this.containerElement.querySelector(\"input\")\n        )\n        ;(0, _MapChildHelper.construct)(\n          SearchBox.propTypes,\n          updaterMap,\n          this.props,\n          searchBox\n        )\n        this.setState(\n          (0, _defineProperty3.default)({}, _constants.SEARCH_BOX, searchBox)\n        )\n        return searchBox\n      },\n    },\n    {\n      key: \"handleRenderChildToContainerElement\",\n      value: function handleRenderChildToContainerElement() {\n        if (_react2.default.version.match(/^16/)) {\n          return\n        }\n        _reactDom2.default.unstable_renderSubtreeIntoContainer(\n          this,\n          _react2.default.Children.only(this.props.children),\n          this.containerElement\n        )\n      },\n    },\n    {\n      key: \"handleMountAtControlPosition\",\n      value: function handleMountAtControlPosition() {\n        if (isValidControlPosition(this.props.controlPosition)) {\n          this.mountControlIndex =\n            -1 +\n            this.context[_constants.MAP].controls[\n              this.props.controlPosition\n            ].push(this.containerElement.firstChild)\n        }\n      },\n    },\n    {\n      key: \"handleUnmountAtControlPosition\",\n      value: function handleUnmountAtControlPosition() {\n        if (isValidControlPosition(this.props.controlPosition)) {\n          var child = this.context[_constants.MAP].controls[\n            this.props.controlPosition\n          ].removeAt(this.mountControlIndex)\n          if (child !== undefined) {\n            this.containerElement.appendChild(child)\n          }\n        }\n      },\n    },\n    {\n      key: \"render\",\n      value: function render() {\n        if (_react2.default.version.match(/^16/)) {\n          return _reactDom2.default.createPortal(\n            _react2.default.Children.only(this.props.children),\n            this.containerElement\n          )\n        }\n        return false\n      },\n\n      /**\n       * Returns the bounds to which query predictions are biased.\n       * @type LatLngBounds\n       * @public\n       */\n    },\n    {\n      key: \"getBounds\",\n      value: function getBounds() {\n        return this.state[_constants.SEARCH_BOX].getBounds()\n      },\n\n      /**\n       * Returns the query selected by the user, or `null` if no places have been found yet, to be used with `places_changed` event.\n       * @type Array<PlaceResult>nullplaces_changed\n       * @public\n       */\n    },\n    {\n      key: \"getPlaces\",\n      value: function getPlaces() {\n        return this.state[_constants.SEARCH_BOX].getPlaces()\n      },\n    },\n  ])\n  return SearchBox\n})(\n  _react2.default.PureComponent\n)) /*\n                                   * -----------------------------------------------------------------------------\n                                   * This file is auto-generated from the corresponding file at `src/macros/`.\n                                   * Please **DO NOT** edit this file directly when creating PRs.\n                                   * -----------------------------------------------------------------------------\n                                   */\n/* global google */\n\nSearchBox.propTypes = {\n  /**\n   * Where to put `<SearchBox>` inside a `<GoogleMap>`\n   *\n   * @example google.maps.ControlPosition.TOP_LEFT\n   * @type number\n   */\n  controlPosition: _propTypes2.default.number,\n\n  /**\n   * @type LatLngBounds|LatLngBoundsLiteral\n   */\n  defaultBounds: _propTypes2.default.any,\n\n  /**\n   * @type LatLngBounds|LatLngBoundsLiteral\n   */\n  bounds: _propTypes2.default.any,\n\n  /**\n   * function\n   */\n  onPlacesChanged: _propTypes2.default.func,\n}\nSearchBox.contextTypes = (0, _defineProperty3.default)(\n  {},\n  _constants.MAP,\n  _propTypes2.default.object\n)\nexports.default = SearchBox\n\nvar isValidControlPosition = _isNumber3.default\n\nvar eventMap = {\n  onPlacesChanged: \"places_changed\",\n}\n\nvar updaterMap = {\n  bounds: function bounds(instance, _bounds) {\n    instance.setBounds(_bounds)\n  },\n}\n","import React, {Component} from 'react';\r\n\r\nconst google = window.google;\r\n\r\nconst _ = require('lodash');\r\nconst {compose, withProps, lifecycle} = require('recompose');\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} = require('react-google-maps');\r\nconst {\r\n  SearchBox,\r\n} = require('react-google-maps/lib/components/places/SearchBox');\r\n\r\nconst MapWithASearchBoxs = compose(\r\n  withProps({\r\n    googleMapURL:\r\n      'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k',\r\n    loadingElement: <div className='cr-embed-responsive-item' />,\r\n    containerElement: (\r\n      <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n    ),\r\n    mapElement: <div className='cr-embed-responsive-item' />,\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {};\r\n\r\n      this.setState({\r\n        bounds: null,\r\n        center: {\r\n          lat: 41.9,\r\n          lng: -87.624,\r\n        },\r\n        markers: [],\r\n        onMapMounted: (ref) => {\r\n          refs.map = ref;\r\n        },\r\n        onBoundsChanged: () => {\r\n          this.setState({\r\n            bounds: refs.map.getBounds(),\r\n            center: refs.map.getCenter(),\r\n          });\r\n        },\r\n        onSearchBoxMounted: (ref) => {\r\n          refs.searchBox = ref;\r\n        },\r\n        onPlacesChanged: () => {\r\n          const places = refs.searchBox.getPlaces();\r\n          const bounds = new google.maps.LatLngBounds();\r\n\r\n          places.forEach((place) => {\r\n            if (place.geometry && place.geometry.viewport) {\r\n              bounds.union(place.geometry.viewport);\r\n            } else {\r\n              bounds.extend(place.geometry.location);\r\n            }\r\n          });\r\n          const nextMarkers = places.map((place) => ({\r\n            position: place.geometry.location,\r\n          }));\r\n          const nextCenter = _.get(\r\n            nextMarkers,\r\n            '0.position',\r\n            this.state.center,\r\n          );\r\n\r\n          this.setState({\r\n            center: nextCenter,\r\n            markers: nextMarkers,\r\n          });\r\n          // refs.map.fitBounds(bounds);\r\n        },\r\n      });\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap,\r\n)((props) => (\r\n  <GoogleMap\r\n    ref={props.onMapMounted}\r\n    defaultZoom={15}\r\n    center={props.center}\r\n    defaultOptions={{mapTypeControl: false}}\r\n    onBoundsChanged={props.onBoundsChanged}>\r\n    <SearchBox\r\n      ref={props.onSearchBoxMounted}\r\n      bounds={props.bounds}\r\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n      onPlacesChanged={props.onPlacesChanged}>\r\n      <input\r\n        type='text'\r\n        placeholder='Enter search location'\r\n        style={{\r\n          boxSizing: `border-box`,\r\n          border: `1px solid transparent`,\r\n          width: `240px`,\r\n          height: `32px`,\r\n          marginTop: `27px`,\r\n          padding: `0 12px`,\r\n          borderRadius: `3px`,\r\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n          fontSize: `14px`,\r\n          outline: `none`,\r\n          marginLeft: '20px',\r\n          textOverflow: `ellipses`,\r\n        }}\r\n      />\r\n    </SearchBox>\r\n    {props.markers.map((marker, index) => (\r\n      <Marker key={index} position={marker.position} />\r\n    ))}\r\n  </GoogleMap>\r\n));\r\n\r\nexport default class MapWithASearchBox extends Component {\r\n  render() {\r\n    return (\r\n      <MapWithASearchBoxs\r\n        containerElement={\r\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n        }\r\n        mapElement={<div className='cr-embed-responsive-item' />}\r\n      />\r\n    );\r\n  }\r\n}\r\n// const _ = require(\"lodash\");\r\n// const { compose, withProps, lifecycle } = require(\"recompose\");\r\n// const {\r\n//   withScriptjs,\r\n//   withGoogleMap,\r\n//   GoogleMap,\r\n//   Marker,\r\n// } = require(\"react-google-maps\");\r\n// const { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\r\n//\r\n// const MapWithASearchBox = compose(\r\n//   withProps({\r\n//     googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\r\n//     loadingElement: <div style={{ height: `100%` }} />,\r\n//     containerElement: <div style={{ height: `400px` }} />,\r\n//     mapElement: <div style={{ height: `100%` }} />,\r\n//   }),\r\n//   lifecycle({\r\n//     componentWillMount() {\r\n//       const refs = {}\r\n//\r\n//       this.setState({\r\n//         bounds: null,\r\n//         center: {\r\n//           lat: 41.9, lng: -87.624\r\n//         },\r\n//         markers: [],\r\n//         onMapMounted: ref => {\r\n//           refs.map = ref;\r\n//         },\r\n//         onBoundsChanged: () => {\r\n//           this.setState({\r\n//             bounds: refs.map.getBounds(),\r\n//             center: refs.map.getCenter(),\r\n//           })\r\n//         },\r\n//         onSearchBoxMounted: ref => {\r\n//           refs.searchBox = ref;\r\n//         },\r\n//         onPlacesChanged: () => {\r\n//           const places = refs.searchBox.getPlaces();\r\n//           const bounds = new google.maps.LatLngBounds();\r\n//\r\n//           places.forEach(place => {\r\n//             if (place.geometry.viewport) {\r\n//               bounds.union(place.geometry.viewport)\r\n//             } else {\r\n//               bounds.extend(place.geometry.location)\r\n//             }\r\n//           });\r\n//           const nextMarkers = places.map(place => ({\r\n//             position: place.geometry.location,\r\n//           }));\r\n//           const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\r\n//\r\n//           this.setState({\r\n//             center: nextCenter,\r\n//             markers: nextMarkers,\r\n//           });\r\n//           // refs.map.fitBounds(bounds);\r\n//         },\r\n//       })\r\n//     },\r\n//   }),\r\n//   withScriptjs,\r\n//   withGoogleMap\r\n// )(props =>\r\n//   <GoogleMap\r\n//     ref={props.onMapMounted}\r\n//     defaultZoom={15}\r\n//     center={props.center}\r\n//     onBoundsChanged={props.onBoundsChanged}\r\n//   >\r\n//     <SearchBox\r\n//       ref={props.onSearchBoxMounted}\r\n//       bounds={props.bounds}\r\n//       controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n//       onPlacesChanged={props.onPlacesChanged}\r\n//     >\r\n//       <input\r\n//         type=\"text\"\r\n//         Skeleton=\"Customized your Skeleton\"\r\n//         style={{\r\n//           boxSizing: `border-box`,\r\n//           border: `1px solid transparent`,\r\n//           width: `240px`,\r\n//           height: `32px`,\r\n//           marginTop: `27px`,\r\n//           padding: `0 12px`,\r\n//           borderRadius: `3px`,\r\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n//           fontSize: `14px`,\r\n//           outline: `none`,\r\n//           textOverflow: `ellipses`,\r\n//         }}\r\n//       />\r\n//     </SearchBox>\r\n//     {props.markers.map((marker, index) =>\r\n//       <Marker key={index} position={marker.position} />\r\n//     )}\r\n//   </GoogleMap>\r\n// );\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\n\r\nimport MapWithASearchBox from './Components/MapWithASearchBox';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport MapWithASearchBoxSource from '!raw-loader!./Components/MapWithASearchBox';\r\n\r\nconst MapWithSearchBox = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Google Map with SearchBox'\r\n        description='A wrapper around google.maps.places.SearchBox on the map'\r\n        refUrl='https://developers.google.com/maps/documentation/javascript/3.exp/reference#SearchBox/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Map With Search Box'\r\n            component={MapWithASearchBox}\r\n            source={MapWithASearchBoxSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapWithSearchBox;\r\n","export default \"import React, {Component} from 'react';\\r\\n\\r\\nconst google = window.google;\\r\\n\\r\\nconst _ = require('lodash');\\r\\nconst {compose, withProps, lifecycle} = require('recompose');\\r\\nconst {\\r\\n  withScriptjs,\\r\\n  withGoogleMap,\\r\\n  GoogleMap,\\r\\n  Marker,\\r\\n} = require('react-google-maps');\\r\\nconst {\\r\\n  SearchBox,\\r\\n} = require('react-google-maps/lib/components/places/SearchBox');\\r\\n\\r\\nconst MapWithASearchBoxs = compose(\\r\\n  withProps({\\r\\n    googleMapURL:\\r\\n      'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places,geometry,drawing&key=AIzaSyC9dEjps9u3AP1ce5dxcXCTYDRUege490k',\\r\\n    loadingElement: <div className='cr-embed-responsive-item' />,\\r\\n    containerElement: (\\r\\n      <div className='cr-embed-responsive cr-embed-responsive-21by9' />\\r\\n    ),\\r\\n    mapElement: <div className='cr-embed-responsive-item' />,\\r\\n  }),\\r\\n  lifecycle({\\r\\n    componentWillMount() {\\r\\n      const refs = {};\\r\\n\\r\\n      this.setState({\\r\\n        bounds: null,\\r\\n        center: {\\r\\n          lat: 41.9,\\r\\n          lng: -87.624,\\r\\n        },\\r\\n        markers: [],\\r\\n        onMapMounted: (ref) => {\\r\\n          refs.map = ref;\\r\\n        },\\r\\n        onBoundsChanged: () => {\\r\\n          this.setState({\\r\\n            bounds: refs.map.getBounds(),\\r\\n            center: refs.map.getCenter(),\\r\\n          });\\r\\n        },\\r\\n        onSearchBoxMounted: (ref) => {\\r\\n          refs.searchBox = ref;\\r\\n        },\\r\\n        onPlacesChanged: () => {\\r\\n          const places = refs.searchBox.getPlaces();\\r\\n          const bounds = new google.maps.LatLngBounds();\\r\\n\\r\\n          places.forEach((place) => {\\r\\n            if (place.geometry && place.geometry.viewport) {\\r\\n              bounds.union(place.geometry.viewport);\\r\\n            } else {\\r\\n              bounds.extend(place.geometry.location);\\r\\n            }\\r\\n          });\\r\\n          const nextMarkers = places.map((place) => ({\\r\\n            position: place.geometry.location,\\r\\n          }));\\r\\n          const nextCenter = _.get(\\r\\n            nextMarkers,\\r\\n            '0.position',\\r\\n            this.state.center,\\r\\n          );\\r\\n\\r\\n          this.setState({\\r\\n            center: nextCenter,\\r\\n            markers: nextMarkers,\\r\\n          });\\r\\n          // refs.map.fitBounds(bounds);\\r\\n        },\\r\\n      });\\r\\n    },\\r\\n  }),\\r\\n  withScriptjs,\\r\\n  withGoogleMap,\\r\\n)((props) => (\\r\\n  <GoogleMap\\r\\n    ref={props.onMapMounted}\\r\\n    defaultZoom={15}\\r\\n    center={props.center}\\r\\n    defaultOptions={{mapTypeControl: false}}\\r\\n    onBoundsChanged={props.onBoundsChanged}>\\r\\n    <SearchBox\\r\\n      ref={props.onSearchBoxMounted}\\r\\n      bounds={props.bounds}\\r\\n      controlPosition={google.maps.ControlPosition.TOP_LEFT}\\r\\n      onPlacesChanged={props.onPlacesChanged}>\\r\\n      <input\\r\\n        type='text'\\r\\n        placeholder='Enter search location'\\r\\n        style={{\\r\\n          boxSizing: `border-box`,\\r\\n          border: `1px solid transparent`,\\r\\n          width: `240px`,\\r\\n          height: `32px`,\\r\\n          marginTop: `27px`,\\r\\n          padding: `0 12px`,\\r\\n          borderRadius: `3px`,\\r\\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\\r\\n          fontSize: `14px`,\\r\\n          outline: `none`,\\r\\n          marginLeft: '20px',\\r\\n          textOverflow: `ellipses`,\\r\\n        }}\\r\\n      />\\r\\n    </SearchBox>\\r\\n    {props.markers.map((marker, index) => (\\r\\n      <Marker key={index} position={marker.position} />\\r\\n    ))}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\nexport default class MapWithASearchBox extends Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <MapWithASearchBoxs\\r\\n        containerElement={\\r\\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\\r\\n        }\\r\\n        mapElement={<div className='cr-embed-responsive-item' />}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n// const _ = require(\\\"lodash\\\");\\r\\n// const { compose, withProps, lifecycle } = require(\\\"recompose\\\");\\r\\n// const {\\r\\n//   withScriptjs,\\r\\n//   withGoogleMap,\\r\\n//   GoogleMap,\\r\\n//   Marker,\\r\\n// } = require(\\\"react-google-maps\\\");\\r\\n// const { SearchBox } = require(\\\"react-google-maps/lib/components/places/SearchBox\\\");\\r\\n//\\r\\n// const MapWithASearchBox = compose(\\r\\n//   withProps({\\r\\n//     googleMapURL: \\\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\\\",\\r\\n//     loadingElement: <div style={{ height: `100%` }} />,\\r\\n//     containerElement: <div style={{ height: `400px` }} />,\\r\\n//     mapElement: <div style={{ height: `100%` }} />,\\r\\n//   }),\\r\\n//   lifecycle({\\r\\n//     componentWillMount() {\\r\\n//       const refs = {}\\r\\n//\\r\\n//       this.setState({\\r\\n//         bounds: null,\\r\\n//         center: {\\r\\n//           lat: 41.9, lng: -87.624\\r\\n//         },\\r\\n//         markers: [],\\r\\n//         onMapMounted: ref => {\\r\\n//           refs.map = ref;\\r\\n//         },\\r\\n//         onBoundsChanged: () => {\\r\\n//           this.setState({\\r\\n//             bounds: refs.map.getBounds(),\\r\\n//             center: refs.map.getCenter(),\\r\\n//           })\\r\\n//         },\\r\\n//         onSearchBoxMounted: ref => {\\r\\n//           refs.searchBox = ref;\\r\\n//         },\\r\\n//         onPlacesChanged: () => {\\r\\n//           const places = refs.searchBox.getPlaces();\\r\\n//           const bounds = new google.maps.LatLngBounds();\\r\\n//\\r\\n//           places.forEach(place => {\\r\\n//             if (place.geometry.viewport) {\\r\\n//               bounds.union(place.geometry.viewport)\\r\\n//             } else {\\r\\n//               bounds.extend(place.geometry.location)\\r\\n//             }\\r\\n//           });\\r\\n//           const nextMarkers = places.map(place => ({\\r\\n//             position: place.geometry.location,\\r\\n//           }));\\r\\n//           const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\\r\\n//\\r\\n//           this.setState({\\r\\n//             center: nextCenter,\\r\\n//             markers: nextMarkers,\\r\\n//           });\\r\\n//           // refs.map.fitBounds(bounds);\\r\\n//         },\\r\\n//       })\\r\\n//     },\\r\\n//   }),\\r\\n//   withScriptjs,\\r\\n//   withGoogleMap\\r\\n// )(props =>\\r\\n//   <GoogleMap\\r\\n//     ref={props.onMapMounted}\\r\\n//     defaultZoom={15}\\r\\n//     center={props.center}\\r\\n//     onBoundsChanged={props.onBoundsChanged}\\r\\n//   >\\r\\n//     <SearchBox\\r\\n//       ref={props.onSearchBoxMounted}\\r\\n//       bounds={props.bounds}\\r\\n//       controlPosition={google.maps.ControlPosition.TOP_LEFT}\\r\\n//       onPlacesChanged={props.onPlacesChanged}\\r\\n//     >\\r\\n//       <input\\r\\n//         type=\\\"text\\\"\\r\\n//         Skeleton=\\\"Customized your Skeleton\\\"\\r\\n//         style={{\\r\\n//           boxSizing: `border-box`,\\r\\n//           border: `1px solid transparent`,\\r\\n//           width: `240px`,\\r\\n//           height: `32px`,\\r\\n//           marginTop: `27px`,\\r\\n//           padding: `0 12px`,\\r\\n//           borderRadius: `3px`,\\r\\n//           boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\\r\\n//           fontSize: `14px`,\\r\\n//           outline: `none`,\\r\\n//           textOverflow: `ellipses`,\\r\\n//         }}\\r\\n//       />\\r\\n//     </SearchBox>\\r\\n//     {props.markers.map((marker, index) =>\\r\\n//       <Marker key={index} position={marker.position} />\\r\\n//     )}\\r\\n//   </GoogleMap>\\r\\n// );\\r\\n\";"],"sourceRoot":""}