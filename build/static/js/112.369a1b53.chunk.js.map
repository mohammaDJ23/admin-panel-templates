{"version":3,"sources":["../node_modules/@material-ui/icons/Add.js","../../src/SnackbarContext.ts","../../src/utils/constants.ts","../../src/SnackbarContent/SnackbarContent.tsx","../../src/SnackbarItem/SnackbarItem.util.ts","../../src/utils/createChainedFunction.js","../../src/SnackbarItem/SnackbarItem.tsx","../../src/SnackbarContainer.tsx","../../src/utils/defaultIconVariants.tsx","../../src/SnackbarProvider.tsx","../../src/useSnackbar.ts"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","React","allClasses","root","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","containerRoot","containerAnchorOriginTopCenter","containerAnchorOriginBottomCenter","containerAnchorOriginTopRight","containerAnchorOriginBottomRight","containerAnchorOriginTopLeft","containerAnchorOriginBottomLeft","SNACKBAR_INDENTS","dense","capitalise","text","omitContainerKeys","classes","key","isDefined","DEFAULTS","variant","autoHideDuration","anchorOrigin","vertical","horizontal","numberOrNull","numberish","REASONS","CLICKAWAY","MAXSNACK","INSTRUCTED","styles","theme","createStyles","display","flexWrap","flexGrow","minWidth","SnackbarContent","forwardRef","className","props","ref","clsx","withStyles","DIRECTION","right","left","bottom","top","getTransitionDirection","omitNonMuiKeys","snackbarMuiClasses","omitNonCollapseKeys","container","wrapper","createChainedFunction","funcs","extraArg","func","acc","args","argums","backgroundColor","emphasize","lessPadding","paddingLeft","variantSuccess","color","variantError","variantInfo","variantWarning","contentRoot","alignItems","padding","borderRadius","boxShadow","message","action","marginLeft","marginRight","wrappedRoot","position","transform","collapseContainer","paddingRight","collapseWrapper","transition","easing","marginTop","marginBottom","collapseWrapperDense","SnackbarItem","timeout","useRef","useState","collapsed","setCollapsed","useEffect","clearTimeout","handleClose","callbacks","reduce","content","otherAriaAttributes","ariaAttributes","otherClassName","hideIconVariant","iconVariant","snack","TransitionComponent","Slide","TransitionProps","otherTransitionProps","other","singleClassName","singleContent","singleAction","singleAriaAttributes","singleTransitionProps","singleSnackProps","icon","transitionProps","direction","onExited","setTimeout","finalAction","snackContent","unmountOnExit","in","open","onClose","onExit","onExiting","onEnter","onEntering","onEntered","role","id","useStyle","makeStyles","boxSizing","maxHeight","maxWidth","flexDirection","zIndex","height","width","reverseColumns","topDense","bottomDense","leftDense","rightDense","center","SnackbarContainer","combinedClassname","CheckIcon","WarningIcon","ErrorIcon","InfoIcon","iconStyles","fontSize","marginInlineEnd","defaultIconVariants","success","style","warning","error","info","SnackbarProvider","enqueueSnackbar","preventDuplicate","options","hasSpecifiedKey","Date","getTime","Math","merger","defaults","name","merge","entered","requestClose","compareFunction","item","inQueue","state","inView","queue","handleDisplaySnack","snacks","processQueue","handleDismissOldest","popped","ignore","current","handleEnteredSnack","Error","handleCloseSnack","reason","shouldCloseAll","closeSnackbar","toBeClosed","handleExitedSnack","key1","newState","contextValue","render","this","domRoot","children","categ","anchor","category","existingOfCategory","snackbars","origin","SnackbarContext","createPortal","maxSnack","Component","useContext"],"mappings":"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","file":"static/js/112.369a1b53.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","import React from 'react';\nimport { ProviderContext } from '.';\n\n// @ts-ignore\nexport default React.createContext<ProviderContext>();\n","import { SnackbarClassKey } from '@material-ui/core/Snackbar';\nimport { CloseReason, ContainerClassKey, SnackbarProviderProps } from '../index';\nimport { SnackbarItemProps } from '../SnackbarItem';\nimport { Snack } from '../SnackbarProvider';\n\nexport const allClasses: {\n    mui: Record<SnackbarClassKey, {}>;\n    container: Record<ContainerClassKey, {}>;\n} = {\n    mui: {\n        root: {},\n        anchorOriginTopCenter: {},\n        anchorOriginBottomCenter: {},\n        anchorOriginTopRight: {},\n        anchorOriginBottomRight: {},\n        anchorOriginTopLeft: {},\n        anchorOriginBottomLeft: {},\n    },\n    container: {\n        containerRoot: {},\n        containerAnchorOriginTopCenter: {},\n        containerAnchorOriginBottomCenter: {},\n        containerAnchorOriginTopRight: {},\n        containerAnchorOriginBottomRight: {},\n        containerAnchorOriginTopLeft: {},\n        containerAnchorOriginBottomLeft: {},\n    },\n};\n\nexport const MESSAGES = {\n    NO_PERSIST_ALL: 'WARNING - notistack: Reached maxSnack while all enqueued snackbars have \\'persist\\' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented.',\n};\n\nexport const SNACKBAR_INDENTS = {\n    view: { default: 20, dense: 4 },\n    snackbar: { default: 6, dense: 2 },\n};\n\nexport const capitalise = (text: string): string => text.charAt(0).toUpperCase() + text.slice(1);\n\nexport const originKeyExtractor = (anchor: Snack['anchorOrigin']): string => (\n    `${capitalise(anchor.vertical)}${capitalise(anchor.horizontal)}`\n);\n\n/**\n * Omit SnackbarContainer class keys that are not needed for SnackbarItem\n */\nexport const omitContainerKeys = (classes: SnackbarProviderProps['classes']): SnackbarItemProps['classes'] => (\n    // @ts-ignore\n    Object.keys(classes).filter(key => !allClasses.container[key]).reduce((obj, key) => ({ ...obj, [key]: classes[key] }), {})\n);\n\nexport const isDefined = (value: string | null | undefined | number): boolean => (!!value || value === 0);\n\nexport const DEFAULTS = {\n    variant: 'default',\n    autoHideDuration: 5000,\n    anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left',\n    },\n};\n\nconst numberOrNull = (numberish?: number | null) => (\n    typeof numberish === 'number' || numberish === null\n);\n\n// @ts-ignore\nexport const merge = (options, props, defaults) => (name: keyof Snack): any => {\n    if (name === 'autoHideDuration') {\n        if (numberOrNull(options.autoHideDuration)) return options.autoHideDuration;\n        if (numberOrNull(props.autoHideDuration)) return props.autoHideDuration;\n        return DEFAULTS.autoHideDuration;\n    }\n\n    return options[name] || props[name] || defaults[name];\n};\n\nexport const REASONS: { [key: string]: CloseReason } = {\n    CLICKAWAY: 'clickaway',\n    MAXSNACK: 'maxsnack',\n    INSTRUCTED: 'instructed',\n};\n","import React, { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexGrow: 1,\n        [theme.breakpoints.up('sm')]: {\n            flexGrow: 'initial',\n            minWidth: 288,\n        },\n    }\n});\n\ninterface SnackbarContentProps extends WithStyles<typeof styles>, React.HTMLAttributes<HTMLDivElement> { }\n\nconst SnackbarContent = forwardRef<HTMLDivElement, SnackbarContentProps>(({ classes, className, ...props }, ref) => (\n    <div ref={ref} className={clsx(classes.root, className)}  {...props} />\n))\n\nexport default withStyles(styles)(SnackbarContent);\n","import clsx from 'clsx';\nimport { SnackbarProps } from '@material-ui/core/Snackbar';\nimport { allClasses } from '../utils/constants';\nimport { SnackbarItemProps } from './SnackbarItem';\nimport { Snack } from '../SnackbarProvider';\n\nconst DIRECTION = {\n    right: 'left',\n    left: 'right',\n    bottom: 'up',\n    top: 'down',\n} as const;\nexport type DirectionType = typeof DIRECTION[keyof typeof DIRECTION]\n\nexport const getTransitionDirection = (anchorOrigin: Snack['anchorOrigin']): DirectionType => {\n    if (anchorOrigin.horizontal !== 'center') {\n        return DIRECTION[anchorOrigin.horizontal];\n    }\n    return DIRECTION[anchorOrigin.vertical];\n};\n\n/**\n * Omit all class keys except those allowed in material-ui snackbar\n */\nexport const omitNonMuiKeys: (classes: { wrappedRoot: string } & SnackbarProps['classes']) => SnackbarProps['classes'] = (classes) => {\n    const snackbarMuiClasses = Object.keys(classes)\n        // @ts-ignore\n        .filter(key => allClasses.mui[key] !== undefined).reduce((obj, key) => ({ ...obj, [key]: classes[key] }), {});\n\n    return {\n        ...snackbarMuiClasses,\n        root: clsx(classes.root, classes.wrappedRoot),\n    };\n};\n\n/**\n * Omit all class keys except what we need for collapse component\n */\nexport const omitNonCollapseKeys = (classes: SnackbarItemProps['classes'], dense: SnackbarItemProps['dense']): { container: string; wrapper: string } => ({\n    container: classes.collapseContainer,\n    wrapper: clsx(classes.collapseWrapper, { [classes.collapseWrapperDense]: dense }),\n});\n","/**\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/createChainedFunction.js\n */\nexport default function createChainedFunction(funcs, extraArg) {\n    return funcs.reduce((acc, func) => {\n        if (func == null) return acc;\n\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof func !== 'function') {\n                // eslint-disable-next-line no-console\n                console.error('Invalid Argument Type. must only provide functions, undefined, or null.');\n            }\n        }\n\n        return function chainedFunction(...args) {\n            const argums = [...args];\n            if (extraArg && argums.indexOf(extraArg) === -1) {\n                argums.push(extraArg);\n            }\n            acc.apply(this, argums);\n            func.apply(this, argums);\n        };\n    }, () => { });\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { withStyles, WithStyles, createStyles, Theme, emphasize } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\nimport Collapse from '@material-ui/core/Collapse';\nimport SnackbarContent from '../SnackbarContent';\nimport { getTransitionDirection, omitNonMuiKeys, omitNonCollapseKeys } from './SnackbarItem.util';\nimport { capitalise, allClasses, REASONS, SNACKBAR_INDENTS } from '../utils/constants';\nimport { SnackbarProviderProps, OptionalBy, SharedProps, RequiredBy, IconVariant, VariantClassKey, TransitionHandlerProps } from '../index';\nimport { Snack } from '../SnackbarProvider';\nimport createChainedFunction from '../utils/createChainedFunction';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst styles = (theme: Theme) => {\n    const backgroundColor = emphasize(theme.palette.background.default, theme.palette.type === 'light' ? 0.8 : 0.98);\n    return createStyles({\n        ...allClasses.mui,\n        lessPadding: {\n            paddingLeft: 8 * 2.5,\n        },\n        variantSuccess: {\n            backgroundColor: '#43a047 !important', // green\n            color: '#fff !important',\n        },\n        variantError: {\n            backgroundColor: '#d32f2f !important', // dark red\n            color: '#fff !important',\n        },\n        variantInfo: {\n            backgroundColor: '#2196f3 !important', // nice blue\n            color: '#fff !important',\n        },\n        variantWarning: {\n            backgroundColor: '#ff9800 !important', // amber\n            color: '#fff !important',\n        },\n        contentRoot: {\n            ...theme.typography.body2,\n            backgroundColor,\n            color: theme.palette.getContrastText(backgroundColor),\n            alignItems: 'center',\n            padding: '6px 16px',\n            borderRadius: '4px',\n            boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)',\n        },\n        message: {\n            display: 'flex',\n            alignItems: 'center',\n            padding: '8px 0',\n        },\n        action: {\n            display: 'flex',\n            alignItems: 'center',\n            marginLeft: 'auto',\n            paddingLeft: 16,\n            marginRight: -8,\n        },\n        wrappedRoot: {\n            position: 'relative',\n            transform: 'translateX(0)',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        },\n        collapseContainer: {\n            [theme.breakpoints.down('xs')]: {\n                paddingLeft: theme.spacing(1),\n                paddingRight: theme.spacing(1),\n            },\n        },\n        collapseWrapper: {\n            transition: theme.transitions.create(['margin-bottom'], { easing: 'ease' }),\n            marginTop: SNACKBAR_INDENTS.snackbar.default,\n            marginBottom: SNACKBAR_INDENTS.snackbar.default,\n        },\n        collapseWrapperDense: {\n            marginTop: SNACKBAR_INDENTS.snackbar.dense,\n            marginBottom: SNACKBAR_INDENTS.snackbar.dense,\n        },\n    });\n}\n\n\ntype RemovedProps =\n    /** the one received from Provider is processed and passed to snack prop */\n    | 'variant'\n    /** same as above */\n    | 'anchorOrigin'\n    /** the one recevied from enqueueSnackbar is processed in provider, therefore shouldn't be passed to SnackbarItem */\n    | 'preventDuplicate'\n\n\nexport interface SnackbarItemProps extends WithStyles<typeof styles>, RequiredBy<Omit<SharedProps, RemovedProps>, 'onEntered' | 'onExited' | 'onClose'> {\n    snack: Snack;\n    dense: SnackbarProviderProps['dense'];\n    iconVariant: OptionalBy<IconVariant, 'default'>;\n    hideIconVariant: SnackbarProviderProps['hideIconVariant'];\n}\n\nconst SnackbarItem: React.FC<SnackbarItemProps> = ({ classes, ...props }) => {\n    const timeout = useRef<ReturnType<typeof setTimeout>>();\n    const [collapsed, setCollapsed] = useState(true);\n\n    useEffect(() => (): void => {\n        if (timeout.current) {\n            clearTimeout(timeout.current);\n        }\n    }, []);\n\n    const handleClose = createChainedFunction([props.snack.onClose, props.onClose], props.snack.key);\n\n    const handleEntered: TransitionHandlerProps['onEntered'] = () => {\n        if (props.snack.requestClose) {\n            handleClose(null, REASONS.INSTRCUTED);\n        }\n    };\n\n    const handleExitedScreen = (): void => {\n        timeout.current = setTimeout(() => {\n            setCollapsed(!collapsed);\n        }, 125);\n    };\n\n    const callbacks: { [key in keyof TransitionHandlerProps]?: any } =\n        ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].reduce((acc, cbName) => ({\n            ...acc,\n            // @ts-ignore\n            [cbName]: createChainedFunction([props.snack[cbName], props[cbName]], props.snack.key),\n        }), {});\n\n    const {\n        action,\n        content,\n        ariaAttributes: otherAriaAttributes,\n        className: otherClassName,\n        hideIconVariant,\n        iconVariant,\n        snack,\n        dense,\n        TransitionComponent = Slide,\n        TransitionProps: otherTransitionProps = {},\n        ...other\n    } = props;\n\n    const {\n        key,\n        persist,\n        entered,\n        requestClose,\n        className: singleClassName,\n        variant,\n        content: singleContent,\n        action: singleAction,\n        ariaAttributes: singleAriaAttributes,\n        anchorOrigin,\n        TransitionProps: singleTransitionProps = {},\n        ...singleSnackProps\n    } = snack;\n\n    const icon = iconVariant[variant];\n\n    const ariaAttributes = {\n        'aria-describedby': 'client-snackbar',\n        ...otherAriaAttributes,\n        ...singleAriaAttributes,\n    };\n\n    const transitionProps = {\n        direction: getTransitionDirection(anchorOrigin),\n        ...otherTransitionProps,\n        ...singleTransitionProps,\n        onExited: handleExitedScreen,\n    };\n\n    let finalAction = singleAction || action;\n    if (typeof finalAction === 'function') {\n        // @ts-ignore\n        finalAction = finalAction(key);\n    }\n\n    let snackContent = singleContent || content;\n    if (snackContent && typeof snackContent === 'function') {\n        snackContent = snackContent(key, snack.message);\n    }\n\n    return (\n        <Collapse\n            unmountOnExit\n            timeout={175}\n            in={collapsed}\n            classes={omitNonCollapseKeys(classes, dense)}\n            onExited={callbacks.onExited}\n        >\n            <Snackbar\n                // @ts-ignore\n                TransitionComponent={TransitionComponent}\n                {...other}\n                {...singleSnackProps}\n                open={snack.open}\n                anchorOrigin={anchorOrigin}\n                TransitionProps={transitionProps}\n                classes={omitNonMuiKeys(classes)}\n                onClose={handleClose}\n                onExit={callbacks.onExit}\n                onExiting={callbacks.onExiting}\n                onEnter={callbacks.onEnter}\n                onEntering={callbacks.onEntering}\n                // order matters. first callbacks.onEntered to set entered: true,\n                // then handleEntered to check if there's a request for closing\n                onEntered={createChainedFunction([callbacks.onEntered, handleEntered])}\n            >\n                {/* @ts-ignore */}\n                {snackContent || (\n                    <SnackbarContent\n                        {...ariaAttributes}\n                        role=\"alert\"\n                        className={clsx(\n                            classes.contentRoot,\n                            { [classes.lessPadding]: !hideIconVariant && icon },\n                            classes[`variant${capitalise(variant)}` as VariantClassKey],\n                            otherClassName,\n                            singleClassName\n                        )}\n                    >\n                        <div id={ariaAttributes['aria-describedby']} className={classes.message}>\n                            {!hideIconVariant ? icon : null}\n                            {snack.message}\n                        </div>\n                        {finalAction && (\n                            <div className={classes.action}>{finalAction}</div>\n                        )}\n                    </SnackbarContent>\n                )}\n            </Snackbar>\n        </Collapse>\n    );\n};\n\nexport default withStyles(styles)(SnackbarItem);\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SNACKBAR_INDENTS } from './utils/constants';\nimport { SnackbarProviderProps } from '.';\n\nconst useStyle = makeStyles(theme => ({\n    root: {\n        boxSizing: 'border-box',\n        display: 'flex',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        position: 'fixed',\n        flexDirection: 'column',\n        zIndex: theme.zIndex.snackbar,\n        height: 'auto',\n        width: 'auto',\n        minWidth: 288,\n        transition: theme.transitions.create(['top', 'right', 'bottom', 'left'], { easing: 'ease' }),\n        [theme.breakpoints.down('xs')]: {\n            left: '0 !important',\n            right: '0 !important',\n            width: '100%',\n        },\n    },\n    reverseColumns: { flexDirection: 'column-reverse' },\n\n    top: { top: SNACKBAR_INDENTS.view.default - SNACKBAR_INDENTS.snackbar.default },\n    topDense: { top: SNACKBAR_INDENTS.view.dense - SNACKBAR_INDENTS.snackbar.dense },\n\n    bottom: { bottom: SNACKBAR_INDENTS.view.default - SNACKBAR_INDENTS.snackbar.default },\n    bottomDense: { bottom: SNACKBAR_INDENTS.view.dense - SNACKBAR_INDENTS.snackbar.dense },\n\n    left: { left: SNACKBAR_INDENTS.view.default },\n    leftDense: { left: SNACKBAR_INDENTS.view.dense },\n\n    right: { right: SNACKBAR_INDENTS.view.default },\n    rightDense: { right: SNACKBAR_INDENTS.view.dense },\n\n    center: {\n        left: '50%',\n        transform: 'translateX(-50%)',\n        [theme.breakpoints.down('xs')]: {\n            transform: 'translateX(0)',\n        },\n    },\n}));\n\n\ninterface SnackbarContainerProps {\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n    dense: SnackbarProviderProps['dense'];\n    anchorOrigin: NonNullable<SnackbarProviderProps['anchorOrigin']>;\n}\n\nconst SnackbarContainer: React.FC<SnackbarContainerProps> = (props) => {\n    const classes = useStyle();\n    const { className, anchorOrigin, dense, ...other } = props;\n\n    const combinedClassname = clsx(\n        classes.root,\n        classes[anchorOrigin.vertical],\n        classes[anchorOrigin.horizontal],\n        // @ts-ignore\n        classes[`${anchorOrigin.vertical}${dense ? 'Dense' : ''}`],\n        // @ts-ignore\n        classes[`${anchorOrigin.horizontal}${dense ? 'Dense' : ''}`],\n        { [classes.reverseColumns]: anchorOrigin.vertical === 'bottom' },\n        className,\n    );\n\n    return (\n        <div className={combinedClassname} {...other} />\n    );\n};\n\nexport default React.memo(SnackbarContainer);\n","import React from 'react';\nimport SvgIcon, { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport { IconVariant } from '../index';\n\ntype Icon = (props: SvgIconProps) => JSX.Element;\n\nconst CheckIcon: Icon = props => (\n    <SvgIcon {...props}>\n        <path d=\"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z\" />\n    </SvgIcon>\n);\n\nconst WarningIcon: Icon = props => (\n    <SvgIcon {...props}>\n        <path d=\"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\" />\n    </SvgIcon>\n);\n\nconst ErrorIcon: Icon = props => (\n    <SvgIcon {...props}>\n        <path d=\"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\" />\n    </SvgIcon>\n);\n\nconst InfoIcon: Icon = props => (\n    <SvgIcon {...props}>\n        <path d=\"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\n        0 22,12A10,10 0 0,0 12,2Z\" />\n    </SvgIcon>\n);\n\nconst iconStyles = {\n    fontSize: 20,\n    marginInlineEnd: 8,\n};\n\nconst defaultIconVariants: Omit<IconVariant, 'default'> = {\n    success: <CheckIcon style={iconStyles} />,\n    warning: <WarningIcon style={iconStyles} />,\n    error: <ErrorIcon style={iconStyles} />,\n    info: <InfoIcon style={iconStyles} />,\n};\n\nexport default defaultIconVariants;\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport clsx from 'clsx';\nimport SnackbarContext from './SnackbarContext';\nimport { MESSAGES, REASONS, originKeyExtractor, omitContainerKeys, merge, DEFAULTS, isDefined } from './utils/constants';\nimport SnackbarItem from './SnackbarItem';\nimport SnackbarContainer from './SnackbarContainer';\nimport warning from './utils/warning';\nimport defaultIconVariants from './utils/defaultIconVariants';\nimport { SnackbarProviderProps, ContainerClassKey, SnackbarKey, SnackbarMessage, OptionsObject, RequiredBy, ProviderContext, TransitionHandlerProps } from '.';\nimport createChainedFunction from './utils/createChainedFunction';\n\n\ntype Reducer = (state: State) => State;\ntype SnacksByPosition = { [key: string]: Snack[] };\n\nexport interface Snack extends RequiredBy<OptionsObject, 'key' | 'variant' | 'anchorOrigin'> {\n    message: SnackbarMessage;\n    open: boolean;\n    entered: boolean;\n    requestClose: boolean;\n}\n\ninterface State {\n    snacks: Snack[];\n    queue: Snack[];\n    contextValue: ProviderContext;\n}\n\nclass SnackbarProvider extends Component<SnackbarProviderProps, State> {\n    constructor(props: SnackbarProviderProps) {\n        super(props);\n        this.state = {\n            snacks: [],\n            queue: [], // eslint-disable-line react/no-unused-state\n            contextValue: {\n                enqueueSnackbar: this.enqueueSnackbar,\n                closeSnackbar: this.closeSnackbar,\n            },\n        };\n    }\n\n    get maxSnack(): number {\n        return this.props.maxSnack || 3;\n    }\n\n    /**\n     * Adds a new snackbar to the queue to be presented.\n     * Returns generated or user defined key referencing the new snackbar or null\n     */\n    enqueueSnackbar = (message: SnackbarMessage, { key, preventDuplicate, ...options }: OptionsObject = {}): SnackbarKey => {\n        const hasSpecifiedKey = isDefined(key);\n        const id = hasSpecifiedKey ? (key as SnackbarKey) : new Date().getTime() + Math.random();\n\n        const merger = merge(options, this.props, DEFAULTS);\n        const snack: Snack = {\n            key: id,\n            ...options,\n            message,\n            open: true,\n            entered: false,\n            requestClose: false,\n            variant: merger('variant'),\n            anchorOrigin: merger('anchorOrigin'),\n            autoHideDuration: merger('autoHideDuration'),\n        };\n\n        if (options.persist) {\n            snack.autoHideDuration = undefined;\n        }\n\n        this.setState((state) => {\n            if ((preventDuplicate === undefined && this.props.preventDuplicate) || preventDuplicate) {\n                const compareFunction = (item: Snack): boolean => (\n                    hasSpecifiedKey ? item.key === key : item.message === message\n                );\n\n                const inQueue = state.queue.findIndex(compareFunction) > -1;\n                const inView = state.snacks.findIndex(compareFunction) > -1;\n                if (inQueue || inView) {\n                    return state;\n                }\n            }\n\n            return this.handleDisplaySnack({\n                ...state,\n                queue: [...state.queue, snack],\n            });\n        });\n\n        return id;\n    };\n\n    /**\n     * Reducer: Display snack if there's space for it. Otherwise, immediately\n     * begin dismissing the oldest message to start showing the new one.\n     */\n    handleDisplaySnack: Reducer = (state) => {\n        const { snacks } = state;\n        if (snacks.length >= this.maxSnack) {\n            return this.handleDismissOldest(state);\n        }\n        return this.processQueue(state);\n    };\n\n    /**\n     * Reducer: Display items (notifications) in the queue if there's space for them.\n     */\n    processQueue: Reducer = (state) => {\n        const { queue, snacks } = state;\n        if (queue.length > 0) {\n            return {\n                ...state,\n                snacks: [...snacks, queue[0]],\n                queue: queue.slice(1, queue.length),\n            };\n        }\n        return state;\n    };\n\n    /**\n     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.\n     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).\n     *\n     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.\n     * Note 2: If the oldest message has not yet entered the screen, only a request to close the\n     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.\n     */\n    handleDismissOldest: Reducer = (state) => {\n        if (state.snacks.some(item => !item.open || item.requestClose)) {\n            return state;\n        }\n\n        let popped = false;\n        let ignore = false;\n\n        const persistentCount = state.snacks.reduce((acc, current) => (\n            acc + (current.open && current.persist ? 1 : 0)\n        ), 0);\n\n        if (persistentCount === this.maxSnack) {\n            warning(MESSAGES.NO_PERSIST_ALL);\n            ignore = true;\n        }\n\n        const snacks = state.snacks.map((item) => {\n            if (!popped && (!item.persist || ignore)) {\n                popped = true;\n\n                if (!item.entered) {\n                    return {\n                        ...item,\n                        requestClose: true,\n                    };\n                }\n\n                if (item.onClose) item.onClose(null, REASONS.MAXSNACK, item.key);\n                if (this.props.onClose) this.props.onClose(null, REASONS.MAXSNACK, item.key);\n\n                return {\n                    ...item,\n                    open: false,\n                };\n            }\n\n            return { ...item };\n        });\n\n        return { ...state, snacks };\n    };\n\n    /**\n     * Set the entered state of the snackbar with the given key.\n     */\n    handleEnteredSnack: TransitionHandlerProps['onEntered'] = (node, isAppearing, key) => {\n        if (!isDefined(key)) {\n            throw new Error('handleEnteredSnack Cannot be called with undefined key');\n        }\n\n        this.setState(({ snacks }) => ({\n            snacks: snacks.map(item => (\n                item.key === key ? { ...item, entered: true } : { ...item }\n            )),\n        }));\n    }\n\n    /**\n     * Hide a snackbar after its timeout.\n     */\n    handleCloseSnack: TransitionHandlerProps['onClose'] = (event, reason, key) => {\n        if (this.props.onClose) {\n            this.props.onClose(event, reason, key);\n        }\n\n        if (reason === REASONS.CLICKAWAY) return;\n        const shouldCloseAll = key === undefined;\n\n        this.setState(({ snacks, queue }) => ({\n            snacks: snacks.map((item) => {\n                if (!shouldCloseAll && item.key !== key) {\n                    return { ...item };\n                }\n\n                return item.entered\n                    ? { ...item, open: false }\n                    : { ...item, requestClose: true };\n            }),\n            queue: queue.filter(item => item.key !== key), // eslint-disable-line react/no-unused-state\n        }));\n    };\n\n    /**\n     * Close snackbar with the given key\n     */\n    closeSnackbar: ProviderContext['closeSnackbar'] = (key) => {\n        // call individual snackbar onClose callback passed through options parameter\n        const toBeClosed = this.state.snacks.find(item => item.key === key);\n        if (isDefined(key) && toBeClosed && toBeClosed.onClose) {\n            toBeClosed.onClose(null, REASONS.INSTRUCTED, key);\n        }\n\n        this.handleCloseSnack(null, REASONS.INSTRUCTED, key);\n    }\n\n    /**\n     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),\n     * it leaves the screen and immediately after leaving animation is done, this method\n     * gets called. We remove the hidden snackbar from state and then display notifications\n     * waiting in the queue (if any). If after this process the queue is not empty, the\n     * oldest message is dismissed.\n     */\n    // @ts-ignore\n    handleExitedSnack: TransitionHandlerProps['onExited'] = (event, key1, key2) => {\n        const key = key1 || key2;\n        if (!isDefined(key)) {\n            throw new Error('handleExitedSnack Cannot be called with undefined key');\n        }\n\n        this.setState((state) => {\n            const newState = this.processQueue({\n                ...state,\n                snacks: state.snacks.filter(item => item.key !== key),\n            });\n\n            if (newState.queue.length === 0) {\n                return newState;\n            }\n\n            return this.handleDismissOldest(newState);\n        });\n    };\n\n    render(): JSX.Element {\n        const { contextValue } = this.state;\n        const {\n            variant,\n            maxSnack,\n            anchorOrigin,\n            preventDuplicate,\n            domRoot,\n            children,\n            classes = {},\n            dense = false,\n            hideIconVariant = false,\n            ...props\n        } = this.props;\n\n        const categ = this.state.snacks.reduce<SnacksByPosition>((acc, current) => {\n            const category = originKeyExtractor(current.anchorOrigin);\n            const existingOfCategory = acc[category] || [];\n            return {\n                ...acc,\n                [category]: [...existingOfCategory, current],\n            };\n        }, {});\n\n        const iconVariant = {\n            ...defaultIconVariants,\n            ...this.props.iconVariant,\n        };\n\n        const snackbars = Object.keys(categ).map((origin) => {\n            const snacks = categ[origin];\n            return (\n                <SnackbarContainer\n                    key={origin}\n                    dense={dense}\n                    anchorOrigin={snacks[0].anchorOrigin}\n                    className={clsx(\n                        classes.containerRoot,\n                        classes[`containerAnchorOrigin${origin}` as ContainerClassKey],\n                    )}\n                >\n                    {snacks.map(snack => (\n                        <SnackbarItem\n                            {...props}\n                            key={snack.key}\n                            dense={dense}\n                            snack={snack}\n                            hideIconVariant={hideIconVariant}\n                            iconVariant={iconVariant}\n                            classes={omitContainerKeys(classes)}\n                            onClose={this.handleCloseSnack}\n                            onExited={createChainedFunction([this.handleExitedSnack, this.props.onExited])}\n                            onEntered={createChainedFunction([this.handleEnteredSnack, this.props.onEntered])}\n                        />\n                    ))}\n                </SnackbarContainer>\n            );\n        });\n\n        return (\n            <SnackbarContext.Provider value={contextValue}>\n                {children}\n                {domRoot ? createPortal(snackbars, domRoot) : snackbars}\n            </SnackbarContext.Provider>\n        );\n    }\n}\n\nexport default SnackbarProvider;\n","import { useContext } from 'react';\nimport SnackbarContext from './SnackbarContext';\nimport { ProviderContext } from '.';\n\nexport default (): ProviderContext => useContext(SnackbarContext);\n"],"sourceRoot":""}