(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[128],{3145:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),i=n(359),l=n(408),c=n(407),s=n(406),o=n(31),m=n(23),d=n(167),u=n(337),h=n(226),f=n(498),b=n(500),g=n(532),k=n(270),p=n(122),C=Object(d.a)((function(e){return{root:{margin:"auto"},paper:{width:200,height:230,overflow:"auto"},button:{margin:e.spacing(.5,0)}}}));function v(e,t){return e.filter((function(e){return-1===t.indexOf(e)}))}function L(e,t){return e.filter((function(e){return-1!==t.indexOf(e)}))}function I(){var e=C(),t=a.a.useState([]),n=Object(m.a)(t,2),r=n[0],l=n[1],c=a.a.useState([0,1,2,3]),s=Object(m.a)(c,2),d=s[0],I=s[1],x=a.a.useState([4,5,6,7]),E=Object(m.a)(x,2),O=E[0],y=E[1],R=L(r,d),G=L(r,O),N=function(e){return function(){var t=r.indexOf(e),n=Object(o.a)(r);-1===t?n.push(e):n.splice(t,1),l(n)}},S=function(t){return a.a.createElement(p.a,{className:e.paper},a.a.createElement(u.a,{dense:!0,component:"div",role:"list"},t.map((function(e){var t="transfer-list-item-".concat(e,"-label");return a.a.createElement(h.a,{key:e,role:"listitem",button:!0,onClick:N(e)},a.a.createElement(f.a,null,a.a.createElement(g.a,{checked:-1!==r.indexOf(e),tabIndex:-1,disableRipple:!0,inputProps:{"aria-labelledby":t}})),a.a.createElement(b.a,{id:t,primary:"List item ".concat(e+1)}))})),a.a.createElement(h.a,null)))};return a.a.createElement(i.a,{container:!0,spacing:2,justify:"center",alignItems:"center",className:e.root},a.a.createElement(i.a,{item:!0},S(d)),a.a.createElement(i.a,{item:!0},a.a.createElement(i.a,{container:!0,direction:"column",alignItems:"center"},a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){y(O.concat(d)),I([])},disabled:0===d.length,"aria-label":"move all right"},"\u226b"),a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){y(O.concat(R)),I(v(d,R)),l(v(r,R))},disabled:0===R.length,"aria-label":"move selected right"},">"),a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){I(d.concat(G)),y(v(O,G)),l(v(r,G))},disabled:0===G.length,"aria-label":"move selected left"},"<"),a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){I(d.concat(O)),y([])},disabled:0===O.length,"aria-label":"move all left"},"\u226a"))),a.a.createElement(i.a,{item:!0},S(O)))}var x=n(356),E=n(357),O=n(485),y=Object(d.a)((function(e){return{root:{margin:"auto"},cardHeader:{padding:e.spacing(1,2)},list:{width:200,height:230,backgroundColor:e.palette.background.paper,overflow:"auto"},button:{margin:e.spacing(.5,0)}}}));function R(e,t){return e.filter((function(e){return-1===t.indexOf(e)}))}function G(e,t){return e.filter((function(e){return-1!==t.indexOf(e)}))}function N(){var e=y(),t=a.a.useState([]),n=Object(m.a)(t,2),r=n[0],l=n[1],c=a.a.useState([0,1,2,3]),s=Object(m.a)(c,2),d=s[0],p=s[1],C=a.a.useState([4,5,6,7]),v=Object(m.a)(C,2),L=v[0],I=v[1],N=G(r,d),S=G(r,L),w=function(e){return function(){var t=r.indexOf(e),n=Object(o.a)(r);-1===t?n.push(e):n.splice(t,1),l(n)}},T=function(e){return G(r,e).length},j=function(e){return function(){var t,n;T(e)===e.length?l(R(r,e)):l((t=r,n=e,[].concat(Object(o.a)(t),Object(o.a)(R(n,t)))))}},B=function(t,n){return a.a.createElement(x.a,null,a.a.createElement(E.a,{className:e.cardHeader,avatar:a.a.createElement(g.a,{onClick:j(n),checked:T(n)===n.length&&0!==n.length,indeterminate:T(n)!==n.length&&0!==T(n),disabled:0===n.length,inputProps:{"aria-label":"all items selected"}}),title:t,subheader:"".concat(T(n),"/").concat(n.length," selected")}),a.a.createElement(O.a,null),a.a.createElement(u.a,{className:e.list,dense:!0,component:"div",role:"list"},n.map((function(e){var t="transfer-list-all-item-".concat(e,"-label");return a.a.createElement(h.a,{key:e,role:"listitem",button:!0,onClick:w(e)},a.a.createElement(f.a,null,a.a.createElement(g.a,{checked:-1!==r.indexOf(e),tabIndex:-1,disableRipple:!0,inputProps:{"aria-labelledby":t}})),a.a.createElement(b.a,{id:t,primary:"List item ".concat(e+1)}))})),a.a.createElement(h.a,null)))};return a.a.createElement(i.a,{container:!0,spacing:2,justify:"center",alignItems:"center",className:e.root},a.a.createElement(i.a,{item:!0},B("Choices",d)),a.a.createElement(i.a,{item:!0},a.a.createElement(i.a,{container:!0,direction:"column",alignItems:"center"},a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){I(L.concat(N)),p(R(d,N)),l(R(r,N))},disabled:0===N.length,"aria-label":"move selected right"},">"),a.a.createElement(k.a,{variant:"outlined",size:"small",className:e.button,onClick:function(){p(d.concat(S)),I(R(L,S)),l(R(r,S))},disabled:0===S.length,"aria-label":"move selected left"},"<"))),a.a.createElement(i.a,{item:!0},B("Chosen",L)))}t.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(c.a,{title:"Transfer List",description:"transfer list (or shuttle) enables the user to move one or more list items between lists.",refUrl:"https://material-ui.com/components/transfer-list/"}),a.a.createElement(s.a,null,a.a.createElement(i.a,{item:!0,xs:12,lg:6},a.a.createElement(l.a,{title:"Simple Transfer List",component:I,source:"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  paper: {\r\n    width: 200,\r\n    height: 230,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nexport default function TransferList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleAllRight = () => {\r\n    setRight(right.concat(left));\r\n    setLeft([]);\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const handleAllLeft = () => {\r\n    setLeft(left.concat(right));\r\n    setRight([]);\r\n  };\r\n\r\n  const customList = (items) => (\r\n    <Paper className={classes.paper}>\r\n      <List dense component='div' role='list'>\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{'aria-labelledby': labelId}}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify='center'\r\n      alignItems='center'\r\n      className={classes.root}>\r\n      <Grid item>{customList(left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleAllRight}\r\n            disabled={left.length === 0}\r\n            aria-label='move all right'>\r\n            \u226b\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'>\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'>\r\n            &lt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleAllLeft}\r\n            disabled={right.length === 0}\r\n            aria-label='move all left'>\r\n            \u226a\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList(right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n",description:"For completeness, this example includes buttons for move all, but not every transfer list needs these."})),a.a.createElement(i.a,{item:!0,xs:12,lg:6},a.a.createElement(l.a,{title:"Enhanced Transfer List",component:N,source:"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 200,\r\n    height: 230,\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nexport default function TransferList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState([0, 1, 2, 3]);\r\n  const [right, setRight] = React.useState([4, 5, 6, 7]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = (items) => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = (items) => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n  const customList = (title, items) => (\r\n    <Card>\r\n      <CardHeader\r\n        className={classes.cardHeader}\r\n        avatar={\r\n          <Checkbox\r\n            onClick={handleToggleAll(items)}\r\n            checked={\r\n              numberOfChecked(items) === items.length && items.length !== 0\r\n            }\r\n            indeterminate={\r\n              numberOfChecked(items) !== items.length &&\r\n              numberOfChecked(items) !== 0\r\n            }\r\n            disabled={items.length === 0}\r\n            inputProps={{'aria-label': 'all items selected'}}\r\n          />\r\n        }\r\n        title={title}\r\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n      />\r\n      <Divider />\r\n      <List className={classes.list} dense component='div' role='list'>\r\n        {items.map((value) => {\r\n          const labelId = `transfer-list-all-item-${value}-label`;\r\n\r\n          return (\r\n            <ListItem\r\n              key={value}\r\n              role='listitem'\r\n              button\r\n              onClick={handleToggle(value)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{'aria-labelledby': labelId}}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify='center'\r\n      alignItems='center'\r\n      className={classes.root}>\r\n      <Grid item>{customList('Choices', left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction='column' alignItems='center'>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label='move selected right'>\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            variant='outlined'\r\n            size='small'\r\n            className={classes.button}\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label='move selected left'>\r\n            &lt;\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList('Chosen', right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n",description:"This example exchanges the move all buttons for a select all / select none checkbox, and adds a counter."}))))}}}]);
//# sourceMappingURL=128.58bea30f.chunk.js.map