(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[123],{3089:function(e,n,r){"use strict";r.r(n);var t=r(0),a=r.n(t),o=r(359),i=r(408),l=r(407),c=r(406),s=r(23),m=r(167),u=r(270),p=r(284),d=r(337),g=r(226),f=r(275),h=r(500),C=r(484),D=r(480),y=r(138),b=r.n(y),v=r(1448),E=r.n(v),T=r(82),x=r(195),k=["username@gmail.com","user02@gmail.com"],S=Object(m.a)({avatar:{backgroundColor:x.a[100],color:x.a[600]}});function B(e){var n=S(),r=e.onClose,t=e.selectedValue,o=e.open;function i(e){r(e)}return a.a.createElement(D.a,{onClose:function(){r(t)},"aria-labelledby":"simple-dialog-title",open:o},a.a.createElement(C.a,{id:"simple-dialog-title"},"Set backup account"),a.a.createElement(d.a,null,k.map((function(e){return a.a.createElement(g.a,{button:!0,onClick:function(){return i(e)},key:e},a.a.createElement(f.a,null,a.a.createElement(p.a,{className:n.avatar},a.a.createElement(b.a,null))),a.a.createElement(h.a,{primary:e}))})),a.a.createElement(g.a,{button:!0,onClick:function(){return i("addAccount")}},a.a.createElement(f.a,null,a.a.createElement(p.a,null,a.a.createElement(E.a,null))),a.a.createElement(h.a,{primary:"add account"}))))}function O(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1],o=a.a.useState(k[1]),i=Object(s.a)(o,2),l=i[0],c=i[1];return a.a.createElement("div",null,a.a.createElement(T.a,{variant:"subtitle1"},"Selected: ",l),a.a.createElement("br",null),a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Open simple dialog"),a.a.createElement(B,{selectedValue:l,open:r,onClose:function(e){t(!1),c(e)}}))}var A=r(481),I=r(482),w=r(483);function L(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1];function o(){t(!1)}return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Open alert dialog"),a.a.createElement(D.a,{open:r,onClose:o,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description"},a.a.createElement(C.a,{id:"alert-dialog-title"},"Use Google's location service?"),a.a.createElement(I.a,null,a.a.createElement(w.a,{id:"alert-dialog-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:o,color:"primary"},"Disagree"),a.a.createElement(u.a,{onClick:o,color:"primary",autoFocus:!0},"Agree"))))}var M=r(364),W=a.a.forwardRef((function(e,n){return a.a.createElement(M.a,Object.assign({direction:"up",ref:n},e))}));function F(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1];function o(){t(!1)}return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Slide in alert dialog"),a.a.createElement(D.a,{open:r,TransitionComponent:W,keepMounted:!0,onClose:o,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description"},a.a.createElement(C.a,{id:"alert-dialog-slide-title"},"Use Google's location service?"),a.a.createElement(I.a,null,a.a.createElement(w.a,{id:"alert-dialog-slide-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:o,color:"primary"},"Disagree"),a.a.createElement(u.a,{onClick:o,color:"primary"},"Agree"))))}var R=r(522);function j(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1];function o(){t(!1)}return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Open form dialog"),a.a.createElement(D.a,{open:r,onClose:o,"aria-labelledby":"form-dialog-title"},a.a.createElement(C.a,{id:"form-dialog-title"},"Subscribe"),a.a.createElement(I.a,null,a.a.createElement(w.a,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally."),a.a.createElement(R.a,{autoFocus:!0,margin:"dense",id:"name",label:"Email Address",type:"email",fullWidth:!0})),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:o,color:"primary"},"Cancel"),a.a.createElement(u.a,{onClick:o,color:"primary"},"Subscribe"))))}var P=r(10),G=r(197),N=r(150),V=r.n(N),q=Object(P.a)((function(e){return{root:{margin:0,padding:e.spacing(2)},closeButton:{position:"absolute",right:e.spacing(1),top:e.spacing(1),color:e.palette.grey[500]}}}))((function(e){var n=e.children,r=e.classes,t=e.onClose;return a.a.createElement(C.a,{disableTypography:!0,className:r.root},a.a.createElement(T.a,{variant:"h6"},n),t?a.a.createElement(G.a,{"aria-label":"close",className:r.closeButton,onClick:t},a.a.createElement(V.a,null)):null)})),z=Object(P.a)((function(e){return{root:{padding:e.spacing(2)}}}))(I.a),Y=Object(P.a)((function(e){return{root:{margin:0,padding:e.spacing(1)}}}))(A.a);function U(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1],o=function(){t(!1)};return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"secondary",onClick:function(){t(!0)}},"Open dialog"),a.a.createElement(D.a,{onClose:o,"aria-labelledby":"customized-dialog-title",open:r},a.a.createElement(q,{id:"customized-dialog-title",onClose:o},"Modal title"),a.a.createElement(z,{dividers:!0},a.a.createElement(T.a,{gutterBottom:!0},"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros."),a.a.createElement(T.a,{gutterBottom:!0},"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor."),a.a.createElement(T.a,{gutterBottom:!0},"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.")),a.a.createElement(Y,null,a.a.createElement(u.a,{onClick:o,color:"primary"},"Save changes"))))}var Q="import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const {children, classes, onClose} = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root}>\r\n      <Typography variant='h6'>{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label='close'\r\n          className={classes.closeButton}\r\n          onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='secondary' onClick={handleClickOpen}>\r\n        Open dialog\r\n      </Button>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby='customized-dialog-title'\r\n        open={open}>\r\n        <DialogTitle id='customized-dialog-title' onClose={handleClose}>\r\n          Modal title\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>\r\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\r\n            ac consectetur ac, vestibulum at eros.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\r\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\r\n            auctor.\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo\r\n            cursus magna, vel scelerisque nisl consectetur et. Donec sed odio\r\n            dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",H=r(485),J=r(470),K=r(519),X=Object(m.a)((function(e){return{appBar:{position:"relative"},title:{marginLeft:e.spacing(2),flex:1}}})),Z=a.a.forwardRef((function(e,n){return a.a.createElement(M.a,Object.assign({direction:"up",ref:n},e))}));function $(){var e=X(),n=a.a.useState(!1),r=Object(s.a)(n,2),t=r[0],o=r[1];function i(){o(!1)}return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){o(!0)}},"Open full-screen dialog"),a.a.createElement(D.a,{fullScreen:!0,open:t,onClose:i,TransitionComponent:Z},a.a.createElement(J.a,{className:e.appBar},a.a.createElement(K.a,null,a.a.createElement(G.a,{edge:"start",color:"inherit",onClick:i,"aria-label":"close"},a.a.createElement(V.a,null)),a.a.createElement(T.a,{variant:"h6",className:e.title},"Sound"),a.a.createElement(u.a,{color:"inherit",onClick:i},"save"))),a.a.createElement(d.a,null,a.a.createElement(g.a,{button:!0},a.a.createElement(h.a,{primary:"Phone ringtone",secondary:"Titania"})),a.a.createElement(H.a,null),a.a.createElement(g.a,{button:!0},a.a.createElement(h.a,{primary:"Default notification ringtone",secondary:"Tethys"})))))}var _=r(367),ee=r(491),ne=r(371),re=r(456),te=r(380),ae=r(511),oe=Object(m.a)((function(e){return{form:{display:"flex",flexDirection:"column",margin:"auto",width:"fit-content"},formControl:{marginTop:e.spacing(2),minWidth:120},formControlLabel:{marginTop:e.spacing(1)}}}));function ie(){var e=oe(),n=a.a.useState(!1),r=Object(s.a)(n,2),t=r[0],o=r[1],i=a.a.useState(!0),l=Object(s.a)(i,2),c=l[0],m=l[1],p=a.a.useState("sm"),d=Object(s.a)(p,2),g=d[0],f=d[1];function h(){o(!1)}return a.a.createElement(a.a.Fragment,null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){o(!0)}},"Open max-width dialog"),a.a.createElement(D.a,{fullWidth:c,maxWidth:g,open:t,onClose:h,"aria-labelledby":"max-width-dialog-title"},a.a.createElement(C.a,{id:"max-width-dialog-title"},"Optional sizes"),a.a.createElement(I.a,null,a.a.createElement(w.a,null,"You can set my maximum width and whether to adapt or not."),a.a.createElement("form",{className:e.form,noValidate:!0},a.a.createElement(_.a,{className:e.formControl},a.a.createElement(ne.a,{htmlFor:"max-width"},"maxWidth"),a.a.createElement(te.a,{value:g,onChange:function(e){f(e.target.value)},inputProps:{name:"max-width",id:"max-width"}},a.a.createElement(re.a,{value:!1},"false"),a.a.createElement(re.a,{value:"xs"},"xs"),a.a.createElement(re.a,{value:"sm"},"sm"),a.a.createElement(re.a,{value:"md"},"md"),a.a.createElement(re.a,{value:"lg"},"lg"),a.a.createElement(re.a,{value:"xl"},"xl"))),a.a.createElement(ee.a,{className:e.formControlLabel,control:a.a.createElement(ae.a,{checked:c,onChange:function(e){m(e.target.checked)},value:"fullWidth"}),label:"Full width"}))),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:h,color:"primary"},"Close"))))}var le=r(228),ce=r(40);function se(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1],o=Object(ce.a)(),i=Object(le.a)(o.breakpoints.down("sm"));function l(){t(!1)}return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Open responsive dialog"),a.a.createElement(D.a,{fullScreen:i,open:r,onClose:l,"aria-labelledby":"responsive-dialog-title"},a.a.createElement(C.a,{id:"responsive-dialog-title"},"Use Google's location service?"),a.a.createElement(I.a,null,a.a.createElement(w.a,null,"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:l,color:"primary"},"Disagree"),a.a.createElement(u.a,{onClick:l,color:"primary",autoFocus:!0},"Agree"))))}var me="import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport {useTheme} from '@material-ui/core/styles';\r\n\r\nexport default function ResponsiveDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='responsive-dialog-title'>\r\n        <DialogTitle id='responsive-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary' autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",ue=r(122),pe=r(2349),de=r.n(pe);function ge(e){return a.a.createElement(de.a,{cancel:'[class*="MuiDialogContent-root"]'},a.a.createElement(ue.a,e))}function fe(){var e=a.a.useState(!1),n=Object(s.a)(e,2),r=n[0],t=n[1],o=function(){t(!1)};return a.a.createElement("div",null,a.a.createElement(u.a,{variant:"outlined",color:"primary",onClick:function(){t(!0)}},"Open form dialog"),a.a.createElement(D.a,{open:r,onClose:o,PaperComponent:ge,"aria-labelledby":"draggable-dialog-title"},a.a.createElement(C.a,{style:{cursor:"move"},id:"draggable-dialog-title"},"Subscribe"),a.a.createElement(I.a,null,a.a.createElement(w.a,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally.")),a.a.createElement(A.a,null,a.a.createElement(u.a,{onClick:o,color:"primary"},"Cancel"),a.a.createElement(u.a,{onClick:o,color:"primary"},"Subscribe"))))}n.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(l.a,{title:"Dialogs",description:"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.",refUrl:"https://material-ui.com/components/dialogs/"}),a.a.createElement(c.a,null,a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Simple Dialogs",component:O,source:"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {blue} from '@material-ui/core/colors';\r\n\r\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const {onClose, selectedValue, open} = props;\r\n\r\n  function handleClose() {\r\n    onClose(selectedValue);\r\n  }\r\n\r\n  function handleListItemClick(value) {\r\n    onClose(value);\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby='simple-dialog-title'\r\n      open={open}>\r\n      <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\r\n      <List>\r\n        {emails.map((email) => (\r\n          <ListItem\r\n            button\r\n            onClick={() => handleListItemClick(email)}\r\n            key={email}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.avatar}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={email} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem button onClick={() => handleListItemClick('addAccount')}>\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary='add account' />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function SimpleDialogDemo() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant='subtitle1'>Selected: {selectedValue}</Typography>\r\n      <br />\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open simple dialog\r\n      </Button>\r\n      <SimpleDialog\r\n        selectedValue={selectedValue}\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",description:"Simple dialogs can provide additional details or actions about a list item. For example, they can display avatars, icons, clarifying subtext, or orthogonal actions (such as adding an account)"})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Alerts Dialogs",component:L,source:"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function AlertDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-title'\r\n        aria-describedby='alert-dialog-description'>\r\n        <DialogTitle id='alert-dialog-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary' autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",description:"Alerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Transitions",component:F,source:"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AlertDialogSlide() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Slide in alert dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-slide-title'\r\n        aria-describedby='alert-dialog-slide-description'>\r\n        <DialogTitle id='alert-dialog-slide-title'>\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-slide-description'>\r\n            Let Google help apps determine location. This means sending\r\n            anonymous location data to Google, even when no apps are running.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",description:"You can also swap out the transition, the next example uses Slide."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Form dialogs",component:j,source:"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function FormDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open form dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'>\r\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            label='Email Address'\r\n            type='email'\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",description:"Form dialogs allow users to fill out form fields within a dialog. For example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'. "})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Customized dialogs",component:U,source:Q,description:"Here is an example of customizing the component. You can learn more about this in the overrides documentation page."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Customized dialogs",component:U,source:Q,description:"Here is an example of customizing the component. You can learn more about this in the overrides documentation page."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Full Screen Dialogs",component:$,source:"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open full-screen dialog\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge='start'\r\n              color='inherit'\r\n              onClick={handleClose}\r\n              aria-label='close'>\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant='h6' className={classes.title}>\r\n              Sound\r\n            </Typography>\r\n            <Button color='inherit' onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem button>\r\n            <ListItemText primary='Phone ringtone' secondary='Titania' />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem button>\r\n            <ListItemText\r\n              primary='Default notification ringtone'\r\n              secondary='Tethys'\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n"})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Optional sizes",component:ie,source:"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    width: 'fit-content',\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function MaxWidthDialog() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [fullWidth, setFullWidth] = React.useState(true);\r\n  const [maxWidth, setMaxWidth] = React.useState('sm');\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleMaxWidthChange(event) {\r\n    setMaxWidth(event.target.value);\r\n  }\r\n\r\n  function handleFullWidthChange(event) {\r\n    setFullWidth(event.target.checked);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open max-width dialog\r\n      </Button>\r\n      <Dialog\r\n        fullWidth={fullWidth}\r\n        maxWidth={maxWidth}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='max-width-dialog-title'>\r\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You can set my maximum width and whether to adapt or not.\r\n          </DialogContentText>\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\r\n              <Select\r\n                value={maxWidth}\r\n                onChange={handleMaxWidthChange}\r\n                inputProps={{\r\n                  name: 'max-width',\r\n                  id: 'max-width',\r\n                }}>\r\n                <MenuItem value={false}>false</MenuItem>\r\n                <MenuItem value='xs'>xs</MenuItem>\r\n                <MenuItem value='sm'>sm</MenuItem>\r\n                <MenuItem value='md'>md</MenuItem>\r\n                <MenuItem value='lg'>lg</MenuItem>\r\n                <MenuItem value='xl'>xl</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControlLabel\r\n              className={classes.formControlLabel}\r\n              control={\r\n                <Switch\r\n                  checked={fullWidth}\r\n                  onChange={handleFullWidthChange}\r\n                  value='fullWidth'\r\n                />\r\n              }\r\n              label='Full width'\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n",description:"You can set a dialog maximum width by using the maxWidth enumerable in combination with the fullWidth boolean. When the fullWidth property is true, the dialog will adapt based on the maxWidth value."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Responsive full-screen",component:se,source:me,description:"You may make a dialog responsively full screen using useMediaQuery."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Confirmation dialogs",component:se,source:me,description:"Confirmation dialogs require users to explicitly confirm their choice before an option is committed."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Scrolling long content",component:se,source:me,description:"When dialogs become too long for the user\u2019s viewport or device, they scroll.."})),a.a.createElement(o.a,{item:!0,xs:12,lg:6},a.a.createElement(i.a,{title:"Draggable dialog",component:fe,source:"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Draggable from 'react-draggable';\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function DraggableDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant='outlined' color='primary' onClick={handleClickOpen}>\r\n        Open form dialog\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby='draggable-dialog-title'>\r\n        <DialogTitle style={{cursor: 'move'}} id='draggable-dialog-title'>\r\n          Subscribe\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To subscribe to this website, please enter your email address here.\r\n            We will send updates occasionally.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",description:"You can create a draggable dialog by using react-draggable. To do so, you can pass the the imported Draggable component as the PaperComponent of the Dialog component. This will make the entire dialog draggable.."}))))}}}]);
//# sourceMappingURL=123.66b6800f.chunk.js.map