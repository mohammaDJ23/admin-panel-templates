{"version":3,"sources":["@crema/services/db/extraPages/dndData/simpleListData.js","modules/thirdParty/reactBeautifulDnd/Simple/index.js","modules/thirdParty/reactBeautifulDnd/Horizontal/index.js","modules/thirdParty/reactBeautifulDnd/MultipleDrop/index.js","modules/thirdParty/reactBeautifulDnd/WithHooks/index.js","@crema/core/ComponentCard/ComponentCardWithoutAnim.js","modules/thirdParty/reactBeautifulDnd/index.js","webpack:///./src/modules/thirdParty/reactBeautifulDnd/Simple/index.js?aa3d","webpack:///./src/modules/thirdParty/reactBeautifulDnd/WithHooks/index.js?69a2","webpack:///./src/modules/thirdParty/reactBeautifulDnd/MultipleDrop/index.js?57bc","webpack:///./src/modules/thirdParty/reactBeautifulDnd/Horizontal/index.js?4bae"],"names":["dndData","id","name","handle","image","Simple","props","context","state","items","simpleListData","onDragEnd","bind","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","this","source","index","setState","classes","droppableId","droppableProvided","droppableSnapshot","Box","display","flexDirection","alignItems","ref","innerRef","style","isDraggingOver","overflow","border","padding","maxHeight","width","onScroll","e","map","item","key","draggableId","draggableProvided","draggableSnapshot","draggableProps","dragHandleProps","px","mb","clone","ListItem","className","rootList","mr","mt","justifyContent","ListItemAvatar","Avatar","alt","src","my","ListItemText","primary","component","fontWeight","Fonts","MEDIUM","secondary","color","textOverflow","whiteSpace","placeholder","Component","defaultProps","withStyles","theme","backgroundColor","palette","background","paper","Horizontal","slice","direction","provided","snapshot","droppableProps","p","ml","move","droppableSource","droppableDestination","sourceClone","destClone","compose","getListStyle","marginRight","marginBottom","MultipleDrop","selected","id2List","droppable","droppable2","getList","xs","sm","bgcolor","grey","isDragging","draggableStyle","userSelect","margin","LIGHT","useStyles","makeStyles","root","breakpoints","down","QuoteItem","styled","div","Quote","quote","QuoteList","React","memo","quotes","WithHooks","useState","borderRadius","default","cardHeader","paddingLeft","paddingRight","fontSize","BOLD","cardContent","paddingTop","preTag","ComponentCardWithoutAnim","title","description","viewSource","setToggleViewSource","animation","setAnimation","Card","CardHeader","subheader","action","IconButton","aria-label","onClick","setTimeout","CardContent","Collapse","in","Scrollbar","code","language","highlightTheme","tokens","getLineProps","getTokenProps","clsx","line","i","token","ReactBeautifulDnd","ComponentHeader","refUrl","GridContainer","Grid","xl"],"mappings":"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","file":"static/js/148.829c4994.chunk.js","sourcesContent":["const dndData = [\r\n  {\r\n    id: '1000',\r\n    name: 'Aysha Julka',\r\n    handle: 'ayshajulkaji',\r\n    image: '/assets/images/avatar/A1.jpg',\r\n  },\r\n  {\r\n    id: '1001',\r\n    name: 'Ayra Rovishi',\r\n    handle: 'ayrarovishi',\r\n    image: '/assets/images/avatar/A2.jpg',\r\n  },\r\n  {\r\n    id: '1002',\r\n    name: 'Sapna Awasthi',\r\n    handle: 'sapnaawasthi',\r\n    image: '/assets/images/avatar/A3.jpg',\r\n  },\r\n  {\r\n    id: '1003',\r\n    name: 'Sami Rudri',\r\n    handle: 'samirudri',\r\n    image: '/assets/images/avatar/A4.jpg',\r\n  },\r\n  {\r\n    id: '1004',\r\n    name: 'Brian Lara',\r\n    handle: 'brianlara',\r\n    image: '/assets/images/avatar/A5.jpg',\r\n  },\r\n  {\r\n    id: '1005',\r\n    name: 'Rickey Ponting',\r\n    handle: 'rickeyponting',\r\n    image: '/assets/images/avatar/A6.jpg',\r\n  },\r\n  {\r\n    id: '1007',\r\n    name: 'Smriti Mandhana',\r\n    handle: 'smritimandhana',\r\n    image: '/assets/images/avatar/A8.jpg',\r\n  },\r\n  {\r\n    id: '1008',\r\n    name: 'Aysha Julka',\r\n    handle: 'benstokes',\r\n    image: '/assets/images/avatar/A9.jpg',\r\n  },\r\n];\r\nexport default dndData;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = (theme) => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getListStyle = (isDraggingOver, overflow) => ({\r\n  // background: isDraggingOver ? 'lightblue' : 'grey',\r\n  border: '5px solid pink',\r\n  padding: grid,\r\n  maxHeight: '50vh',\r\n  overflow,\r\n  width: 300,\r\n  '@media (min-width: 600px)': {\r\n    width: 300,\r\n  },\r\n});\r\n\r\nclass Simple extends Component {\r\n  static propTypes = {\r\n    overflow: PropTypes.string,\r\n  };\r\n  static defaultProps = {\r\n    overflow: 'auto',\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      items: simpleListData,\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId='droppable'>\r\n          {(droppableProvided, droppableSnapshot) => (\r\n            <Box display='flex' flexDirection='column' alignItems='center'>\r\n              <Box\r\n                ref={droppableProvided.innerRef}\r\n                style={getListStyle(\r\n                  droppableSnapshot.isDraggingOver,\r\n                  this.props.overflow,\r\n                )}\r\n                onScroll={\r\n                  (e) => {}\r\n                  // eslint-disable-next-line no-console\r\n                }>\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable\r\n                    key={item.id}\r\n                    draggableId={item.handle}\r\n                    index={index}>\r\n                    {(draggableProvided, draggableSnapshot) => (\r\n                      <Box\r\n                        ref={draggableProvided.innerRef}\r\n                        {...draggableProvided.draggableProps}\r\n                        {...draggableProvided.dragHandleProps}>\r\n                        <Box px={2} mb={5} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    fontWeight={Fonts.MEDIUM}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {droppableProvided.placeholder}\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Simple);\r\n","import React, {Component} from 'react';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport Box from '@material-ui/core/Box';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = (theme) => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  // background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  border: '5px solid #E0E0E0',\r\n  display: 'flex',\r\n  padding: grid,\r\n  overflow: 'auto',\r\n});\r\n\r\nclass Horizontal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: simpleListData.slice(0, 6),\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId='droppable' direction='horizontal'>\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}>\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable\r\n                  key={item.id}\r\n                  draggableId={item.handle}\r\n                  index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <Box\r\n                      mr={3}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}>\r\n                      <Box p={2} width='16rem' mr={2} clone>\r\n                        <ListItem className={classes.rootList}>\r\n                          <Box\r\n                            mr={3}\r\n                            mt={0}\r\n                            ml={1.5}\r\n                            display='flex'\r\n                            justifyContent='center'\r\n                            clone>\r\n                            <ListItemAvatar>\r\n                              <Avatar alt='Remy Sharp' src={item.image} />\r\n                            </ListItemAvatar>\r\n                          </Box>\r\n                          <Box my={0} clone>\r\n                            <ListItemText\r\n                              primary={\r\n                                <Box component='span' fontWeight={Fonts.MEDIUM}>\r\n                                  {item.name}\r\n                                </Box>\r\n                              }\r\n                              secondary={\r\n                                <Box\r\n                                  component='span'\r\n                                  display='block'\r\n                                  color='text.secondary'>\r\n                                  @{item.handle}\r\n                                </Box>\r\n                              }\r\n                            />\r\n                          </Box>\r\n                        </ListItem>\r\n                      </Box>\r\n                    </Box>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Horizontal);\r\n","import React, {Component} from 'react';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.compose, 1);\r\n\r\n  destClone.splice(droppableDestination.compose, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = (theme) => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid,\r\n  margin: `0 0 20px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : '#E0E0E0',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  border: '5px solid #E0E0E0',\r\n  padding: grid,\r\n  marginRight: 10,\r\n  marginBottom: 20,\r\n  width: 300,\r\n  '@media (min-width: 600px)': {\r\n    width: 300,\r\n  },\r\n});\r\n\r\nclass MultipleDrop extends Component {\r\n  state = {\r\n    items: simpleListData.slice(0, 10),\r\n    selected: simpleListData.slice(5, 10),\r\n  };\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected',\r\n  };\r\n\r\n  getList = (id) => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = (result) => {\r\n    const {source, destination} = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index,\r\n      );\r\n\r\n      let state = {items};\r\n\r\n      if (source.droppableId === 'droppable2') {\r\n        state = {selected: items};\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination,\r\n      );\r\n\r\n      this.setState({\r\n        items: result.droppable,\r\n        selected: result.droppable2,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Box\r\n          display='flex'\r\n          flexDirection={{xs: 'column', sm: 'row'}}\r\n          justifyContent={{sm: 'center'}}\r\n          alignItems='center'>\r\n          <Droppable droppableId='droppable'>\r\n            {(provided, snapshot) => (\r\n              <Box\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable\r\n                    key={item.id}\r\n                    draggableId={item.handle}\r\n                    index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <Box\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}>\r\n                        <Box px={2} bgcolor={grey[300]} mb={5} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              ml={1.5}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    fontWeight={Fonts.MEDIUM}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n          <Droppable droppableId='droppable2'>\r\n            {(provided, snapshot) => (\r\n              <Box\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {this.state.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <Box\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style,\r\n                        )}>\r\n                        <Box p={0} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              ml={1.5}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    fontWeight={Fonts.LIGHT}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n        </Box>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(MultipleDrop);\r\n","import React, {useState} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {makeStyles} from '@material-ui/core';\r\n\r\nconst grid = 8;\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: '100%',\r\n        '& .css-1gwkzgr': {\r\n          width: '100%',\r\n        },\r\n      },\r\n    },\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n});\r\n\r\nconst QuoteItem = styled.div`\r\n  width: 170px;\r\n  margin-bottom: 20px;\r\n  background-color: #e0e0e0;\r\n  padding: ${grid}px;\r\n  @media (min-width: 600px) {\r\n    width: 300px;\r\n  }\r\n`;\r\n\r\nfunction Quote({quote, index}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Draggable draggableId={quote.handle} index={index}>\r\n      {(provided) => (\r\n        <QuoteItem\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}>\r\n          <Box p={0} clone>\r\n            <ListItem className={classes.rootList}>\r\n              <Box\r\n                mr={3}\r\n                mt={0}\r\n                ml={1.5}\r\n                display='flex'\r\n                justifyContent='center'\r\n                clone>\r\n                <ListItemAvatar>\r\n                  <Avatar alt='Remy Sharp' src={quote.image} />\r\n                </ListItemAvatar>\r\n              </Box>\r\n\r\n              <Box my={0} clone>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box component='span' fontWeight={Fonts.MEDIUM}>\r\n                      {quote.name}\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box\r\n                      component='span'\r\n                      display='block'\r\n                      color='text.secondary'\r\n                      overflow='hidden'\r\n                      textOverflow='ellipsis'\r\n                      whiteSpace='nowrap'>\r\n                      @{quote.handle}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </Box>\r\n            </ListItem>\r\n          </Box>\r\n        </QuoteItem>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nconst QuoteList = React.memo(function QuoteList({quotes}) {\r\n  return quotes.map((quote, index) => (\r\n    <Quote quote={quote} index={index} key={quote.id} />\r\n  ));\r\n});\r\n\r\nconst WithHooks = () => {\r\n  const [state, setState] = useState({quotes: simpleListData});\r\n  const classes = useStyles();\r\n\r\n  function onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    if (result.destination.compose === result.source.compose) {\r\n      return;\r\n    }\r\n\r\n    const quotes = reorder(\r\n      state.quotes,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    setState({quotes});\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Box width={1} display='flex' flexDirection='column' alignItems='center'>\r\n        <Box\r\n          className={classes.root}\r\n          border={`solid 4px ${grey[300]}`}\r\n          p={2}\r\n          mb={3}>\r\n          <Droppable droppableId='list'>\r\n            {(provided) => (\r\n              <Box ref={provided.innerRef} {...provided.droppableProps}>\r\n                <QuoteList quotes={state.quotes} />\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n        </Box>\r\n      </Box>\r\n    </DragDropContext>\r\n  );\r\n};\r\nexport default WithHooks;\r\n","import React, {useState} from 'react';\nimport {Card, makeStyles} from '@material-ui/core';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CodeIcon from '@material-ui/icons/Code';\nimport Highlight, {defaultProps} from 'prism-react-renderer';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Scrollbar from '../Scrollbar';\nimport clsx from 'clsx';\nimport {highlightTheme} from './highlightTheme';\nimport Box from '@material-ui/core/Box';\nimport {Fonts} from '../../../shared/constants/AppEnums';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: {\n      borderRadius: 8,\n      padding: 16,\n      backgroundColor: theme.palette.background.default,\n    },\n    cardHeader: {\n      paddingLeft: 32,\n      paddingRight: 32,\n      '& .MuiTypography-h5': {\n        fontSize: 16,\n        fontWeight: Fonts.BOLD,\n        marginBottom: 1,\n      },\n    },\n    cardContent: {\n      paddingLeft: 32,\n      paddingRight: 32,\n      paddingTop: 0,\n    },\n    preTag: {\n      borderRadius: 8,\n      padding: 12,\n    },\n  };\n});\nconst ComponentCardWithoutAnim = ({\n  title,\n  maxHeight,\n  description,\n  component: Component,\n  source,\n}) => {\n  const [viewSource, setToggleViewSource] = useState(false);\n  const [animation, setAnimation] = useState(false);\n\n  const classes = useStyles();\n\n  return (\n    <Card>\n      <CardHeader\n        className={classes.cardHeader}\n        title={title}\n        subheader={description}\n        root={{\n          subheader: {\n            fontSize: 14,\n          },\n        }}\n        action={\n          source ? (\n            <Box mt={2}>\n              <IconButton\n                aria-label='view code'\n                onClick={() => {\n                  if (animation) {\n                    setAnimation(!animation);\n                    setTimeout(() => setToggleViewSource(!viewSource), 400);\n                  } else {\n                    setAnimation(!animation);\n                    setToggleViewSource(!viewSource);\n                  }\n                }}>\n                <CodeIcon />\n              </IconButton>\n            </Box>\n          ) : null\n        }\n      />\n\n      <CardContent className={classes.cardContent}>\n        <Collapse in={animation}>\n          {viewSource ? (\n            <Scrollbar\n              style={{\n                borderRadius: 8,\n                background: '#333333',\n              }}>\n              <Highlight\n                {...defaultProps}\n                code={source}\n                language='jsx'\n                theme={highlightTheme}>\n                {({className, style, tokens, getLineProps, getTokenProps}) => (\n                  <pre\n                    className={clsx(className, classes.preTag)}\n                    style={{...style, maxHeight: 500}}>\n                    {tokens.map((line, i) => (\n                      <Box {...getLineProps({line, key: i})}>\n                        {line.map((token, key) => (\n                          <span {...getTokenProps({token, key})} />\n                        ))}\n                      </Box>\n                    ))}\n                  </pre>\n                )}\n              </Highlight>\n            </Scrollbar>\n          ) : null}\n        </Collapse>\n        <Scrollbar className={classes.root} style={{maxHeight: maxHeight}}>\n          <Box\n            width='100%'\n            display='flex'\n            alignItems='center'\n            justifyContent='center'>\n            <Component />\n          </Box>\n        </Scrollbar>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ComponentCardWithoutAnim;\n\nComponentCardWithoutAnim.defaultProps = {\n  description: '',\n  maxHeight: 500,\n};\n\nComponentCardWithoutAnim.propTypes = {\n  component: PropTypes.any.isRequired,\n  source: PropTypes.node,\n  title: PropTypes.node.isRequired,\n  description: PropTypes.node,\n};\n","import React from 'react';\r\n\r\nimport Simple from './Simple';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleSource from '!raw-loader!./Simple';\r\nimport Horizontal from './Horizontal';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport HorizontalSource from '!raw-loader!./Horizontal';\r\nimport MultipleDrop from './MultipleDrop';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport MultipleDropSource from '!raw-loader!./MultipleDrop';\r\nimport WithHooks from './WithHooks';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport WithHooksSource from '!raw-loader!./WithHooks';\r\nimport ComponentCard from '@crema/core/ComponentCard/ComponentCardWithoutAnim';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst ReactBeautifulDnd = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='React Beautiful Dnd'\r\n        description='Beautiful and accessible drag and drop for lists with React'\r\n        refUrl='https://react-beautiful-dnd.netlify.com/?path=/story/single-vertical-list--basic'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='Simple'\r\n            component={Simple}\r\n            source={SimpleSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} xl={6}>\r\n          <ComponentCard\r\n            title='WithHooks'\r\n            component={WithHooks}\r\n            source={WithHooksSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='MultipleDrop'\r\n            component={MultipleDrop}\r\n            source={MultipleDropSource}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Horizontal'\r\n            component={Horizontal}\r\n            source={HorizontalSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactBeautifulDnd;\r\n","export default \"import React, {Component} from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\\r\\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\\r\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\r\\nimport Avatar from '@material-ui/core/Avatar';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport {Fonts} from '../../../../shared/constants/AppEnums';\\r\\nimport withStyles from '@material-ui/core/es/styles/withStyles';\\r\\n\\r\\n// a little function to help us with reordering the result\\r\\nconst reorder = (list, startIndex, endIndex) => {\\r\\n  const result = Array.from(list);\\r\\n  const [removed] = result.splice(startIndex, 1);\\r\\n  result.splice(endIndex, 0, removed);\\r\\n  return result;\\r\\n};\\r\\n\\r\\nconst grid = 8;\\r\\n\\r\\nconst styles = (theme) => {\\r\\n  return {\\r\\n    rootList: {\\r\\n      backgroundColor: theme.palette.background.paper,\\r\\n    },\\r\\n  };\\r\\n};\\r\\n\\r\\nconst getListStyle = (isDraggingOver, overflow) => ({\\r\\n  // background: isDraggingOver ? 'lightblue' : 'grey',\\r\\n  border: '5px solid pink',\\r\\n  padding: grid,\\r\\n  maxHeight: '50vh',\\r\\n  overflow,\\r\\n  width: 300,\\r\\n  '@media (min-width: 600px)': {\\r\\n    width: 300,\\r\\n  },\\r\\n});\\r\\n\\r\\nclass Simple extends Component {\\r\\n  static propTypes = {\\r\\n    overflow: PropTypes.string,\\r\\n  };\\r\\n  static defaultProps = {\\r\\n    overflow: 'auto',\\r\\n  };\\r\\n\\r\\n  constructor(props, context) {\\r\\n    super(props, context);\\r\\n    this.state = {\\r\\n      items: simpleListData,\\r\\n    };\\r\\n    this.onDragEnd = this.onDragEnd.bind(this);\\r\\n  }\\r\\n\\r\\n  onDragEnd(result) {\\r\\n    // dropped outside the list\\r\\n    if (!result.destination) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const items = reorder(\\r\\n      this.state.items,\\r\\n      result.source.index,\\r\\n      result.destination.index,\\r\\n    );\\r\\n\\r\\n    this.setState({\\r\\n      items,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Normally you would want to split things out into separate core.\\r\\n  // But in this example everything is just done in one place for simplicity\\r\\n  render() {\\r\\n    const {classes} = this.props;\\r\\n    return (\\r\\n      <DragDropContext onDragEnd={this.onDragEnd}>\\r\\n        <Droppable droppableId='droppable'>\\r\\n          {(droppableProvided, droppableSnapshot) => (\\r\\n            <Box display='flex' flexDirection='column' alignItems='center'>\\r\\n              <Box\\r\\n                ref={droppableProvided.innerRef}\\r\\n                style={getListStyle(\\r\\n                  droppableSnapshot.isDraggingOver,\\r\\n                  this.props.overflow,\\r\\n                )}\\r\\n                onScroll={\\r\\n                  (e) => {}\\r\\n                  // eslint-disable-next-line no-console\\r\\n                }>\\r\\n                {this.state.items.map((item, index) => (\\r\\n                  <Draggable\\r\\n                    key={item.id}\\r\\n                    draggableId={item.handle}\\r\\n                    index={index}>\\r\\n                    {(draggableProvided, draggableSnapshot) => (\\r\\n                      <Box\\r\\n                        ref={draggableProvided.innerRef}\\r\\n                        {...draggableProvided.draggableProps}\\r\\n                        {...draggableProvided.dragHandleProps}>\\r\\n                        <Box px={2} mb={5} clone>\\r\\n                          <ListItem className={classes.rootList}>\\r\\n                            <Box\\r\\n                              mr={3}\\r\\n                              mt={0}\\r\\n                              display='flex'\\r\\n                              justifyContent='center'\\r\\n                              clone>\\r\\n                              <ListItemAvatar>\\r\\n                                <Avatar alt='Remy Sharp' src={item.image} />\\r\\n                              </ListItemAvatar>\\r\\n                            </Box>\\r\\n                            <Box my={0} clone>\\r\\n                              <ListItemText\\r\\n                                primary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    fontWeight={Fonts.MEDIUM}>\\r\\n                                    {item.name}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                                secondary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    display='block'\\r\\n                                    color='text.secondary'\\r\\n                                    overflow='hidden'\\r\\n                                    textOverflow='ellipsis'\\r\\n                                    whiteSpace='nowrap'>\\r\\n                                    @{item.handle}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                              />\\r\\n                            </Box>\\r\\n                          </ListItem>\\r\\n                        </Box>\\r\\n                      </Box>\\r\\n                    )}\\r\\n                  </Draggable>\\r\\n                ))}\\r\\n                {droppableProvided.placeholder}\\r\\n              </Box>\\r\\n            </Box>\\r\\n          )}\\r\\n        </Droppable>\\r\\n      </DragDropContext>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default withStyles(styles)(Simple);\\r\\n\";","export default \"import React, {useState} from 'react';\\r\\nimport styled from '@emotion/styled';\\r\\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\\r\\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\\r\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\r\\nimport Avatar from '@material-ui/core/Avatar';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport {grey} from '@material-ui/core/colors';\\r\\nimport {Fonts} from '../../../../shared/constants/AppEnums';\\r\\nimport {makeStyles} from '@material-ui/core';\\r\\n\\r\\nconst grid = 8;\\r\\nconst reorder = (list, startIndex, endIndex) => {\\r\\n  const result = Array.from(list);\\r\\n  const [removed] = result.splice(startIndex, 1);\\r\\n  result.splice(endIndex, 0, removed);\\r\\n\\r\\n  return result;\\r\\n};\\r\\n\\r\\nconst useStyles = makeStyles((theme) => {\\r\\n  return {\\r\\n    root: {\\r\\n      [theme.breakpoints.down('xs')]: {\\r\\n        width: '100%',\\r\\n        '& .css-1gwkzgr': {\\r\\n          width: '100%',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n    rootList: {\\r\\n      backgroundColor: theme.palette.background.paper,\\r\\n    },\\r\\n  };\\r\\n});\\r\\n\\r\\nconst QuoteItem = styled.div`\\r\\n  width: 170px;\\r\\n  margin-bottom: 20px;\\r\\n  background-color: #e0e0e0;\\r\\n  padding: ${grid}px;\\r\\n  @media (min-width: 600px) {\\r\\n    width: 300px;\\r\\n  }\\r\\n`;\\r\\n\\r\\nfunction Quote({quote, index}) {\\r\\n  const classes = useStyles();\\r\\n  return (\\r\\n    <Draggable draggableId={quote.handle} index={index}>\\r\\n      {(provided) => (\\r\\n        <QuoteItem\\r\\n          ref={provided.innerRef}\\r\\n          {...provided.draggableProps}\\r\\n          {...provided.dragHandleProps}>\\r\\n          <Box p={0} clone>\\r\\n            <ListItem className={classes.rootList}>\\r\\n              <Box\\r\\n                mr={3}\\r\\n                mt={0}\\r\\n                ml={1.5}\\r\\n                display='flex'\\r\\n                justifyContent='center'\\r\\n                clone>\\r\\n                <ListItemAvatar>\\r\\n                  <Avatar alt='Remy Sharp' src={quote.image} />\\r\\n                </ListItemAvatar>\\r\\n              </Box>\\r\\n\\r\\n              <Box my={0} clone>\\r\\n                <ListItemText\\r\\n                  primary={\\r\\n                    <Box component='span' fontWeight={Fonts.MEDIUM}>\\r\\n                      {quote.name}\\r\\n                    </Box>\\r\\n                  }\\r\\n                  secondary={\\r\\n                    <Box\\r\\n                      component='span'\\r\\n                      display='block'\\r\\n                      color='text.secondary'\\r\\n                      overflow='hidden'\\r\\n                      textOverflow='ellipsis'\\r\\n                      whiteSpace='nowrap'>\\r\\n                      @{quote.handle}\\r\\n                    </Box>\\r\\n                  }\\r\\n                />\\r\\n              </Box>\\r\\n            </ListItem>\\r\\n          </Box>\\r\\n        </QuoteItem>\\r\\n      )}\\r\\n    </Draggable>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst QuoteList = React.memo(function QuoteList({quotes}) {\\r\\n  return quotes.map((quote, index) => (\\r\\n    <Quote quote={quote} index={index} key={quote.id} />\\r\\n  ));\\r\\n});\\r\\n\\r\\nconst WithHooks = () => {\\r\\n  const [state, setState] = useState({quotes: simpleListData});\\r\\n  const classes = useStyles();\\r\\n\\r\\n  function onDragEnd(result) {\\r\\n    if (!result.destination) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (result.destination.compose === result.source.compose) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const quotes = reorder(\\r\\n      state.quotes,\\r\\n      result.source.index,\\r\\n      result.destination.index,\\r\\n    );\\r\\n\\r\\n    setState({quotes});\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <DragDropContext onDragEnd={onDragEnd}>\\r\\n      <Box width={1} display='flex' flexDirection='column' alignItems='center'>\\r\\n        <Box\\r\\n          className={classes.root}\\r\\n          border={`solid 4px ${grey[300]}`}\\r\\n          p={2}\\r\\n          mb={3}>\\r\\n          <Droppable droppableId='list'>\\r\\n            {(provided) => (\\r\\n              <Box ref={provided.innerRef} {...provided.droppableProps}>\\r\\n                <QuoteList quotes={state.quotes} />\\r\\n                {provided.placeholder}\\r\\n              </Box>\\r\\n            )}\\r\\n          </Droppable>\\r\\n        </Box>\\r\\n      </Box>\\r\\n    </DragDropContext>\\r\\n  );\\r\\n};\\r\\nexport default WithHooks;\\r\\n\";","export default \"import React, {Component} from 'react';\\r\\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\\r\\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\\r\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\r\\nimport Avatar from '@material-ui/core/Avatar';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport {grey} from '@material-ui/core/colors';\\r\\nimport {Fonts} from '../../../../shared/constants/AppEnums';\\r\\nimport withStyles from '@material-ui/core/es/styles/withStyles';\\r\\n\\r\\n// a little function to help us with reordering the result\\r\\nconst reorder = (list, startIndex, endIndex) => {\\r\\n  const result = Array.from(list);\\r\\n  const [removed] = result.splice(startIndex, 1);\\r\\n  result.splice(endIndex, 0, removed);\\r\\n\\r\\n  return result;\\r\\n};\\r\\n\\r\\n/**\\r\\n * Moves an item from one list to another list.\\r\\n */\\r\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\r\\n  const sourceClone = Array.from(source);\\r\\n  const destClone = Array.from(destination);\\r\\n  const [removed] = sourceClone.splice(droppableSource.compose, 1);\\r\\n\\r\\n  destClone.splice(droppableDestination.compose, 0, removed);\\r\\n\\r\\n  const result = {};\\r\\n  result[droppableSource.droppableId] = sourceClone;\\r\\n  result[droppableDestination.droppableId] = destClone;\\r\\n\\r\\n  return result;\\r\\n};\\r\\n\\r\\nconst grid = 8;\\r\\n\\r\\nconst styles = (theme) => {\\r\\n  return {\\r\\n    rootList: {\\r\\n      backgroundColor: theme.palette.background.paper,\\r\\n    },\\r\\n  };\\r\\n};\\r\\n\\r\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\r\\n  // some basic styles to make the items look a bit nicer\\r\\n  userSelect: 'none',\\r\\n  padding: grid,\\r\\n  margin: `0 0 20px 0`,\\r\\n\\r\\n  // change background colour if dragging\\r\\n  background: isDragging ? 'lightgreen' : '#E0E0E0',\\r\\n\\r\\n  // styles we need to apply on draggables\\r\\n  ...draggableStyle,\\r\\n});\\r\\n\\r\\nconst getListStyle = (isDraggingOver) => ({\\r\\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\\r\\n  border: '5px solid #E0E0E0',\\r\\n  padding: grid,\\r\\n  marginRight: 10,\\r\\n  marginBottom: 20,\\r\\n  width: 300,\\r\\n  '@media (min-width: 600px)': {\\r\\n    width: 300,\\r\\n  },\\r\\n});\\r\\n\\r\\nclass MultipleDrop extends Component {\\r\\n  state = {\\r\\n    items: simpleListData.slice(0, 10),\\r\\n    selected: simpleListData.slice(5, 10),\\r\\n  };\\r\\n\\r\\n  /**\\r\\n   * A semi-generic way to handle multiple lists. Matches\\r\\n   * the IDs of the droppable container to the names of the\\r\\n   * source arrays stored in the state.\\r\\n   */\\r\\n  id2List = {\\r\\n    droppable: 'items',\\r\\n    droppable2: 'selected',\\r\\n  };\\r\\n\\r\\n  getList = (id) => this.state[this.id2List[id]];\\r\\n\\r\\n  onDragEnd = (result) => {\\r\\n    const {source, destination} = result;\\r\\n\\r\\n    // dropped outside the list\\r\\n    if (!destination) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (source.droppableId === destination.droppableId) {\\r\\n      const items = reorder(\\r\\n        this.getList(source.droppableId),\\r\\n        source.index,\\r\\n        destination.index,\\r\\n      );\\r\\n\\r\\n      let state = {items};\\r\\n\\r\\n      if (source.droppableId === 'droppable2') {\\r\\n        state = {selected: items};\\r\\n      }\\r\\n\\r\\n      this.setState(state);\\r\\n    } else {\\r\\n      const result = move(\\r\\n        this.getList(source.droppableId),\\r\\n        this.getList(destination.droppableId),\\r\\n        source,\\r\\n        destination,\\r\\n      );\\r\\n\\r\\n      this.setState({\\r\\n        items: result.droppable,\\r\\n        selected: result.droppable2,\\r\\n      });\\r\\n    }\\r\\n  };\\r\\n\\r\\n  // Normally you would want to split things out into separate core.\\r\\n  // But in this example everything is just done in one place for simplicity\\r\\n  render() {\\r\\n    const {classes} = this.props;\\r\\n    return (\\r\\n      <DragDropContext onDragEnd={this.onDragEnd}>\\r\\n        <Box\\r\\n          display='flex'\\r\\n          flexDirection={{xs: 'column', sm: 'row'}}\\r\\n          justifyContent={{sm: 'center'}}\\r\\n          alignItems='center'>\\r\\n          <Droppable droppableId='droppable'>\\r\\n            {(provided, snapshot) => (\\r\\n              <Box\\r\\n                ref={provided.innerRef}\\r\\n                style={getListStyle(snapshot.isDraggingOver)}>\\r\\n                {this.state.items.map((item, index) => (\\r\\n                  <Draggable\\r\\n                    key={item.id}\\r\\n                    draggableId={item.handle}\\r\\n                    index={index}>\\r\\n                    {(provided, snapshot) => (\\r\\n                      <Box\\r\\n                        ref={provided.innerRef}\\r\\n                        {...provided.draggableProps}\\r\\n                        {...provided.dragHandleProps}>\\r\\n                        <Box px={2} bgcolor={grey[300]} mb={5} clone>\\r\\n                          <ListItem className={classes.rootList}>\\r\\n                            <Box\\r\\n                              mr={3}\\r\\n                              mt={0}\\r\\n                              ml={1.5}\\r\\n                              display='flex'\\r\\n                              justifyContent='center'\\r\\n                              clone>\\r\\n                              <ListItemAvatar>\\r\\n                                <Avatar alt='Remy Sharp' src={item.image} />\\r\\n                              </ListItemAvatar>\\r\\n                            </Box>\\r\\n                            <Box my={0} clone>\\r\\n                              <ListItemText\\r\\n                                primary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    fontWeight={Fonts.MEDIUM}>\\r\\n                                    {item.name}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                                secondary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    display='block'\\r\\n                                    color='text.secondary'\\r\\n                                    overflow='hidden'\\r\\n                                    textOverflow='ellipsis'\\r\\n                                    whiteSpace='nowrap'>\\r\\n                                    @{item.handle}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                              />\\r\\n                            </Box>\\r\\n                          </ListItem>\\r\\n                        </Box>\\r\\n                      </Box>\\r\\n                    )}\\r\\n                  </Draggable>\\r\\n                ))}\\r\\n                {provided.placeholder}\\r\\n              </Box>\\r\\n            )}\\r\\n          </Droppable>\\r\\n          <Droppable droppableId='droppable2'>\\r\\n            {(provided, snapshot) => (\\r\\n              <Box\\r\\n                ref={provided.innerRef}\\r\\n                style={getListStyle(snapshot.isDraggingOver)}>\\r\\n                {this.state.selected.map((item, index) => (\\r\\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\\r\\n                    {(provided, snapshot) => (\\r\\n                      <Box\\r\\n                        ref={provided.innerRef}\\r\\n                        {...provided.draggableProps}\\r\\n                        {...provided.dragHandleProps}\\r\\n                        style={getItemStyle(\\r\\n                          snapshot.isDragging,\\r\\n                          provided.draggableProps.style,\\r\\n                        )}>\\r\\n                        <Box p={0} clone>\\r\\n                          <ListItem className={classes.rootList}>\\r\\n                            <Box\\r\\n                              mr={3}\\r\\n                              mt={0}\\r\\n                              ml={1.5}\\r\\n                              display='flex'\\r\\n                              justifyContent='center'\\r\\n                              clone>\\r\\n                              <ListItemAvatar>\\r\\n                                <Avatar alt='Remy Sharp' src={item.image} />\\r\\n                              </ListItemAvatar>\\r\\n                            </Box>\\r\\n                            <Box my={0} clone>\\r\\n                              <ListItemText\\r\\n                                primary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    fontWeight={Fonts.LIGHT}>\\r\\n                                    {item.name}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                                secondary={\\r\\n                                  <Box\\r\\n                                    component='span'\\r\\n                                    display='block'\\r\\n                                    color='text.secondary'\\r\\n                                    overflow='hidden'\\r\\n                                    textOverflow='ellipsis'\\r\\n                                    whiteSpace='nowrap'>\\r\\n                                    @{item.handle}\\r\\n                                  </Box>\\r\\n                                }\\r\\n                              />\\r\\n                            </Box>\\r\\n                          </ListItem>\\r\\n                        </Box>\\r\\n                      </Box>\\r\\n                    )}\\r\\n                  </Draggable>\\r\\n                ))}\\r\\n                {provided.placeholder}\\r\\n              </Box>\\r\\n            )}\\r\\n          </Droppable>\\r\\n        </Box>\\r\\n      </DragDropContext>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default withStyles(styles)(MultipleDrop);\\r\\n\";","export default \"import React, {Component} from 'react';\\r\\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\\r\\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\\r\\nimport Avatar from '@material-ui/core/Avatar';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\\r\\nimport Box from '@material-ui/core/Box';\\r\\nimport {Fonts} from '../../../../shared/constants/AppEnums';\\r\\nimport withStyles from '@material-ui/core/es/styles/withStyles';\\r\\n\\r\\n// a little function to help us with reordering the result\\r\\nconst reorder = (list, startIndex, endIndex) => {\\r\\n  const result = Array.from(list);\\r\\n  const [removed] = result.splice(startIndex, 1);\\r\\n  result.splice(endIndex, 0, removed);\\r\\n\\r\\n  return result;\\r\\n};\\r\\n\\r\\nconst grid = 8;\\r\\n\\r\\nconst styles = (theme) => {\\r\\n  return {\\r\\n    rootList: {\\r\\n      backgroundColor: theme.palette.background.paper,\\r\\n    },\\r\\n  };\\r\\n};\\r\\n\\r\\nconst getListStyle = (isDraggingOver) => ({\\r\\n  // background: isDraggingOver ? 'lightblue' : 'lightgrey',\\r\\n  border: '5px solid #E0E0E0',\\r\\n  display: 'flex',\\r\\n  padding: grid,\\r\\n  overflow: 'auto',\\r\\n});\\r\\n\\r\\nclass Horizontal extends Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      items: simpleListData.slice(0, 6),\\r\\n    };\\r\\n    this.onDragEnd = this.onDragEnd.bind(this);\\r\\n  }\\r\\n\\r\\n  onDragEnd(result) {\\r\\n    // dropped outside the list\\r\\n    if (!result.destination) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const items = reorder(\\r\\n      this.state.items,\\r\\n      result.source.index,\\r\\n      result.destination.index,\\r\\n    );\\r\\n\\r\\n    this.setState({\\r\\n      items,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // Normally you would want to split things out into separate core.\\r\\n  // But in this example everything is just done in one place for simplicity\\r\\n  render() {\\r\\n    const {classes} = this.props;\\r\\n    return (\\r\\n      <DragDropContext onDragEnd={this.onDragEnd}>\\r\\n        <Droppable droppableId='droppable' direction='horizontal'>\\r\\n          {(provided, snapshot) => (\\r\\n            <div\\r\\n              ref={provided.innerRef}\\r\\n              style={getListStyle(snapshot.isDraggingOver)}\\r\\n              {...provided.droppableProps}>\\r\\n              {this.state.items.map((item, index) => (\\r\\n                <Draggable\\r\\n                  key={item.id}\\r\\n                  draggableId={item.handle}\\r\\n                  index={index}>\\r\\n                  {(provided, snapshot) => (\\r\\n                    <Box\\r\\n                      mr={3}\\r\\n                      ref={provided.innerRef}\\r\\n                      {...provided.draggableProps}\\r\\n                      {...provided.dragHandleProps}>\\r\\n                      <Box p={2} width='16rem' mr={2} clone>\\r\\n                        <ListItem className={classes.rootList}>\\r\\n                          <Box\\r\\n                            mr={3}\\r\\n                            mt={0}\\r\\n                            ml={1.5}\\r\\n                            display='flex'\\r\\n                            justifyContent='center'\\r\\n                            clone>\\r\\n                            <ListItemAvatar>\\r\\n                              <Avatar alt='Remy Sharp' src={item.image} />\\r\\n                            </ListItemAvatar>\\r\\n                          </Box>\\r\\n                          <Box my={0} clone>\\r\\n                            <ListItemText\\r\\n                              primary={\\r\\n                                <Box component='span' fontWeight={Fonts.MEDIUM}>\\r\\n                                  {item.name}\\r\\n                                </Box>\\r\\n                              }\\r\\n                              secondary={\\r\\n                                <Box\\r\\n                                  component='span'\\r\\n                                  display='block'\\r\\n                                  color='text.secondary'>\\r\\n                                  @{item.handle}\\r\\n                                </Box>\\r\\n                              }\\r\\n                            />\\r\\n                          </Box>\\r\\n                        </ListItem>\\r\\n                      </Box>\\r\\n                    </Box>\\r\\n                  )}\\r\\n                </Draggable>\\r\\n              ))}\\r\\n              {provided.placeholder}\\r\\n            </div>\\r\\n          )}\\r\\n        </Droppable>\\r\\n      </DragDropContext>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default withStyles(styles)(Horizontal);\\r\\n\";"],"sourceRoot":""}