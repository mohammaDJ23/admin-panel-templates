(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[163],{3139:function(e,n,r){"use strict";r.r(n);var t=r(0),a=r.n(t),i=r(1406),o=[{name:"axis",children:[{name:"Axes",size:1302},{name:"Axis",size:24593},{name:"AxisGridLine",size:652},{name:"AxisLabel",size:636},{name:"CartesianAxes",size:6703}]},{name:"controls",children:[{name:"AnchorControl",size:2138},{name:"ClickControl",size:3824},{name:"Control",size:1353},{name:"ControlList",size:4665},{name:"DragControl",size:2649},{name:"ExpandControl",size:2832},{name:"HoverControl",size:4896},{name:"IControl",size:763},{name:"PanZoomControl",size:5222},{name:"SelectionControl",size:7862},{name:"TooltipControl",size:8435}]},{name:"data",children:[{name:"Data",size:20544},{name:"DataList",size:19788},{name:"DataSprite",size:10349},{name:"EdgeSprite",size:3301},{name:"NodeSprite",size:19382},{name:"render",children:[{name:"ArrowType",size:698},{name:"EdgeRenderer",size:5569},{name:"IRenderer",size:353},{name:"ShapeRenderer",size:2247}]},{name:"ScaleBinding",size:11275},{name:"Tree",size:7147},{name:"TreeBuilder",size:9930}]},{name:"events",children:[{name:"DataEvent",size:7313},{name:"SelectionEvent",size:6880},{name:"TooltipEvent",size:3701},{name:"VisualizationEvent",size:2117}]},{name:"legend",children:[{name:"Legend",size:20859},{name:"LegendItem",size:4614},{name:"LegendRange",size:10530}]},{name:"operator",children:[{name:"distortion",children:[{name:"BifocalDistortion",size:4461},{name:"Distortion",size:6314},{name:"FisheyeDistortion",size:3444}]},{name:"encoder",children:[{name:"ColorEncoder",size:3179},{name:"Encoder",size:4060},{name:"PropertyEncoder",size:4138},{name:"ShapeEncoder",size:1690},{name:"SizeEncoder",size:1830}]},{name:"filter",children:[{name:"FisheyeTreeFilter",size:5219},{name:"GraphDistanceFilter",size:3165},{name:"VisibilityFilter",size:3509}]},{name:"IOperator",size:1286},{name:"label",children:[{name:"Labeler",size:9956},{name:"RadialLabeler",size:3899},{name:"StackedAreaLabeler",size:3202}]},{name:"layout",children:[{name:"AxisLayout",size:6725},{name:"BundledEdgeRouter",size:3727},{name:"CircleLayout",size:9317},{name:"CirclePackingLayout",size:12003},{name:"DendrogramLayout",size:4853},{name:"ForceDirectedLayout",size:8411},{name:"IcicleTreeLayout",size:4864},{name:"IndentedTreeLayout",size:3174},{name:"Layout",size:7881},{name:"NodeLinkTreeLayout",size:12870},{name:"PieLayout",size:2728},{name:"RadialTreeLayout",size:12348},{name:"RandomLayout",size:870},{name:"StackedAreaLayout",size:9121},{name:"TreeMapLayout",size:9191}]},{name:"Operator",size:2490},{name:"OperatorList",size:5248},{name:"OperatorSequence",size:4190},{name:"OperatorSwitch",size:2581},{name:"SortOperator",size:2023}]}],s=function(){return a.a.createElement(i.y,{width:"100%",height:200},a.a.createElement(i.D,{data:o,dataKey:"size",ratio:4/3,stroke:"#fff",fill:"#4299E1"}))},m=r(413),l=r(414),c=r(416),d=r(415),z=["#8889DD","#9597E4","#8DC77B","#A5D297","#E2CF45","#F8C12D"],h=function(e){Object(c.a)(r,e);var n=Object(d.a)(r);function r(){return Object(m.a)(this,r),n.apply(this,arguments)}return Object(l.a)(r,[{key:"render",value:function(){var e=this.props,n=e.root,r=e.depth,t=e.x,i=e.y,o=e.width,s=e.height,m=e.index,l=e.colors,c=e.name;return a.a.createElement("g",null,a.a.createElement("rect",{x:t,y:i,width:o,height:s,style:{fill:r<2?l[Math.floor(m/n.children.length*6)]:"none",stroke:"#fff",strokeWidth:2/(r+1e-10),strokeOpacity:1/(r+1e-10)}}),1===r?a.a.createElement("text",{x:t+o/2,y:i+s/2+7,textAnchor:"middle",fill:"#fff",fontSize:14},c):null,1===r?a.a.createElement("text",{x:t+4,y:i+18,fill:"#fff",fontSize:16,fillOpacity:.9},m+1):null)}}]),r}(t.Component),p=function(){return a.a.createElement(i.y,{width:"100%",height:200},a.a.createElement(i.D,{data:o,dataKey:"size",ratio:4/3,stroke:"#fff",fill:"#4299E1",content:a.a.createElement(h,{colors:z})}))},f=r(359),u=r(408),y=r(407),C=r(406);n.default=function(e){e.match;return a.a.createElement(a.a.Fragment,null,a.a.createElement(y.a,{title:"Treemap",refUrl:"http://recharts.org/en-US/api/Treemap/"}),a.a.createElement(C.a,null,a.a.createElement(f.a,{item:!0,xs:12,lg:6},a.a.createElement(u.a,{title:"Simple Tree map",component:s,source:"import React from 'react';\r\nimport {ResponsiveContainer, Treemap} from 'recharts';\r\nimport data from './data';\r\n\r\nconst SimpleTreemap = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <Treemap\r\n      data={data}\r\n      dataKey='size'\r\n      ratio={4 / 3}\r\n      stroke='#fff'\r\n      fill='#4299E1'\r\n    />\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default SimpleTreemap;\r\n"})),a.a.createElement(f.a,{item:!0,xs:12,lg:6},a.a.createElement(u.a,{title:"Custom Content Treemap",component:p,source:"import React, {Component} from 'react';\r\nimport {ResponsiveContainer, Treemap} from 'recharts';\r\nimport data from './data';\r\n\r\nconst COLORS = [\r\n  '#8889DD',\r\n  '#9597E4',\r\n  '#8DC77B',\r\n  '#A5D297',\r\n  '#E2CF45',\r\n  '#F8C12D',\r\n];\r\n\r\nclass CustomizedContent extends Component {\r\n  render() {\r\n    const {root, depth, x, y, width, height, index, colors, name} = this.props;\r\n\r\n    return (\r\n      <g>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          style={{\r\n            fill:\r\n              depth < 2\r\n                ? colors[Math.floor((index / root.children.length) * 6)]\r\n                : 'none',\r\n            stroke: '#fff',\r\n            strokeWidth: 2 / (depth + 1e-10),\r\n            strokeOpacity: 1 / (depth + 1e-10),\r\n          }}\r\n        />\r\n        {depth === 1 ? (\r\n          <text\r\n            x={x + width / 2}\r\n            y={y + height / 2 + 7}\r\n            textAnchor='middle'\r\n            fill='#fff'\r\n            fontSize={14}>\r\n            {name}\r\n          </text>\r\n        ) : null}\r\n        {depth === 1 ? (\r\n          <text\r\n            x={x + 4}\r\n            y={y + 18}\r\n            fill='#fff'\r\n            fontSize={16}\r\n            fillOpacity={0.9}>\r\n            {index + 1}\r\n          </text>\r\n        ) : null}\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nconst CustomContentTreemap = () => (\r\n  <ResponsiveContainer width='100%' height={200}>\r\n    <Treemap\r\n      data={data}\r\n      dataKey='size'\r\n      ratio={4 / 3}\r\n      stroke='#fff'\r\n      fill='#4299E1'\r\n      content={<CustomizedContent colors={COLORS} />}\r\n    />\r\n  </ResponsiveContainer>\r\n);\r\n\r\nexport default CustomContentTreemap;\r\n"}))))}}}]);
//# sourceMappingURL=163.3e6cada0.chunk.js.map