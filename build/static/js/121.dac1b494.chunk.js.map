{"version":3,"sources":["modules/muiComponents/dataDisplay/Tables/SimpleTable.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/SimpleTable.js?a110","modules/muiComponents/dataDisplay/Tables/DenseTable.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/DenseTable.js?d1ab","modules/muiComponents/dataDisplay/Tables/SortingNSelecting.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/SortingNSelecting.js?895f","modules/muiComponents/dataDisplay/Tables/CustomizedTables.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/CustomizedTables.js?433e","modules/muiComponents/dataDisplay/Tables/CustomTablePaginationAction.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/CustomTablePaginationAction.js?438b","modules/muiComponents/dataDisplay/Tables/FixedHeader.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/FixedHeader.js?585f","modules/muiComponents/dataDisplay/Tables/SpanningTable.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/SpanningTable.js?bcb8","modules/muiComponents/dataDisplay/Tables/VirtualizedTable.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/VirtualizedTable.js?5292","modules/muiComponents/dataDisplay/Tables/ComplementaryProjects.js","modules/muiComponents/dataDisplay/Tables/index.js","webpack:///./src/modules/muiComponents/dataDisplay/Tables/ComplementaryProjects.js?150d"],"names":["useStyles","makeStyles","theme","root","width","marginTop","spacing","overflowX","table","minWidth","createData","name","calories","fat","carbs","protein","rows","SimpleTable","classes","Paper","className","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","component","scope","paper","marginBottom","DenseTable","size","desc","a","b","orderBy","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","onSelectAllClick","order","numSelected","rowCount","onRequestSort","padding","Checkbox","indeterminate","checked","onChange","inputProps","headCell","sortDirection","TableSortLabel","active","direction","onClick","property","event","visuallyHidden","useToolbarStyles","paddingLeft","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","spacer","flex","actions","title","EnhancedTableToolbar","Toolbar","clsx","Typography","variant","Tooltip","IconButton","aria-label","tableWrapper","border","clip","height","margin","overflow","position","top","EnhancedTable","React","useState","setOrder","setOrderBy","selected","setSelected","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","aria-labelledby","target","newSelecteds","n","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","aria-checked","tabIndex","style","colSpan","TablePagination","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","newPage","onChangeRowsPerPage","value","FormControlLabel","control","Switch","StyledTableCell","withStyles","head","common","black","white","body","fontSize","StyledTableRow","background","default","CustomizedTables","useStyles1","flexShrink","marginLeft","TablePaginationActions","useTheme","disabled","ceil","max","useStyles2","CustomPaginationActionsTable","TableFooter","SelectProps","native","parseInt","ActionsComponent","columns","format","toLocaleString","toFixed","code","population","density","maxHeight","StickyHeadTable","stickyHeader","column","ccyFormat","num","createRow","qty","unit","price","priceRow","invoiceSubtotal","reduce","sum","i","invoiceTaxes","invoiceTotal","SpanningTable","rowSpan","MuiVirtualizedTable","getRowClassName","onRowClick","tableRow","flexContainer","tableRowHover","cellRenderer","cellData","columnIndex","rowHeight","tableCell","noClick","headerRenderer","headerHeight","this","tableProps","rowClassName","dataKey","other","headerProps","PureComponent","defaultProps","VirtualizedTable","display","alignItems","boxSizing","cursor","grey","sample","dessert","randomSelection","floor","random","push","ReactVirtualizedTable","rowGetter","MaterialTableDemo","field","lookup","34","63","data","surname","birthYear","birthCity","state","setState","editable","onRowAdd","newData","Promise","resolve","setTimeout","onRowUpdate","oldData","onRowDelete","splice","Tables","ComponentHeader","description","refUrl","GridContainer","Grid","item","xs","ComponentCard","source","SortingNSelecting","CustomTablePaginationAction","FixedHeader","ComplementaryProjects"],"mappings":"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","file":"static/js/121.dac1b494.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return {name, calories, fat, carbs, protein};\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function SimpleTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Dessert (100g serving)</TableCell>\r\n            <TableCell align='right'>Calories</TableCell>\r\n            <TableCell align='right'>Fat&nbsp;(g)</TableCell>\r\n            <TableCell align='right'>Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align='right'>Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component='th' scope='row'>\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align='right'>{row.calories}</TableCell>\r\n              <TableCell align='right'>{row.fat}</TableCell>\r\n              <TableCell align='right'>{row.carbs}</TableCell>\r\n              <TableCell align='right'>{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n    marginTop: theme.spacing(3),\\r\\n    overflowX: 'auto',\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 650,\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction createData(name, calories, fat, carbs, protein) {\\r\\n  return {name, calories, fat, carbs, protein};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\\r\\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\\r\\n  createData('Eclair', 262, 16.0, 24, 6.0),\\r\\n  createData('Cupcake', 305, 3.7, 67, 4.3),\\r\\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\\r\\n];\\r\\n\\r\\nexport default function SimpleTable() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Paper className={classes.root}>\\r\\n      <Table className={classes.table}>\\r\\n        <TableHead>\\r\\n          <TableRow>\\r\\n            <TableCell>Dessert (100g serving)</TableCell>\\r\\n            <TableCell align='right'>Calories</TableCell>\\r\\n            <TableCell align='right'>Fat&nbsp;(g)</TableCell>\\r\\n            <TableCell align='right'>Carbs&nbsp;(g)</TableCell>\\r\\n            <TableCell align='right'>Protein&nbsp;(g)</TableCell>\\r\\n          </TableRow>\\r\\n        </TableHead>\\r\\n        <TableBody>\\r\\n          {rows.map((row) => (\\r\\n            <TableRow key={row.name}>\\r\\n              <TableCell component='th' scope='row'>\\r\\n                {row.name}\\r\\n              </TableCell>\\r\\n              <TableCell align='right'>{row.calories}</TableCell>\\r\\n              <TableCell align='right'>{row.fat}</TableCell>\\r\\n              <TableCell align='right'>{row.carbs}</TableCell>\\r\\n              <TableCell align='right'>{row.protein}</TableCell>\\r\\n            </TableRow>\\r\\n          ))}\\r\\n        </TableBody>\\r\\n      </Table>\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    width: '100%',\r\n    overflowX: 'auto',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return {name, calories, fat, carbs, protein};\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function DenseTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Table className={classes.table} size='small'>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Dessert (100g serving)</TableCell>\r\n              <TableCell align='right'>Calories</TableCell>\r\n              <TableCell align='right'>Fat&nbsp;(g)</TableCell>\r\n              <TableCell align='right'>Carbs&nbsp;(g)</TableCell>\r\n              <TableCell align='right'>Protein&nbsp;(g)</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.name}>\r\n                <TableCell component='th' scope='row'>\r\n                  {row.name}\r\n                </TableCell>\r\n                <TableCell align='right'>{row.calories}</TableCell>\r\n                <TableCell align='right'>{row.fat}</TableCell>\r\n                <TableCell align='right'>{row.carbs}</TableCell>\r\n                <TableCell align='right'>{row.protein}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n  },\\r\\n  paper: {\\r\\n    marginTop: theme.spacing(3),\\r\\n    width: '100%',\\r\\n    overflowX: 'auto',\\r\\n    marginBottom: theme.spacing(2),\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 650,\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction createData(name, calories, fat, carbs, protein) {\\r\\n  return {name, calories, fat, carbs, protein};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\\r\\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\\r\\n  createData('Eclair', 262, 16.0, 24, 6.0),\\r\\n  createData('Cupcake', 305, 3.7, 67, 4.3),\\r\\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\\r\\n];\\r\\n\\r\\nexport default function DenseTable() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <Paper className={classes.paper}>\\r\\n        <Table className={classes.table} size='small'>\\r\\n          <TableHead>\\r\\n            <TableRow>\\r\\n              <TableCell>Dessert (100g serving)</TableCell>\\r\\n              <TableCell align='right'>Calories</TableCell>\\r\\n              <TableCell align='right'>Fat&nbsp;(g)</TableCell>\\r\\n              <TableCell align='right'>Carbs&nbsp;(g)</TableCell>\\r\\n              <TableCell align='right'>Protein&nbsp;(g)</TableCell>\\r\\n            </TableRow>\\r\\n          </TableHead>\\r\\n          <TableBody>\\r\\n            {rows.map((row) => (\\r\\n              <TableRow key={row.name}>\\r\\n                <TableCell component='th' scope='row'>\\r\\n                  {row.name}\\r\\n                </TableCell>\\r\\n                <TableCell align='right'>{row.calories}</TableCell>\\r\\n                <TableCell align='right'>{row.fat}</TableCell>\\r\\n                <TableCell align='right'>{row.carbs}</TableCell>\\r\\n                <TableCell align='right'>{row.protein}</TableCell>\\r\\n              </TableRow>\\r\\n            ))}\\r\\n          </TableBody>\\r\\n        </Table>\\r\\n      </Paper>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {lighten, makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return {name, calories, fat, carbs, protein};\r\n}\r\n\r\nconst rows = [\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Donut', 452, 25.0, 51, 4.9),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n  createData('KitKat', 518, 26.0, 65, 7.0),\r\n  createData('Lollipop', 392, 0.2, 98, 0.0),\r\n  createData('Marshmallow', 318, 0, 81, 2.0),\r\n  createData('Nougat', 360, 19.0, 9, 37.0),\r\n  createData('Oreo', 437, 18.0, 63, 4.0),\r\n];\r\n\r\nfunction desc(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction stableSort(array, cmp) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = cmp(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction getSorting(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => desc(a, b, orderBy)\r\n    : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'name',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Dessert (100g serving)',\r\n  },\r\n  {id: 'calories', numeric: true, disablePadding: false, label: 'Calories'},\r\n  {id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)'},\r\n  {id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)'},\r\n  {id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)'},\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding='checkbox'>\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{'aria-label': 'select all desserts'}}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}>\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={order}\r\n              onClick={createSortHandler(headCell.id)}>\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  spacer: {\r\n    flex: '1 1 100%',\r\n  },\r\n  actions: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    flex: '0 0 auto',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const {numSelected} = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}>\r\n      <div className={classes.title}>\r\n        {numSelected > 0 ? (\r\n          <Typography color='inherit' variant='subtitle1'>\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography variant='h6' id='tableTitle'>\r\n            Nutrition\r\n          </Typography>\r\n        )}\r\n      </div>\r\n      <div className={classes.spacer} />\r\n      <div className={classes.actions}>\r\n        {numSelected > 0 ? (\r\n          <Tooltip title='Delete'>\r\n            <IconButton aria-label='delete'>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title='Filter list'>\r\n            <IconButton aria-label='filter list'>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </div>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  tableWrapper: {\r\n    overflowX: 'auto',\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable() {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('calories');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  function handleRequestSort(event, property) {\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    setOrder(isDesc ? 'asc' : 'desc');\r\n    setOrderBy(property);\r\n  }\r\n\r\n  function handleSelectAllClick(event) {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  }\r\n\r\n  function handleClick(event, name) {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  }\r\n\r\n  function handleChangePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n\r\n  function handleChangeRowsPerPage(event) {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  }\r\n\r\n  function handleChangeDense(event) {\r\n    setDense(event.target.checked);\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <div className={classes.tableWrapper}>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby='tableTitle'\r\n            size={dense ? 'small' : 'medium'}>\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getSorting(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.name);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.name)}\r\n                      role='checkbox'\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                      selected={isItemSelected}>\r\n                      <TableCell padding='checkbox'>\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{'aria-labelledby': labelId}}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component='th'\r\n                        id={labelId}\r\n                        scope='row'\r\n                        padding='none'>\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align='right'>{row.calories}</TableCell>\r\n                      <TableCell align='right'>{row.fat}</TableCell>\r\n                      <TableCell align='right'>{row.carbs}</TableCell>\r\n                      <TableCell align='right'>{row.protein}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{height: 49 * emptyRows}}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component='div'\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          backIconButtonProps={{\r\n            'aria-label': 'previous page',\r\n          }}\r\n          nextIconButtonProps={{\r\n            'aria-label': 'next page',\r\n          }}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label='Dense padding'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport clsx from 'clsx';\\r\\nimport {lighten, makeStyles} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TablePagination from '@material-ui/core/TablePagination';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\\r\\nimport Toolbar from '@material-ui/core/Toolbar';\\r\\nimport Typography from '@material-ui/core/Typography';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport Checkbox from '@material-ui/core/Checkbox';\\r\\nimport IconButton from '@material-ui/core/IconButton';\\r\\nimport Tooltip from '@material-ui/core/Tooltip';\\r\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\r\\nimport Switch from '@material-ui/core/Switch';\\r\\nimport DeleteIcon from '@material-ui/icons/Delete';\\r\\nimport FilterListIcon from '@material-ui/icons/FilterList';\\r\\n\\r\\nfunction createData(name, calories, fat, carbs, protein) {\\r\\n  return {name, calories, fat, carbs, protein};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('Cupcake', 305, 3.7, 67, 4.3),\\r\\n  createData('Donut', 452, 25.0, 51, 4.9),\\r\\n  createData('Eclair', 262, 16.0, 24, 6.0),\\r\\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\\r\\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\\r\\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\\r\\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\\r\\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\\r\\n  createData('KitKat', 518, 26.0, 65, 7.0),\\r\\n  createData('Lollipop', 392, 0.2, 98, 0.0),\\r\\n  createData('Marshmallow', 318, 0, 81, 2.0),\\r\\n  createData('Nougat', 360, 19.0, 9, 37.0),\\r\\n  createData('Oreo', 437, 18.0, 63, 4.0),\\r\\n];\\r\\n\\r\\nfunction desc(a, b, orderBy) {\\r\\n  if (b[orderBy] < a[orderBy]) {\\r\\n    return -1;\\r\\n  }\\r\\n  if (b[orderBy] > a[orderBy]) {\\r\\n    return 1;\\r\\n  }\\r\\n  return 0;\\r\\n}\\r\\n\\r\\nfunction stableSort(array, cmp) {\\r\\n  const stabilizedThis = array.map((el, index) => [el, index]);\\r\\n  stabilizedThis.sort((a, b) => {\\r\\n    const order = cmp(a[0], b[0]);\\r\\n    if (order !== 0) return order;\\r\\n    return a[1] - b[1];\\r\\n  });\\r\\n  return stabilizedThis.map((el) => el[0]);\\r\\n}\\r\\n\\r\\nfunction getSorting(order, orderBy) {\\r\\n  return order === 'desc'\\r\\n    ? (a, b) => desc(a, b, orderBy)\\r\\n    : (a, b) => -desc(a, b, orderBy);\\r\\n}\\r\\n\\r\\nconst headCells = [\\r\\n  {\\r\\n    id: 'name',\\r\\n    numeric: false,\\r\\n    disablePadding: true,\\r\\n    label: 'Dessert (100g serving)',\\r\\n  },\\r\\n  {id: 'calories', numeric: true, disablePadding: false, label: 'Calories'},\\r\\n  {id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)'},\\r\\n  {id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)'},\\r\\n  {id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)'},\\r\\n];\\r\\n\\r\\nfunction EnhancedTableHead(props) {\\r\\n  const {\\r\\n    classes,\\r\\n    onSelectAllClick,\\r\\n    order,\\r\\n    orderBy,\\r\\n    numSelected,\\r\\n    rowCount,\\r\\n    onRequestSort,\\r\\n  } = props;\\r\\n  const createSortHandler = (property) => (event) => {\\r\\n    onRequestSort(event, property);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <TableHead>\\r\\n      <TableRow>\\r\\n        <TableCell padding='checkbox'>\\r\\n          <Checkbox\\r\\n            indeterminate={numSelected > 0 && numSelected < rowCount}\\r\\n            checked={numSelected === rowCount}\\r\\n            onChange={onSelectAllClick}\\r\\n            inputProps={{'aria-label': 'select all desserts'}}\\r\\n          />\\r\\n        </TableCell>\\r\\n        {headCells.map((headCell) => (\\r\\n          <TableCell\\r\\n            key={headCell.id}\\r\\n            align={headCell.numeric ? 'right' : 'left'}\\r\\n            padding={headCell.disablePadding ? 'none' : 'default'}\\r\\n            sortDirection={orderBy === headCell.id ? order : false}>\\r\\n            <TableSortLabel\\r\\n              active={orderBy === headCell.id}\\r\\n              direction={order}\\r\\n              onClick={createSortHandler(headCell.id)}>\\r\\n              {headCell.label}\\r\\n              {orderBy === headCell.id ? (\\r\\n                <span className={classes.visuallyHidden}>\\r\\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\\r\\n                </span>\\r\\n              ) : null}\\r\\n            </TableSortLabel>\\r\\n          </TableCell>\\r\\n        ))}\\r\\n      </TableRow>\\r\\n    </TableHead>\\r\\n  );\\r\\n}\\r\\n\\r\\nEnhancedTableHead.propTypes = {\\r\\n  classes: PropTypes.object.isRequired,\\r\\n  numSelected: PropTypes.number.isRequired,\\r\\n  onRequestSort: PropTypes.func.isRequired,\\r\\n  onSelectAllClick: PropTypes.func.isRequired,\\r\\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\\r\\n  orderBy: PropTypes.string.isRequired,\\r\\n  rowCount: PropTypes.number.isRequired,\\r\\n};\\r\\n\\r\\nconst useToolbarStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    paddingLeft: theme.spacing(2),\\r\\n    paddingRight: theme.spacing(1),\\r\\n  },\\r\\n  highlight:\\r\\n    theme.palette.type === 'light'\\r\\n      ? {\\r\\n          color: theme.palette.secondary.main,\\r\\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\\r\\n        }\\r\\n      : {\\r\\n          color: theme.palette.text.primary,\\r\\n          backgroundColor: theme.palette.secondary.dark,\\r\\n        },\\r\\n  spacer: {\\r\\n    flex: '1 1 100%',\\r\\n  },\\r\\n  actions: {\\r\\n    color: theme.palette.text.secondary,\\r\\n  },\\r\\n  title: {\\r\\n    flex: '0 0 auto',\\r\\n  },\\r\\n}));\\r\\n\\r\\nconst EnhancedTableToolbar = (props) => {\\r\\n  const classes = useToolbarStyles();\\r\\n  const {numSelected} = props;\\r\\n\\r\\n  return (\\r\\n    <Toolbar\\r\\n      className={clsx(classes.root, {\\r\\n        [classes.highlight]: numSelected > 0,\\r\\n      })}>\\r\\n      <div className={classes.title}>\\r\\n        {numSelected > 0 ? (\\r\\n          <Typography color='inherit' variant='subtitle1'>\\r\\n            {numSelected} selected\\r\\n          </Typography>\\r\\n        ) : (\\r\\n          <Typography variant='h6' id='tableTitle'>\\r\\n            Nutrition\\r\\n          </Typography>\\r\\n        )}\\r\\n      </div>\\r\\n      <div className={classes.spacer} />\\r\\n      <div className={classes.actions}>\\r\\n        {numSelected > 0 ? (\\r\\n          <Tooltip title='Delete'>\\r\\n            <IconButton aria-label='delete'>\\r\\n              <DeleteIcon />\\r\\n            </IconButton>\\r\\n          </Tooltip>\\r\\n        ) : (\\r\\n          <Tooltip title='Filter list'>\\r\\n            <IconButton aria-label='filter list'>\\r\\n              <FilterListIcon />\\r\\n            </IconButton>\\r\\n          </Tooltip>\\r\\n        )}\\r\\n      </div>\\r\\n    </Toolbar>\\r\\n  );\\r\\n};\\r\\n\\r\\nEnhancedTableToolbar.propTypes = {\\r\\n  numSelected: PropTypes.number.isRequired,\\r\\n};\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n    marginTop: theme.spacing(3),\\r\\n  },\\r\\n  paper: {\\r\\n    width: '100%',\\r\\n    marginBottom: theme.spacing(2),\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 750,\\r\\n  },\\r\\n  tableWrapper: {\\r\\n    overflowX: 'auto',\\r\\n  },\\r\\n  visuallyHidden: {\\r\\n    border: 0,\\r\\n    clip: 'rect(0 0 0 0)',\\r\\n    height: 1,\\r\\n    margin: -1,\\r\\n    overflow: 'hidden',\\r\\n    padding: 0,\\r\\n    position: 'absolute',\\r\\n    top: 20,\\r\\n    width: 1,\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function EnhancedTable() {\\r\\n  const classes = useStyles();\\r\\n  const [order, setOrder] = React.useState('asc');\\r\\n  const [orderBy, setOrderBy] = React.useState('calories');\\r\\n  const [selected, setSelected] = React.useState([]);\\r\\n  const [page, setPage] = React.useState(0);\\r\\n  const [dense, setDense] = React.useState(false);\\r\\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\\r\\n\\r\\n  function handleRequestSort(event, property) {\\r\\n    const isDesc = orderBy === property && order === 'desc';\\r\\n    setOrder(isDesc ? 'asc' : 'desc');\\r\\n    setOrderBy(property);\\r\\n  }\\r\\n\\r\\n  function handleSelectAllClick(event) {\\r\\n    if (event.target.checked) {\\r\\n      const newSelecteds = rows.map((n) => n.name);\\r\\n      setSelected(newSelecteds);\\r\\n      return;\\r\\n    }\\r\\n    setSelected([]);\\r\\n  }\\r\\n\\r\\n  function handleClick(event, name) {\\r\\n    const selectedIndex = selected.indexOf(name);\\r\\n    let newSelected = [];\\r\\n\\r\\n    if (selectedIndex === -1) {\\r\\n      newSelected = newSelected.concat(selected, name);\\r\\n    } else if (selectedIndex === 0) {\\r\\n      newSelected = newSelected.concat(selected.slice(1));\\r\\n    } else if (selectedIndex === selected.length - 1) {\\r\\n      newSelected = newSelected.concat(selected.slice(0, -1));\\r\\n    } else if (selectedIndex > 0) {\\r\\n      newSelected = newSelected.concat(\\r\\n        selected.slice(0, selectedIndex),\\r\\n        selected.slice(selectedIndex + 1),\\r\\n      );\\r\\n    }\\r\\n\\r\\n    setSelected(newSelected);\\r\\n  }\\r\\n\\r\\n  function handleChangePage(event, newPage) {\\r\\n    setPage(newPage);\\r\\n  }\\r\\n\\r\\n  function handleChangeRowsPerPage(event) {\\r\\n    setRowsPerPage(+event.target.value);\\r\\n    setPage(0);\\r\\n  }\\r\\n\\r\\n  function handleChangeDense(event) {\\r\\n    setDense(event.target.checked);\\r\\n  }\\r\\n\\r\\n  const isSelected = (name) => selected.indexOf(name) !== -1;\\r\\n\\r\\n  const emptyRows =\\r\\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <Paper className={classes.paper}>\\r\\n        <EnhancedTableToolbar numSelected={selected.length} />\\r\\n        <div className={classes.tableWrapper}>\\r\\n          <Table\\r\\n            className={classes.table}\\r\\n            aria-labelledby='tableTitle'\\r\\n            size={dense ? 'small' : 'medium'}>\\r\\n            <EnhancedTableHead\\r\\n              classes={classes}\\r\\n              numSelected={selected.length}\\r\\n              order={order}\\r\\n              orderBy={orderBy}\\r\\n              onSelectAllClick={handleSelectAllClick}\\r\\n              onRequestSort={handleRequestSort}\\r\\n              rowCount={rows.length}\\r\\n            />\\r\\n            <TableBody>\\r\\n              {stableSort(rows, getSorting(order, orderBy))\\r\\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\\r\\n                .map((row, index) => {\\r\\n                  const isItemSelected = isSelected(row.name);\\r\\n                  const labelId = `enhanced-table-checkbox-${index}`;\\r\\n\\r\\n                  return (\\r\\n                    <TableRow\\r\\n                      hover\\r\\n                      onClick={(event) => handleClick(event, row.name)}\\r\\n                      role='checkbox'\\r\\n                      aria-checked={isItemSelected}\\r\\n                      tabIndex={-1}\\r\\n                      key={row.name}\\r\\n                      selected={isItemSelected}>\\r\\n                      <TableCell padding='checkbox'>\\r\\n                        <Checkbox\\r\\n                          checked={isItemSelected}\\r\\n                          inputProps={{'aria-labelledby': labelId}}\\r\\n                        />\\r\\n                      </TableCell>\\r\\n                      <TableCell\\r\\n                        component='th'\\r\\n                        id={labelId}\\r\\n                        scope='row'\\r\\n                        padding='none'>\\r\\n                        {row.name}\\r\\n                      </TableCell>\\r\\n                      <TableCell align='right'>{row.calories}</TableCell>\\r\\n                      <TableCell align='right'>{row.fat}</TableCell>\\r\\n                      <TableCell align='right'>{row.carbs}</TableCell>\\r\\n                      <TableCell align='right'>{row.protein}</TableCell>\\r\\n                    </TableRow>\\r\\n                  );\\r\\n                })}\\r\\n              {emptyRows > 0 && (\\r\\n                <TableRow style={{height: 49 * emptyRows}}>\\r\\n                  <TableCell colSpan={6} />\\r\\n                </TableRow>\\r\\n              )}\\r\\n            </TableBody>\\r\\n          </Table>\\r\\n        </div>\\r\\n        <TablePagination\\r\\n          rowsPerPageOptions={[5, 10, 25]}\\r\\n          component='div'\\r\\n          count={rows.length}\\r\\n          rowsPerPage={rowsPerPage}\\r\\n          page={page}\\r\\n          backIconButtonProps={{\\r\\n            'aria-label': 'previous page',\\r\\n          }}\\r\\n          nextIconButtonProps={{\\r\\n            'aria-label': 'next page',\\r\\n          }}\\r\\n          onChangePage={handleChangePage}\\r\\n          onChangeRowsPerPage={handleChangeRowsPerPage}\\r\\n        />\\r\\n      </Paper>\\r\\n      <FormControlLabel\\r\\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\\r\\n        label='Dense padding'\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return {name, calories, fat, carbs, protein};\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n}));\r\n\r\nexport default function CustomizedTables() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\r\n            <StyledTableCell align='right'>Calories</StyledTableCell>\r\n            <StyledTableCell align='right'>Fat&nbsp;(g)</StyledTableCell>\r\n            <StyledTableCell align='right'>Carbs&nbsp;(g)</StyledTableCell>\r\n            <StyledTableCell align='right'>Protein&nbsp;(g)</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component='th' scope='row'>\r\n                {row.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell align='right'>{row.calories}</StyledTableCell>\r\n              <StyledTableCell align='right'>{row.fat}</StyledTableCell>\r\n              <StyledTableCell align='right'>{row.carbs}</StyledTableCell>\r\n              <StyledTableCell align='right'>{row.protein}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\n\\r\\nconst StyledTableCell = withStyles((theme) => ({\\r\\n  head: {\\r\\n    backgroundColor: theme.palette.common.black,\\r\\n    color: theme.palette.common.white,\\r\\n  },\\r\\n  body: {\\r\\n    fontSize: 14,\\r\\n  },\\r\\n}))(TableCell);\\r\\n\\r\\nconst StyledTableRow = withStyles((theme) => ({\\r\\n  root: {\\r\\n    '&:nth-of-type(odd)': {\\r\\n      backgroundColor: theme.palette.background.default,\\r\\n    },\\r\\n  },\\r\\n}))(TableRow);\\r\\n\\r\\nfunction createData(name, calories, fat, carbs, protein) {\\r\\n  return {name, calories, fat, carbs, protein};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\\r\\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\\r\\n  createData('Eclair', 262, 16.0, 24, 6.0),\\r\\n  createData('Cupcake', 305, 3.7, 67, 4.3),\\r\\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\\r\\n];\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n    marginTop: theme.spacing(3),\\r\\n    overflowX: 'auto',\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 700,\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function CustomizedTables() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Paper className={classes.root}>\\r\\n      <Table className={classes.table}>\\r\\n        <TableHead>\\r\\n          <TableRow>\\r\\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\\r\\n            <StyledTableCell align='right'>Calories</StyledTableCell>\\r\\n            <StyledTableCell align='right'>Fat&nbsp;(g)</StyledTableCell>\\r\\n            <StyledTableCell align='right'>Carbs&nbsp;(g)</StyledTableCell>\\r\\n            <StyledTableCell align='right'>Protein&nbsp;(g)</StyledTableCell>\\r\\n          </TableRow>\\r\\n        </TableHead>\\r\\n        <TableBody>\\r\\n          {rows.map((row) => (\\r\\n            <StyledTableRow key={row.name}>\\r\\n              <StyledTableCell component='th' scope='row'>\\r\\n                {row.name}\\r\\n              </StyledTableCell>\\r\\n              <StyledTableCell align='right'>{row.calories}</StyledTableCell>\\r\\n              <StyledTableCell align='right'>{row.fat}</StyledTableCell>\\r\\n              <StyledTableCell align='right'>{row.carbs}</StyledTableCell>\\r\\n              <StyledTableCell align='right'>{row.protein}</StyledTableCell>\\r\\n            </StyledTableRow>\\r\\n          ))}\\r\\n        </TableBody>\\r\\n      </Table>\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const {count, page, rowsPerPage, onChangePage} = props;\r\n\r\n  function handleFirstPageButtonClick(event) {\r\n    onChangePage(event, 0);\r\n  }\r\n\r\n  function handleBackButtonClick(event) {\r\n    onChangePage(event, page - 1);\r\n  }\r\n\r\n  function handleNextButtonClick(event) {\r\n    onChangePage(event, page + 1);\r\n  }\r\n\r\n  function handleLastPageButtonClick(event) {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label='first page'>\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label='previous page'>\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label='next page'>\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label='last page'>\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n  return {name, calories, fat};\r\n}\r\n\r\nconst rows = [\r\n  createData('Cupcake', 305, 3.7),\r\n  createData('Donut', 452, 25.0),\r\n  createData('Eclair', 262, 16.0),\r\n  createData('Frozen yoghurt', 159, 6.0),\r\n  createData('Gingerbread', 356, 16.0),\r\n  createData('Honeycomb', 408, 3.2),\r\n  createData('Ice cream sandwich', 237, 9.0),\r\n  createData('Jelly Bean', 375, 0.0),\r\n  createData('KitKat', 518, 26.0),\r\n  createData('Lollipop', 392, 0.2),\r\n  createData('Marshmallow', 318, 0),\r\n  createData('Nougat', 360, 19.0),\r\n  createData('Oreo', 437, 18.0),\r\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  tableWrapper: {\r\n    overflowX: 'auto',\r\n  },\r\n}));\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  function handleChangePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n\r\n  function handleChangeRowsPerPage(event) {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <div className={classes.tableWrapper}>\r\n        <Table className={classes.table}>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell component='th' scope='row'>\r\n                    {row.name}\r\n                  </TableCell>\r\n                  <TableCell align='right'>{row.calories}</TableCell>\r\n                  <TableCell align='right'>{row.fat}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{height: 48 * emptyRows}}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                colSpan={3}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: {'aria-label': 'rows per page'},\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableFooter from '@material-ui/core/TableFooter';\\r\\nimport TablePagination from '@material-ui/core/TablePagination';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport IconButton from '@material-ui/core/IconButton';\\r\\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\\r\\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\\r\\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\\r\\nimport LastPageIcon from '@material-ui/icons/LastPage';\\r\\n\\r\\nconst useStyles1 = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    flexShrink: 0,\\r\\n    color: theme.palette.text.secondary,\\r\\n    marginLeft: theme.spacing(2.5),\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction TablePaginationActions(props) {\\r\\n  const classes = useStyles1();\\r\\n  const theme = useTheme();\\r\\n  const {count, page, rowsPerPage, onChangePage} = props;\\r\\n\\r\\n  function handleFirstPageButtonClick(event) {\\r\\n    onChangePage(event, 0);\\r\\n  }\\r\\n\\r\\n  function handleBackButtonClick(event) {\\r\\n    onChangePage(event, page - 1);\\r\\n  }\\r\\n\\r\\n  function handleNextButtonClick(event) {\\r\\n    onChangePage(event, page + 1);\\r\\n  }\\r\\n\\r\\n  function handleLastPageButtonClick(event) {\\r\\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <div className={classes.root}>\\r\\n      <IconButton\\r\\n        onClick={handleFirstPageButtonClick}\\r\\n        disabled={page === 0}\\r\\n        aria-label='first page'>\\r\\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\\r\\n      </IconButton>\\r\\n      <IconButton\\r\\n        onClick={handleBackButtonClick}\\r\\n        disabled={page === 0}\\r\\n        aria-label='previous page'>\\r\\n        {theme.direction === 'rtl' ? (\\r\\n          <KeyboardArrowRight />\\r\\n        ) : (\\r\\n          <KeyboardArrowLeft />\\r\\n        )}\\r\\n      </IconButton>\\r\\n      <IconButton\\r\\n        onClick={handleNextButtonClick}\\r\\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\\r\\n        aria-label='next page'>\\r\\n        {theme.direction === 'rtl' ? (\\r\\n          <KeyboardArrowLeft />\\r\\n        ) : (\\r\\n          <KeyboardArrowRight />\\r\\n        )}\\r\\n      </IconButton>\\r\\n      <IconButton\\r\\n        onClick={handleLastPageButtonClick}\\r\\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\\r\\n        aria-label='last page'>\\r\\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\\r\\n      </IconButton>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTablePaginationActions.propTypes = {\\r\\n  count: PropTypes.number.isRequired,\\r\\n  onChangePage: PropTypes.func.isRequired,\\r\\n  page: PropTypes.number.isRequired,\\r\\n  rowsPerPage: PropTypes.number.isRequired,\\r\\n};\\r\\n\\r\\nfunction createData(name, calories, fat) {\\r\\n  return {name, calories, fat};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('Cupcake', 305, 3.7),\\r\\n  createData('Donut', 452, 25.0),\\r\\n  createData('Eclair', 262, 16.0),\\r\\n  createData('Frozen yoghurt', 159, 6.0),\\r\\n  createData('Gingerbread', 356, 16.0),\\r\\n  createData('Honeycomb', 408, 3.2),\\r\\n  createData('Ice cream sandwich', 237, 9.0),\\r\\n  createData('Jelly Bean', 375, 0.0),\\r\\n  createData('KitKat', 518, 26.0),\\r\\n  createData('Lollipop', 392, 0.2),\\r\\n  createData('Marshmallow', 318, 0),\\r\\n  createData('Nougat', 360, 19.0),\\r\\n  createData('Oreo', 437, 18.0),\\r\\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\\r\\n\\r\\nconst useStyles2 = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n    marginTop: theme.spacing(3),\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 500,\\r\\n  },\\r\\n  tableWrapper: {\\r\\n    overflowX: 'auto',\\r\\n  },\\r\\n}));\\r\\n\\r\\nexport default function CustomPaginationActionsTable() {\\r\\n  const classes = useStyles2();\\r\\n  const [page, setPage] = React.useState(0);\\r\\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\\r\\n\\r\\n  const emptyRows =\\r\\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\\r\\n\\r\\n  function handleChangePage(event, newPage) {\\r\\n    setPage(newPage);\\r\\n  }\\r\\n\\r\\n  function handleChangeRowsPerPage(event) {\\r\\n    setRowsPerPage(parseInt(event.target.value, 10));\\r\\n    setPage(0);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <Paper className={classes.root}>\\r\\n      <div className={classes.tableWrapper}>\\r\\n        <Table className={classes.table}>\\r\\n          <TableBody>\\r\\n            {rows\\r\\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\\r\\n              .map((row) => (\\r\\n                <TableRow key={row.name}>\\r\\n                  <TableCell component='th' scope='row'>\\r\\n                    {row.name}\\r\\n                  </TableCell>\\r\\n                  <TableCell align='right'>{row.calories}</TableCell>\\r\\n                  <TableCell align='right'>{row.fat}</TableCell>\\r\\n                </TableRow>\\r\\n              ))}\\r\\n\\r\\n            {emptyRows > 0 && (\\r\\n              <TableRow style={{height: 48 * emptyRows}}>\\r\\n                <TableCell colSpan={6} />\\r\\n              </TableRow>\\r\\n            )}\\r\\n          </TableBody>\\r\\n          <TableFooter>\\r\\n            <TableRow>\\r\\n              <TablePagination\\r\\n                rowsPerPageOptions={[5, 10, 25]}\\r\\n                colSpan={3}\\r\\n                count={rows.length}\\r\\n                rowsPerPage={rowsPerPage}\\r\\n                page={page}\\r\\n                SelectProps={{\\r\\n                  inputProps: {'aria-label': 'rows per page'},\\r\\n                  native: true,\\r\\n                }}\\r\\n                onChangePage={handleChangePage}\\r\\n                onChangeRowsPerPage={handleChangeRowsPerPage}\\r\\n                ActionsComponent={TablePaginationActions}\\r\\n              />\\r\\n            </TableRow>\\r\\n          </TableFooter>\\r\\n        </Table>\\r\\n      </div>\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n  {id: 'name', label: 'Name', minWidth: 200},\r\n  {id: 'code', label: 'ISO\\u00a0Code', minWidth: 100},\r\n  {\r\n    id: 'population',\r\n    label: 'Population',\r\n    minWidth: 120,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString(),\r\n  },\r\n  {\r\n    id: 'size',\r\n    label: 'Size\\u00a0(km\\u00b2)',\r\n    minWidth: 120,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString(),\r\n  },\r\n  {\r\n    id: 'density',\r\n    label: 'Density',\r\n    minWidth: 120,\r\n    align: 'right',\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nfunction createData(name, code, population, size) {\r\n  const density = population / size;\r\n  return {name, code, population, size, density};\r\n}\r\n\r\nconst rows = [\r\n  createData('India', 'IN', 1324171354, 3287263),\r\n  createData('China', 'CN', 1403500365, 9596961),\r\n  createData('Italy', 'IT', 60483973, 301340),\r\n  createData('United States', 'US', 327167434, 9833520),\r\n  createData('Canada', 'CA', 37602103, 9984670),\r\n  createData('Australia', 'AU', 25475400, 7692024),\r\n  createData('Germany', 'DE', 83019200, 357578),\r\n  createData('Ireland', 'IE', 4857000, 70273),\r\n  createData('Mexico', 'MX', 126577691, 1972550),\r\n  createData('Japan', 'JP', 126317000, 377973),\r\n  createData('France', 'FR', 67022000, 640679),\r\n  createData('United Kingdom', 'GB', 67545757, 242495),\r\n  createData('Russia', 'RU', 146793744, 17098246),\r\n  createData('Nigeria', 'NG', 200962417, 923768),\r\n  createData('Brazil', 'BR', 210147125, 8515767),\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  tableWrapper: {\r\n    maxHeight: 407,\r\n    overflow: 'auto',\r\n  },\r\n});\r\n\r\nexport default function StickyHeadTable() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  function handleChangePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n\r\n  function handleChangeRowsPerPage(event) {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <div className={classes.tableWrapper}>\r\n        <Table stickyHeader>\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{minWidth: column.minWidth}}>\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role='checkbox' tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === 'number'\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component='div'\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        backIconButtonProps={{\r\n          'aria-label': 'previous page',\r\n        }}\r\n        nextIconButtonProps={{\r\n          'aria-label': 'next page',\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TablePagination from '@material-ui/core/TablePagination';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\n\\r\\nconst columns = [\\r\\n  {id: 'name', label: 'Name', minWidth: 200},\\r\\n  {id: 'code', label: 'ISO\\\\u00a0Code', minWidth: 100},\\r\\n  {\\r\\n    id: 'population',\\r\\n    label: 'Population',\\r\\n    minWidth: 120,\\r\\n    align: 'right',\\r\\n    format: (value) => value.toLocaleString(),\\r\\n  },\\r\\n  {\\r\\n    id: 'size',\\r\\n    label: 'Size\\\\u00a0(km\\\\u00b2)',\\r\\n    minWidth: 120,\\r\\n    align: 'right',\\r\\n    format: (value) => value.toLocaleString(),\\r\\n  },\\r\\n  {\\r\\n    id: 'density',\\r\\n    label: 'Density',\\r\\n    minWidth: 120,\\r\\n    align: 'right',\\r\\n    format: (value) => value.toFixed(2),\\r\\n  },\\r\\n];\\r\\n\\r\\nfunction createData(name, code, population, size) {\\r\\n  const density = population / size;\\r\\n  return {name, code, population, size, density};\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createData('India', 'IN', 1324171354, 3287263),\\r\\n  createData('China', 'CN', 1403500365, 9596961),\\r\\n  createData('Italy', 'IT', 60483973, 301340),\\r\\n  createData('United States', 'US', 327167434, 9833520),\\r\\n  createData('Canada', 'CA', 37602103, 9984670),\\r\\n  createData('Australia', 'AU', 25475400, 7692024),\\r\\n  createData('Germany', 'DE', 83019200, 357578),\\r\\n  createData('Ireland', 'IE', 4857000, 70273),\\r\\n  createData('Mexico', 'MX', 126577691, 1972550),\\r\\n  createData('Japan', 'JP', 126317000, 377973),\\r\\n  createData('France', 'FR', 67022000, 640679),\\r\\n  createData('United Kingdom', 'GB', 67545757, 242495),\\r\\n  createData('Russia', 'RU', 146793744, 17098246),\\r\\n  createData('Nigeria', 'NG', 200962417, 923768),\\r\\n  createData('Brazil', 'BR', 210147125, 8515767),\\r\\n];\\r\\n\\r\\nconst useStyles = makeStyles({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n  },\\r\\n  tableWrapper: {\\r\\n    maxHeight: 407,\\r\\n    overflow: 'auto',\\r\\n  },\\r\\n});\\r\\n\\r\\nexport default function StickyHeadTable() {\\r\\n  const classes = useStyles();\\r\\n  const [page, setPage] = React.useState(0);\\r\\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\\r\\n\\r\\n  function handleChangePage(event, newPage) {\\r\\n    setPage(newPage);\\r\\n  }\\r\\n\\r\\n  function handleChangeRowsPerPage(event) {\\r\\n    setRowsPerPage(+event.target.value);\\r\\n    setPage(0);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <Paper className={classes.root}>\\r\\n      <div className={classes.tableWrapper}>\\r\\n        <Table stickyHeader>\\r\\n          <TableHead>\\r\\n            <TableRow>\\r\\n              {columns.map((column) => (\\r\\n                <TableCell\\r\\n                  key={column.id}\\r\\n                  align={column.align}\\r\\n                  style={{minWidth: column.minWidth}}>\\r\\n                  {column.label}\\r\\n                </TableCell>\\r\\n              ))}\\r\\n            </TableRow>\\r\\n          </TableHead>\\r\\n          <TableBody>\\r\\n            {rows\\r\\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\\r\\n              .map((row) => {\\r\\n                return (\\r\\n                  <TableRow hover role='checkbox' tabIndex={-1} key={row.code}>\\r\\n                    {columns.map((column) => {\\r\\n                      const value = row[column.id];\\r\\n                      return (\\r\\n                        <TableCell key={column.id} align={column.align}>\\r\\n                          {column.format && typeof value === 'number'\\r\\n                            ? column.format(value)\\r\\n                            : value}\\r\\n                        </TableCell>\\r\\n                      );\\r\\n                    })}\\r\\n                  </TableRow>\\r\\n                );\\r\\n              })}\\r\\n          </TableBody>\\r\\n        </Table>\\r\\n      </div>\\r\\n      <TablePagination\\r\\n        rowsPerPageOptions={[10, 25, 100]}\\r\\n        component='div'\\r\\n        count={rows.length}\\r\\n        rowsPerPage={rowsPerPage}\\r\\n        page={page}\\r\\n        backIconButtonProps={{\\r\\n          'aria-label': 'previous page',\\r\\n        }}\\r\\n        nextIconButtonProps={{\\r\\n          'aria-label': 'next page',\\r\\n        }}\\r\\n        onChangePage={handleChangePage}\\r\\n        onChangeRowsPerPage={handleChangeRowsPerPage}\\r\\n      />\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst TAX_RATE = 0.07;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n}));\r\n\r\nfunction ccyFormat(num) {\r\n  return `${num.toFixed(2)}`;\r\n}\r\n\r\nfunction priceRow(qty, unit) {\r\n  return qty * unit;\r\n}\r\n\r\nfunction createRow(desc, qty, unit) {\r\n  const price = priceRow(qty, unit);\r\n  return {desc, qty, unit, price};\r\n}\r\n\r\nfunction subtotal(items) {\r\n  return items.map(({price}) => price).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nconst rows = [\r\n  createRow('Paperclips (Box)', 100, 1.15),\r\n  createRow('Paper (Case)', 10, 45.99),\r\n  createRow('Waste Basket', 2, 17.99),\r\n];\r\n\r\nconst invoiceSubtotal = subtotal(rows);\r\nconst invoiceTaxes = TAX_RATE * invoiceSubtotal;\r\nconst invoiceTotal = invoiceTaxes + invoiceSubtotal;\r\n\r\nexport default function SpanningTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Desc</TableCell>\r\n            <TableCell align='right'>Qty.</TableCell>\r\n            <TableCell align='right'>@</TableCell>\r\n            <TableCell align='right'>Price</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.desc}>\r\n              <TableCell>{row.desc}</TableCell>\r\n              <TableCell align='right'>{row.qty}</TableCell>\r\n              <TableCell align='right'>{row.unit}</TableCell>\r\n              <TableCell align='right'>{ccyFormat(row.price)}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n          <TableRow>\r\n            <TableCell rowSpan={3} />\r\n            <TableCell colSpan={2}>Subtotal</TableCell>\r\n            <TableCell align='right'>{ccyFormat(invoiceSubtotal)}</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Tax</TableCell>\r\n            <TableCell align='right'>{`${(TAX_RATE * 100).toFixed(\r\n              0,\r\n            )} %`}</TableCell>\r\n            <TableCell align='right'>{ccyFormat(invoiceTaxes)}</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell colSpan={2}>Total</TableCell>\r\n            <TableCell align='right'>{ccyFormat(invoiceTotal)}</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport {makeStyles} from '@material-ui/core/styles';\\r\\nimport Table from '@material-ui/core/Table';\\r\\nimport TableBody from '@material-ui/core/TableBody';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport TableHead from '@material-ui/core/TableHead';\\r\\nimport TableRow from '@material-ui/core/TableRow';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\n\\r\\nconst TAX_RATE = 0.07;\\r\\n\\r\\nconst useStyles = makeStyles((theme) => ({\\r\\n  root: {\\r\\n    width: '100%',\\r\\n    marginTop: theme.spacing(3),\\r\\n    overflowX: 'auto',\\r\\n  },\\r\\n  table: {\\r\\n    minWidth: 700,\\r\\n  },\\r\\n}));\\r\\n\\r\\nfunction ccyFormat(num) {\\r\\n  return `${num.toFixed(2)}`;\\r\\n}\\r\\n\\r\\nfunction priceRow(qty, unit) {\\r\\n  return qty * unit;\\r\\n}\\r\\n\\r\\nfunction createRow(desc, qty, unit) {\\r\\n  const price = priceRow(qty, unit);\\r\\n  return {desc, qty, unit, price};\\r\\n}\\r\\n\\r\\nfunction subtotal(items) {\\r\\n  return items.map(({price}) => price).reduce((sum, i) => sum + i, 0);\\r\\n}\\r\\n\\r\\nconst rows = [\\r\\n  createRow('Paperclips (Box)', 100, 1.15),\\r\\n  createRow('Paper (Case)', 10, 45.99),\\r\\n  createRow('Waste Basket', 2, 17.99),\\r\\n];\\r\\n\\r\\nconst invoiceSubtotal = subtotal(rows);\\r\\nconst invoiceTaxes = TAX_RATE * invoiceSubtotal;\\r\\nconst invoiceTotal = invoiceTaxes + invoiceSubtotal;\\r\\n\\r\\nexport default function SpanningTable() {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  return (\\r\\n    <Paper className={classes.root}>\\r\\n      <Table className={classes.table}>\\r\\n        <TableHead>\\r\\n          <TableRow>\\r\\n            <TableCell>Desc</TableCell>\\r\\n            <TableCell align='right'>Qty.</TableCell>\\r\\n            <TableCell align='right'>@</TableCell>\\r\\n            <TableCell align='right'>Price</TableCell>\\r\\n          </TableRow>\\r\\n        </TableHead>\\r\\n        <TableBody>\\r\\n          {rows.map((row) => (\\r\\n            <TableRow key={row.desc}>\\r\\n              <TableCell>{row.desc}</TableCell>\\r\\n              <TableCell align='right'>{row.qty}</TableCell>\\r\\n              <TableCell align='right'>{row.unit}</TableCell>\\r\\n              <TableCell align='right'>{ccyFormat(row.price)}</TableCell>\\r\\n            </TableRow>\\r\\n          ))}\\r\\n\\r\\n          <TableRow>\\r\\n            <TableCell rowSpan={3} />\\r\\n            <TableCell colSpan={2}>Subtotal</TableCell>\\r\\n            <TableCell align='right'>{ccyFormat(invoiceSubtotal)}</TableCell>\\r\\n          </TableRow>\\r\\n          <TableRow>\\r\\n            <TableCell>Tax</TableCell>\\r\\n            <TableCell align='right'>{`${(TAX_RATE * 100).toFixed(\\r\\n              0,\\r\\n            )} %`}</TableCell>\\r\\n            <TableCell align='right'>{ccyFormat(invoiceTaxes)}</TableCell>\\r\\n          </TableRow>\\r\\n          <TableRow>\\r\\n            <TableCell colSpan={2}>Total</TableCell>\\r\\n            <TableCell align='right'>{ccyFormat(invoiceTotal)}</TableCell>\\r\\n          </TableRow>\\r\\n        </TableBody>\\r\\n      </Table>\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {AutoSizer, Column, Table} from 'react-virtualized';\r\n\r\nconst styles = (theme) => ({\r\n  flexContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    boxSizing: 'border-box',\r\n  },\r\n  tableRow: {\r\n    cursor: 'pointer',\r\n  },\r\n  tableRowHover: {\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.grey[200],\r\n    },\r\n  },\r\n  tableCell: {\r\n    flex: 1,\r\n  },\r\n  noClick: {\r\n    cursor: 'initial',\r\n  },\r\n});\r\n\r\nclass MuiVirtualizedTable extends React.PureComponent {\r\n  static defaultProps = {\r\n    headerHeight: 48,\r\n    rowHeight: 48,\r\n  };\r\n\r\n  getRowClassName = ({index}) => {\r\n    const {classes, onRowClick} = this.props;\r\n\r\n    return clsx(classes.tableRow, classes.flexContainer, {\r\n      [classes.tableRowHover]: index !== -1 && onRowClick != null,\r\n    });\r\n  };\r\n\r\n  cellRenderer = ({cellData, columnIndex}) => {\r\n    const {columns, classes, rowHeight, onRowClick} = this.props;\r\n    return (\r\n      <TableCell\r\n        component='div'\r\n        className={clsx(classes.tableCell, classes.flexContainer, {\r\n          [classes.noClick]: onRowClick == null,\r\n        })}\r\n        variant='body'\r\n        style={{height: rowHeight}}\r\n        align={\r\n          (columnIndex != null && columns[columnIndex].numeric) || false\r\n            ? 'right'\r\n            : 'left'\r\n        }>\r\n        {cellData}\r\n      </TableCell>\r\n    );\r\n  };\r\n\r\n  headerRenderer = ({label, columnIndex}) => {\r\n    const {headerHeight, columns, classes} = this.props;\r\n\r\n    return (\r\n      <TableCell\r\n        component='div'\r\n        className={clsx(\r\n          classes.tableCell,\r\n          classes.flexContainer,\r\n          classes.noClick,\r\n        )}\r\n        variant='head'\r\n        style={{height: headerHeight}}\r\n        align={columns[columnIndex].numeric || false ? 'right' : 'left'}>\r\n        <span>{label}</span>\r\n      </TableCell>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      columns,\r\n      rowHeight,\r\n      headerHeight,\r\n      ...tableProps\r\n    } = this.props;\r\n    return (\r\n      <AutoSizer>\r\n        {({height, width}) => (\r\n          <Table\r\n            height={height}\r\n            width={width}\r\n            rowHeight={rowHeight}\r\n            headerHeight={headerHeight}\r\n            {...tableProps}\r\n            rowClassName={this.getRowClassName}>\r\n            {columns.map(({dataKey, ...other}, index) => {\r\n              return (\r\n                <Column\r\n                  key={dataKey}\r\n                  headerRenderer={(headerProps) =>\r\n                    this.headerRenderer({\r\n                      ...headerProps,\r\n                      columnIndex: index,\r\n                    })\r\n                  }\r\n                  className={classes.flexContainer}\r\n                  cellRenderer={this.cellRenderer}\r\n                  dataKey={dataKey}\r\n                  {...other}\r\n                />\r\n              );\r\n            })}\r\n          </Table>\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nMuiVirtualizedTable.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  columns: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      dataKey: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      numeric: PropTypes.bool,\r\n      width: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  headerHeight: PropTypes.number,\r\n  onRowClick: PropTypes.func,\r\n  rowHeight: PropTypes.number,\r\n};\r\n\r\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\r\n\r\n// ---\r\n\r\nconst sample = [\r\n  ['Frozen yoghurt', 159, 6.0, 24, 4.0],\r\n  ['Ice cream sandwich', 237, 9.0, 37, 4.3],\r\n  ['Eclair', 262, 16.0, 24, 6.0],\r\n  ['Cupcake', 305, 3.7, 67, 4.3],\r\n  ['Gingerbread', 356, 16.0, 49, 3.9],\r\n];\r\n\r\nfunction createData(id, dessert, calories, fat, carbs, protein) {\r\n  return {id, dessert, calories, fat, carbs, protein};\r\n}\r\n\r\nconst rows = [];\r\n\r\nfor (let i = 0; i < 200; i += 1) {\r\n  const randomSelection = sample[Math.floor(Math.random() * sample.length)];\r\n  rows.push(createData(i, ...randomSelection));\r\n}\r\n\r\nexport default function ReactVirtualizedTable() {\r\n  return (\r\n    <Paper style={{height: 400, width: '100%'}}>\r\n      <VirtualizedTable\r\n        rowCount={rows.length}\r\n        rowGetter={({index}) => rows[index]}\r\n        columns={[\r\n          {\r\n            width: 200,\r\n            label: 'Dessert',\r\n            dataKey: 'dessert',\r\n          },\r\n          {\r\n            width: 120,\r\n            label: 'Calories\\u00A0(g)',\r\n            dataKey: 'calories',\r\n            numeric: true,\r\n          },\r\n          {\r\n            width: 120,\r\n            label: 'Fat\\u00A0(g)',\r\n            dataKey: 'fat',\r\n            numeric: true,\r\n          },\r\n          {\r\n            width: 120,\r\n            label: 'Carbs\\u00A0(g)',\r\n            dataKey: 'carbs',\r\n            numeric: true,\r\n          },\r\n          {\r\n            width: 120,\r\n            label: 'Protein\\u00A0(g)',\r\n            dataKey: 'protein',\r\n            numeric: true,\r\n          },\r\n        ]}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","export default \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport clsx from 'clsx';\\r\\nimport {withStyles} from '@material-ui/core/styles';\\r\\nimport TableCell from '@material-ui/core/TableCell';\\r\\nimport Paper from '@material-ui/core/Paper';\\r\\nimport {AutoSizer, Column, Table} from 'react-virtualized';\\r\\n\\r\\nconst styles = (theme) => ({\\r\\n  flexContainer: {\\r\\n    display: 'flex',\\r\\n    alignItems: 'center',\\r\\n    boxSizing: 'border-box',\\r\\n  },\\r\\n  tableRow: {\\r\\n    cursor: 'pointer',\\r\\n  },\\r\\n  tableRowHover: {\\r\\n    '&:hover': {\\r\\n      backgroundColor: theme.palette.grey[200],\\r\\n    },\\r\\n  },\\r\\n  tableCell: {\\r\\n    flex: 1,\\r\\n  },\\r\\n  noClick: {\\r\\n    cursor: 'initial',\\r\\n  },\\r\\n});\\r\\n\\r\\nclass MuiVirtualizedTable extends React.PureComponent {\\r\\n  static defaultProps = {\\r\\n    headerHeight: 48,\\r\\n    rowHeight: 48,\\r\\n  };\\r\\n\\r\\n  getRowClassName = ({index}) => {\\r\\n    const {classes, onRowClick} = this.props;\\r\\n\\r\\n    return clsx(classes.tableRow, classes.flexContainer, {\\r\\n      [classes.tableRowHover]: index !== -1 && onRowClick != null,\\r\\n    });\\r\\n  };\\r\\n\\r\\n  cellRenderer = ({cellData, columnIndex}) => {\\r\\n    const {columns, classes, rowHeight, onRowClick} = this.props;\\r\\n    return (\\r\\n      <TableCell\\r\\n        component='div'\\r\\n        className={clsx(classes.tableCell, classes.flexContainer, {\\r\\n          [classes.noClick]: onRowClick == null,\\r\\n        })}\\r\\n        variant='body'\\r\\n        style={{height: rowHeight}}\\r\\n        align={\\r\\n          (columnIndex != null && columns[columnIndex].numeric) || false\\r\\n            ? 'right'\\r\\n            : 'left'\\r\\n        }>\\r\\n        {cellData}\\r\\n      </TableCell>\\r\\n    );\\r\\n  };\\r\\n\\r\\n  headerRenderer = ({label, columnIndex}) => {\\r\\n    const {headerHeight, columns, classes} = this.props;\\r\\n\\r\\n    return (\\r\\n      <TableCell\\r\\n        component='div'\\r\\n        className={clsx(\\r\\n          classes.tableCell,\\r\\n          classes.flexContainer,\\r\\n          classes.noClick,\\r\\n        )}\\r\\n        variant='head'\\r\\n        style={{height: headerHeight}}\\r\\n        align={columns[columnIndex].numeric || false ? 'right' : 'left'}>\\r\\n        <span>{label}</span>\\r\\n      </TableCell>\\r\\n    );\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      classes,\\r\\n      columns,\\r\\n      rowHeight,\\r\\n      headerHeight,\\r\\n      ...tableProps\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <AutoSizer>\\r\\n        {({height, width}) => (\\r\\n          <Table\\r\\n            height={height}\\r\\n            width={width}\\r\\n            rowHeight={rowHeight}\\r\\n            headerHeight={headerHeight}\\r\\n            {...tableProps}\\r\\n            rowClassName={this.getRowClassName}>\\r\\n            {columns.map(({dataKey, ...other}, index) => {\\r\\n              return (\\r\\n                <Column\\r\\n                  key={dataKey}\\r\\n                  headerRenderer={(headerProps) =>\\r\\n                    this.headerRenderer({\\r\\n                      ...headerProps,\\r\\n                      columnIndex: index,\\r\\n                    })\\r\\n                  }\\r\\n                  className={classes.flexContainer}\\r\\n                  cellRenderer={this.cellRenderer}\\r\\n                  dataKey={dataKey}\\r\\n                  {...other}\\r\\n                />\\r\\n              );\\r\\n            })}\\r\\n          </Table>\\r\\n        )}\\r\\n      </AutoSizer>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nMuiVirtualizedTable.propTypes = {\\r\\n  classes: PropTypes.object.isRequired,\\r\\n  columns: PropTypes.arrayOf(\\r\\n    PropTypes.shape({\\r\\n      dataKey: PropTypes.string.isRequired,\\r\\n      label: PropTypes.string.isRequired,\\r\\n      numeric: PropTypes.bool,\\r\\n      width: PropTypes.number.isRequired,\\r\\n    }),\\r\\n  ).isRequired,\\r\\n  headerHeight: PropTypes.number,\\r\\n  onRowClick: PropTypes.func,\\r\\n  rowHeight: PropTypes.number,\\r\\n};\\r\\n\\r\\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\\r\\n\\r\\n// ---\\r\\n\\r\\nconst sample = [\\r\\n  ['Frozen yoghurt', 159, 6.0, 24, 4.0],\\r\\n  ['Ice cream sandwich', 237, 9.0, 37, 4.3],\\r\\n  ['Eclair', 262, 16.0, 24, 6.0],\\r\\n  ['Cupcake', 305, 3.7, 67, 4.3],\\r\\n  ['Gingerbread', 356, 16.0, 49, 3.9],\\r\\n];\\r\\n\\r\\nfunction createData(id, dessert, calories, fat, carbs, protein) {\\r\\n  return {id, dessert, calories, fat, carbs, protein};\\r\\n}\\r\\n\\r\\nconst rows = [];\\r\\n\\r\\nfor (let i = 0; i < 200; i += 1) {\\r\\n  const randomSelection = sample[Math.floor(Math.random() * sample.length)];\\r\\n  rows.push(createData(i, ...randomSelection));\\r\\n}\\r\\n\\r\\nexport default function ReactVirtualizedTable() {\\r\\n  return (\\r\\n    <Paper style={{height: 400, width: '100%'}}>\\r\\n      <VirtualizedTable\\r\\n        rowCount={rows.length}\\r\\n        rowGetter={({index}) => rows[index]}\\r\\n        columns={[\\r\\n          {\\r\\n            width: 200,\\r\\n            label: 'Dessert',\\r\\n            dataKey: 'dessert',\\r\\n          },\\r\\n          {\\r\\n            width: 120,\\r\\n            label: 'Calories\\\\u00A0(g)',\\r\\n            dataKey: 'calories',\\r\\n            numeric: true,\\r\\n          },\\r\\n          {\\r\\n            width: 120,\\r\\n            label: 'Fat\\\\u00A0(g)',\\r\\n            dataKey: 'fat',\\r\\n            numeric: true,\\r\\n          },\\r\\n          {\\r\\n            width: 120,\\r\\n            label: 'Carbs\\\\u00A0(g)',\\r\\n            dataKey: 'carbs',\\r\\n            numeric: true,\\r\\n          },\\r\\n          {\\r\\n            width: 120,\\r\\n            label: 'Protein\\\\u00A0(g)',\\r\\n            dataKey: 'protein',\\r\\n            numeric: true,\\r\\n          },\\r\\n        ]}\\r\\n      />\\r\\n    </Paper>\\r\\n  );\\r\\n}\\r\\n\";","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function MaterialTableDemo() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      {title: 'Name', field: 'name'},\r\n      {title: 'Surname', field: 'surname'},\r\n      {title: 'Birth Year', field: 'birthYear', type: 'numeric'},\r\n      {\r\n        title: 'Birth Place',\r\n        field: 'birthCity',\r\n        lookup: {34: 'İstanbul', 63: 'Şanlıurfa'},\r\n      },\r\n    ],\r\n    data: [\r\n      {name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63},\r\n      {\r\n        name: 'Zerya Betül',\r\n        surname: 'Baran',\r\n        birthYear: 2017,\r\n        birthCity: 34,\r\n      },\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title='Editable Example'\r\n      columns={state.columns}\r\n      data={state.data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data.push(newData);\r\n              setState({...state, data});\r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data[data.indexOf(oldData)] = newData;\r\n              setState({...state, data});\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              const data = [...state.data];\r\n              data.splice(data.indexOf(oldData), 1);\r\n              setState({...state, data});\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\n\r\nimport SimpleTable from './SimpleTable';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleTableSource from '!raw-loader!./SimpleTable';\r\nimport DenseTable from './DenseTable';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport DenseTableSource from '!raw-loader!./DenseTable';\r\nimport SortingNSelecting from './SortingNSelecting';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SortingNSelectingSource from '!raw-loader!./SortingNSelecting';\r\nimport CustomizedTables from './CustomizedTables';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport CustomizedTablesSource from '!raw-loader!./CustomizedTables';\r\nimport CustomTablePaginationAction from './CustomTablePaginationAction';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport CustomTablePaginationActionSource from '!raw-loader!./CustomTablePaginationAction';\r\nimport FixedHeader from './FixedHeader';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport FixedHeaderSource from '!raw-loader!./FixedHeader';\r\nimport SpanningTable from './SpanningTable';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SpanningTableSource from '!raw-loader!./SpanningTable';\r\nimport VirtualizedTable from './VirtualizedTable';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport VirtualizedTableSource from '!raw-loader!./VirtualizedTable';\r\nimport ComplementaryProjects from './ComplementaryProjects';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport ComplementaryProjectsSource from '!raw-loader!./ComplementaryProjects';\r\n\r\nconst Tables = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Tables'\r\n        description='Data tables display sets of data. They can be fully customized'\r\n        refUrl='https://material-ui.com/components/tables/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Simple Table'\r\n            component={SimpleTable}\r\n            source={SimpleTableSource}\r\n            description='A simple example with no frills.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Dense Table'\r\n            component={DenseTable}\r\n            source={DenseTableSource}\r\n            description='A simple example of a dense table with no frills.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Sorting & Selecting'\r\n            component={SortingNSelecting}\r\n            source={SortingNSelectingSource}\r\n            description='This example demonstrates the use of Checkbox and clickable rows for selection, with a custom Toolbar. It uses the TableSortLabel component to help style column headings.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Customized tables'\r\n            component={CustomizedTables}\r\n            source={CustomizedTablesSource}\r\n            description='Here is an example of customizing the component. You can learn more about this in the overrides documentation page.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Custom Table Pagination Action'\r\n            component={CustomTablePaginationAction}\r\n            source={CustomTablePaginationActionSource}\r\n            description='The Action property of the TablePagination component allows the implementation of custom actions.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Fixed header'\r\n            component={FixedHeader}\r\n            source={FixedHeaderSource}\r\n            description='An example of a table with scrollable rows and fixed column headers. It leverages the stickyHeader prop (⚠️ no IE 11 support).'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Spanning Table'\r\n            component={SpanningTable}\r\n            source={SpanningTableSource}\r\n            description='A simple example with spanning rows & columns.'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Virtualized Table'\r\n            component={VirtualizedTable}\r\n            source={VirtualizedTableSource}\r\n            description='In the following example, we demonstrate how to use react-virtualized with the Table component. It renders 200 rows and can easily handle more. Virtualization helps with performance issues..'\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Complementary projects'\r\n            component={ComplementaryProjects}\r\n            source={ComplementaryProjectsSource}\r\n            description='For more advanced use cases you might be able to take advantage of:.'\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","export default \"import React from 'react';\\r\\nimport MaterialTable from 'material-table';\\r\\n\\r\\nexport default function MaterialTableDemo() {\\r\\n  const [state, setState] = React.useState({\\r\\n    columns: [\\r\\n      {title: 'Name', field: 'name'},\\r\\n      {title: 'Surname', field: 'surname'},\\r\\n      {title: 'Birth Year', field: 'birthYear', type: 'numeric'},\\r\\n      {\\r\\n        title: 'Birth Place',\\r\\n        field: 'birthCity',\\r\\n        lookup: {34: 'İstanbul', 63: 'Şanlıurfa'},\\r\\n      },\\r\\n    ],\\r\\n    data: [\\r\\n      {name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63},\\r\\n      {\\r\\n        name: 'Zerya Betül',\\r\\n        surname: 'Baran',\\r\\n        birthYear: 2017,\\r\\n        birthCity: 34,\\r\\n      },\\r\\n    ],\\r\\n  });\\r\\n\\r\\n  return (\\r\\n    <MaterialTable\\r\\n      title='Editable Example'\\r\\n      columns={state.columns}\\r\\n      data={state.data}\\r\\n      editable={{\\r\\n        onRowAdd: (newData) =>\\r\\n          new Promise((resolve) => {\\r\\n            setTimeout(() => {\\r\\n              resolve();\\r\\n              const data = [...state.data];\\r\\n              data.push(newData);\\r\\n              setState({...state, data});\\r\\n            }, 600);\\r\\n          }),\\r\\n        onRowUpdate: (newData, oldData) =>\\r\\n          new Promise((resolve) => {\\r\\n            setTimeout(() => {\\r\\n              resolve();\\r\\n              const data = [...state.data];\\r\\n              data[data.indexOf(oldData)] = newData;\\r\\n              setState({...state, data});\\r\\n            }, 600);\\r\\n          }),\\r\\n        onRowDelete: (oldData) =>\\r\\n          new Promise((resolve) => {\\r\\n            setTimeout(() => {\\r\\n              resolve();\\r\\n              const data = [...state.data];\\r\\n              data.splice(data.indexOf(oldData), 1);\\r\\n              setState({...state, data});\\r\\n            }, 600);\\r\\n          }),\\r\\n      }}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n\";"],"sourceRoot":""}